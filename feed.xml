<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-08-02T12:15:14+08:00</updated><id>/feed.xml</id><title type="html">MINGHU6’s Blog</title><subtitle>Coding somethings</subtitle><entry><title type="html">Why Greedy？</title><link href="/algs/Greedy.html" rel="alternate" type="text/html" title="Why Greedy？" /><published>2023-08-01T00:00:00+08:00</published><updated>2023-08-01T00:00:00+08:00</updated><id>/algs/Greedy</id><content type="html" xml:base="/algs/Greedy.html"><![CDATA[<h2 id="前言">前言</h2>

<p>“贪心”的这个概念根本就有问题：</p>

<ol>
  <li>从适用条件上讲，它过于地宽泛而没有用；</li>
  <li>从内容上讲，它只是机械地总结了结果，而缺乏提示最关键的思考过程</li>
</ol>

<p>真正地问题在于为什么 Greedy 成立，以及成立的内在核心条件是什么？</p>

<p>这是一个两步递进的问题，首先是证明 Greedy 成立，Greedy 形式上总是由一个阶段的局部最优解来得到全局最优解，这天然适合用归纳法<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">1</a></sup>来进行证明，只要证明初始条件的成立<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>和前一个阶段的局部最优解能够导出下一个阶段的局部最优解。</p>

<p>然后可以发现 Greedy 成立的条件会有类似之处，进行真正有意义地总结。</p>

<p>下面我们介绍一些贪心算法的实例，来进行观察。</p>

<h2 id="树上直径">树上直径</h2>

<p>求解非负权树形图的直径。</p>

<p>树形图（Tree Graph），就是像树一样的无向连通图，也就是无环地无向连通图。</p>

<p>树上的直径就是两点间最长的简单路径<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">3</a></sup>。</p>

<h3 id="算法推论">算法推论</h3>

<p>这时图上任意一点 $v_0$ ，以它为起点，距离最远的一个点是 $v_1$，则 $v_1$ 一定是直径的两个端点之一。<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup></p>

<p>考虑树的直径一定横跨左右子树<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>，而 $P_{v_0\rightarrow v_1}$ 只有两种可能：  与直径有交点或者没有交点 。</p>

<p>如果没有交点，就是 $P_{v_0\rightarrow v_1}$ 只在一侧的子树上的情况，那么如果连接树的根节点和 $P_{v_0\rightarrow v_1}$ 上最近根的一个点 $v_1’$ ，假设根节点是 $v_R$ ，同侧子树的直径的端点是 $v_d$ ，那么根据直径的性质，$|v_1’ \rightarrow v_1| \leqslant |v_R\rightarrow v_1’ \rightarrow v_1| \leqslant |v_R\rightarrow v_d|$ ，这样就有 $|v_0\rightarrow v_1’ \rightarrow v_1| \leqslant |v_0\rightarrow v_R\rightarrow v_d|$ 。</p>

<ol>
  <li>如果 $|v_0\rightarrow v_1’ \rightarrow v_1| \lt |v_0\rightarrow v_R\rightarrow v_d|$ ，构造出的新路径 $P_{v_0\rightarrow v_R\rightarrow v_d}$ 就是更长的距离 $v_0$ 的路径，这就与前提条件相悖；</li>
  <li>否则 $|v_0\rightarrow v_1’ \rightarrow v_1| = |v_0\rightarrow v_R\rightarrow v_d|$ ，这意味着 $P_{v_R\rightarrow v_0\rightarrow v_1’\rightarrow v_1}$ 要么比原路径 $P_{v_R\rightarrow v_d}$ 更长，这就和前提条件相悖，要么相等<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>，$|v_1’ \rightarrow v_1| = |v_R\rightarrow v_1’ \rightarrow v_1| = |v_R\rightarrow v_d|$ 这就说明 $P_{v_R\rightarrow v_1’\rightarrow v_1}$ 也是一条可选的直径（的一部分），此时 $v_1$ 当然就是直径的一个端点。</li>
</ol>

<p>如果存在交点</p>

<h2 id="dijkstra-最短路径">Dijkstra 最短路径</h2>

<h2 id="jump-games">Jump Games</h2>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:3" role="doc-endnote">
      <p>Inductive Reasoning，也许用诱导推理这个词更能把握它的内核，而且总是可以联想到后缀数组的诱导排序（Induced Sorting）算法， <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>这通常是显而易见的 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p>没有重复点的路径 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>然后再求解距离 $v_1$ 最远的点，就可以求出整个直径 <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>不这样的话，假如只在其中一棵子树上，通过连接另一侧子树上的点、根节点和直径的近端的点，就能构造出更长的直径 <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>存在零权重的边 <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;algs&quot;]" /><summary type="html"><![CDATA[前言]]></summary></entry><entry><title type="html">LeetCode Packet 1</title><link href="/oth/LeetCodePacket1.html" rel="alternate" type="text/html" title="LeetCode Packet 1" /><published>2023-07-29T00:00:00+08:00</published><updated>2023-07-29T00:00:00+08:00</updated><id>/oth/LeetCodePacket1</id><content type="html" xml:base="/oth/LeetCodePacket1.html"><![CDATA[<h2 id="44-wildcard-matching"><a href="https://leetcode.com/problems/wildcard-matching/">44. Wildcard Matching</a></h2>

<p>各方面都更像 <a href="/oth/LeetCode0010.html">0010 - Regular Expression Matching</a> II ，前者是正则匹配，后者则是一般 shell 上文件名的匹配，而且后者（也就是本题）的 DP 实现可以把时间和空间性能很好地结合在一起。</p>

<p>把模式串的遍历放在外循环，唯一需要仔细考虑下的就是每一轮 DP 的初始化：</p>

<ol>
  <li>第一轮的 DP，$\text{dp}[0] = \text{true}$ ，也就是空串匹配空串，其他位置是非空文本串匹配空模式串，显然全都是 $\text{false}$ ；</li>
  <li>第二轮及之后的 DP，如果对应位置是 <code class="language-plaintext highlighter-rouge">*</code> 符号，$\text{dp}[0]$ 就等于前一轮的 $\text{dp}[0]$ ，否则就排除了模式串前缀全是星符号的情况，就一定是 $\text{false}$</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># j = 0
</span>    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'*'</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">or</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">elif</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'?'</span><span class="p">:</span>
            <span class="n">prev1</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>

            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">prev1</span> <span class="o">=</span> <span class="n">prev1</span><span class="p">,</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">prev1</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>

            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">prev1</span> <span class="o">=</span> <span class="n">prev1</span><span class="p">,</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">prev1</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<p>和一个直接使用 <code class="language-plaintext highlighter-rouge">fnmatch.fnamtch</code> 的运行时间一致。</p>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[44. Wildcard Matching]]></summary></entry><entry><title type="html">0042 - Trapping Rain Water</title><link href="/oth/LeetCode0042.html" rel="alternate" type="text/html" title="0042 - Trapping Rain Water" /><published>2023-07-27T00:00:00+08:00</published><updated>2023-07-27T00:00:00+08:00</updated><id>/oth/LeetCode0042</id><content type="html" xml:base="/oth/LeetCode0042.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/trapping-rain-water/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.11/0042_trapping_rain_water/py0042">源代码</a></p>

<p>如果能知到每个单位区间左边和右边的最大高度，取其最小值，就是该单位的存雨量。<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<h3 id="链接题目">链接题目</h3>

<p><a href="/oth/LeetCode0032.html">0032 - Longest Valid Parentheses</a></p>

<h2 id="解双向扫描">解①双向扫描：</h2>

<p>可以认为下降和上升是需要匹配的两个阶段，如果事先记录下降前的高度，在一个下降-上升周期结束的时候，就可以回溯计算这个“坑道”的存雨量，不过这有一个前提，就是上升达到的最大高度不小于下降前的最大高度，确保我们正确计算了这个坑道的雨量。但这就带来了一个问题，可能一直到结束，后面都找不到匹配的高度，于是可以参照 <a href="/oth/LeetCode0032.html">0032</a> 里面的双向扫描，再次地从后向前扫描到最后一个下降的“峰”位。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">h</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">mode</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># peak
</span>    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">h</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">mode</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">mode</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">mode</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">mode</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">mode</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">mode</span> <span class="ow">and</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">h</span><span class="p">[</span><span class="n">k</span><span class="p">]:</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">j</span><span class="p">:</span> <span class="n">h</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">-</span><span class="n">h</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">)))</span>
            <span class="n">k</span> <span class="o">=</span> <span class="n">i</span>

    <span class="n">mode</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">oldk</span> <span class="o">=</span> <span class="n">k</span>
    <span class="n">k</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">h</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">oldk</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">mode</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">mode</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">mode</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">mode</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">mode</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">mode</span> <span class="ow">and</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">h</span><span class="p">[</span><span class="n">k</span><span class="p">]:</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">j</span><span class="p">:</span> <span class="n">h</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">-</span><span class="n">h</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">)))</span>
            <span class="n">k</span> <span class="o">=</span> <span class="n">i</span>

    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<p>但是必须吐槽得是本来 <code class="language-plaintext highlighter-rouge">mode</code> 采用得是枚举类型：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">enum</span> <span class="kn">import</span> <span class="n">Enum</span>

<span class="k">class</span> <span class="nc">Mode</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
	<span class="n">Down</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">Up</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>但是 Python 的 Enum ，或者说一般地对类的封装是如此地消耗内存，只这一个类的定义，就直接让测试结果的内存消耗从排名靠前掉到了排名靠后！于是替换成了布尔类型。</p>

<p>相比于下面介绍的同复杂度但是一遍扫描的算法，双向扫描的算法要稍微慢一点。</p>

<h2 id="解双指针">解②双指针：</h2>

<p>假设我们事先找到序列里的最大高度<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> $h_\text{max}$：</p>

<p>那么在它的左边，从头开始扫描，维护一个到当前位置 $i$ 为止的前缀最大值 $h_\text{left} = \max\lbrace {h_0 \dots h_i}\rbrace$，每个位置的积水就是 $h_\text{left}-h_i$ ；</p>

<p>在它的右边，从尾开始扫描，维护一个到当前位置 $j$ 为止的前缀最大值 $h_\text{right} = \max\lbrace{h_{n-1} \dots h_j}\rbrace$，每个位置的积水就是$h_\text{right}-h_j$ 。</p>

<p>实际上我们不需要真的取寻找这个最大高度，我们只需要确定 $h_\text{left}$ 和 $h_\text{right}$ 不是最大值即可，只要从两边同时开始扫描，比较  $h_\text{left}$ 和 $h_\text{right}$ ，其中较小的那一个计算该位置积水，然后继续前进，直到完成整个序列的扫描，也就是两端相遇。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">h</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">lf</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">rh</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="n">lf_max</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">lf</span><span class="p">]</span>
    <span class="n">rh_max</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">rh</span><span class="p">]</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">lf</span> <span class="o">&lt;</span> <span class="n">rh</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">h</span><span class="p">[</span><span class="n">lf</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">[</span><span class="n">rh</span><span class="p">]:</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">lf_max</span> <span class="o">-</span> <span class="n">h</span><span class="p">[</span><span class="n">lf</span><span class="p">]</span>

            <span class="n">lf</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">lf_max</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">lf_max</span><span class="p">,</span> <span class="n">h</span><span class="p">[</span><span class="n">lf</span><span class="p">])</span>

        <span class="k">else</span><span class="p">:</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">rh_max</span> <span class="o">-</span> <span class="n">h</span><span class="p">[</span><span class="n">rh</span><span class="p">]</span>

            <span class="n">rh</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">rh_max</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">rh_max</span><span class="p">,</span> <span class="n">h</span><span class="p">[</span><span class="n">rh</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h2 id="解单调栈">解③单调栈：</h2>

<p>单调栈，Monotonic Stack，这是第一次遇到可以恰当地套用这个算法思想的题目。</p>

<p>回到双向扫描的思路，只要序列一直保持不增<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>，就（把索引位置）入栈，直到遇到一个大于栈顶元素（对应高度）的值 $h_i$，然后弹出所有（对应高度）不超过 $h_i$ 的栈元素，于是可以利用这些元素<strong>水平地</strong>计算积雨。</p>

<p>每一层的高度是（弹出的）相邻栈元素对应的高度差，长度是每个栈元素 $k_0$ 的前一个栈元素 $k_1$ 与当前位置 $i$ 的差减一：$i-k_1-1$ 。</p>

<p>并且注意，如果在弹出不超过 $h_i$ 的元素后，栈中还有元素，那么弹出的最后一个元素到栈顶元素还有一段积雨，高度差则是 $h[i]-h_\text{last}$。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">pairwise</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">h</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">h</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">h</span><span class="p">[</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]:</span>
            <span class="n">cache</span> <span class="o">=</span> <span class="p">[</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()]</span>

            <span class="k">while</span> <span class="n">stack</span> <span class="ow">and</span> <span class="n">h</span><span class="p">[</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">&lt;=</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">cache</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>

            <span class="n">ans</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">k</span><span class="p">:</span> <span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">k</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span><span class="o">-</span><span class="n">h</span><span class="p">[</span><span class="n">k</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">k</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">pairwise</span><span class="p">(</span><span class="n">cache</span><span class="p">)))</span>

            <span class="k">if</span> <span class="n">stack</span><span class="p">:</span>
               <span class="n">ans</span> <span class="o">+=</span> <span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">h</span><span class="p">[</span><span class="n">cache</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]])</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<p>测试时的实际性能不错。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>由此可以推出，当用两个数组分别记录某个位置的前缀的高度最大值和后缀的高度最大值，然后分别从左扫描和从右扫描，计算完这个数组，这就是所谓 DP 的思路，真是什么玩意儿！ <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>若高度不唯一，任选其一即可 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>相等元素也需要入栈，为了正确计算每一层的积水 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">0032 - Longest Valid Parentheses</title><link href="/oth/LeetCode0032.html" rel="alternate" type="text/html" title="0032 - Longest Valid Parentheses" /><published>2023-07-25T00:00:00+08:00</published><updated>2023-07-25T00:00:00+08:00</updated><id>/oth/LeetCode0032</id><content type="html" xml:base="/oth/LeetCode0032.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/longest-valid-parentheses/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.10/0032_longest_valid_parans/py0032">源代码</a></p>

<p>考虑合法的括号序列的性质：</p>

<ul>
  <li>开括号可以任意数量地出现，但是串结束的时候括号可能没有匹配完</li>
  <li>闭括号不能超出开括号的数量</li>
  <li>括号序列是对称的，从反方向来看，闭括号就是开括号，开括号就是闭括号</li>
</ul>

<p>给出一个 <strong>括号单元</strong> 的递归定义：<code class="language-plaintext highlighter-rouge">unit ::= () | (unit+)</code></p>

<p>一个合法的括号串： <code class="language-plaintext highlighter-rouge">s=unit*</code></p>

<h3 id="链接题目">链接题目</h3>

<ul>
  <li><a href="/oth/LeetCode0022.html">0022 - Generate Parentheses</a></li>
</ul>

<h2 id="解双向扫描">解①双向扫描：</h2>

<p>一个只包含左右括号的串总是由三部分组成：括号单元、失配的闭括号、尾部的未完成的括号单元。</p>

<ol>
  <li>与前面出现的开括号数量匹配的闭括号属于括号单元；</li>
  <li>其余的闭括号属于失配的闭括号；</li>
  <li>而多余的开括号如果一直到最后都没有被匹配，就会形成未完成的括号单元</li>
</ol>

<p>对于括号单元和失配闭括号，一遍扫描就可以解决：统计开括号和闭括号，当数量相等时就是一个括号单元的结束，当遇到失配闭括号时就重置开括号闭括号数量。</p>

<p>但是对于尾部可能存在的未完成的括号单元，用子串 $s_1$ 表示，因为需要统计未完成的括号单元内的最长括号序列，前面的算法处理不了<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>，但是如果从反方向看<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>它尾部的未完成单元，它的尾部一定不存在未完成单元<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>，因此可以一遍扫描计算得到这一部分的最长的合法括号序列。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="nb">open</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">close</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">start</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">'('</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">open</span> <span class="o">==</span> <span class="n">close</span><span class="p">:</span>
                <span class="n">start</span> <span class="o">=</span> <span class="n">i</span>
            <span class="nb">open</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">')'</span><span class="p">:</span>
            <span class="n">close</span> <span class="o">+=</span> <span class="mi">1</span>

            <span class="k">if</span> <span class="n">close</span> <span class="o">&gt;</span> <span class="nb">open</span><span class="p">:</span>
                <span class="c1"># reset
</span>                <span class="nb">open</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">close</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">elif</span> <span class="n">close</span> <span class="o">==</span> <span class="nb">open</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="nb">open</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">if</span> <span class="nb">open</span> <span class="o">&gt;</span> <span class="n">close</span><span class="p">:</span>
        <span class="n">rev_open</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">rev_close</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">rev_ans</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">[</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="p">:][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">')'</span><span class="p">:</span>
                <span class="n">rev_open</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">'('</span><span class="p">:</span>
                <span class="n">rev_close</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">rev_close</span> <span class="o">&gt;</span> <span class="n">rev_open</span><span class="p">:</span>
                    <span class="c1"># reset
</span>                    <span class="n">rev_open</span> <span class="o">=</span> <span class="mi">0</span>
                    <span class="n">rev_close</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">elif</span> <span class="n">rev_close</span> <span class="o">==</span> <span class="n">rev_open</span><span class="p">:</span>
                    <span class="n">rev_ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">rev_ans</span><span class="p">,</span> <span class="n">rev_open</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>

        <span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">rev_ans</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<p>时间复杂度 $O(n)$ ，空间复杂度 $O(1)$ ，是空间复杂度最优的解。</p>

<h2 id="解dp">解②DP：</h2>

<p>按照扫描方向看，用后缀数组 $\text{dp}[i]$ 表示结尾在 $i$ 处的最长合法括号序列的长度。</p>

<ol>
  <li>如果结尾字符是 <code class="language-plaintext highlighter-rouge">(</code> ，对应 $\text{dp}$ 一定为 $0$ ；</li>
  <li>否则结尾字符是 <code class="language-plaintext highlighter-rouge">)</code> ，这时需要检查前一个字符对应的最长合法括号序列，如果在那个括号序列的前一个字符 $s[i-\text{dp}[i-1]-1]$ 又是 <code class="language-plaintext highlighter-rouge">(</code> ，则此时的 $\text{dp}[i] = 2+\text{dp}[i-1]$ ，如果此时 $i-\text{dp}[i-1]-1 \gt 0$ ，就再加上 $\text{dp}[i-\text{dp}[i-1]-2]$ ，否则没有匹配的开括号，对应 $\text{dp}$ 也为 $0$ 。</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>

    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">')'</span> <span class="ow">and</span> <span class="n">i</span><span class="o">-</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'('</span><span class="p">:</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="n">i</span><span class="o">-</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">2</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>

    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="p">)</span>
</code></pre></div></div>

<p>时间复杂度 $O(n)$ ，空间复杂度 $O(n)$</p>

<p>前面双向扫描也可以叫做两遍扫描，而 DP 方法只需要扫描一遍，时间性能更优。</p>

<h2 id="解stack">解③Stack：</h2>

<p>如果保存开括号的索引位置，那么当遇到闭括号弹出的时候，就可以计算这一对儿括号序列的长度，但有一个问题是<strong>如何计算顶层连续的括号单元？</strong></p>

<p>这里使用了一个简单、但是 Tricky 的方法，保持第一个入栈的开括号前一个字符的位置在栈里，遇到闭括号时弹出开括号，当遇到失配的闭括号时，就弹出这个位置，如果栈为空，那就把当前位置入栈，如果下一个字符不是开括号就继续弹出并压入新的失配闭括号，直到遇到新的开括号，开启新的括号单元的序列。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># 保存两个信息，记录连续信息
</span>    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">'('</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>

            <span class="k">if</span> <span class="n">stack</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<p>时间复杂度 $O(n)$ ，空间复杂度 $O(n)$</p>

<p>单位比较次数更少，时间性能最佳。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>可以对尾部的未完成匹配的部分的第二个字符开始再次应用算法，但这带来的了 $O(n^2)$ 的最坏时间复杂度。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>顺序从右到左，把右括号视为开括号，左括号视为闭括号 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>$s_1$ 至少开头的的那个开括号，从反向看是失配的闭括号，因此反向看尾部一定不存在未完成匹配 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">LeetCode Map</title><link href="/oth/LeetCodeMap.html" rel="alternate" type="text/html" title="LeetCode Map" /><published>2023-07-25T00:00:00+08:00</published><updated>2023-07-25T00:00:00+08:00</updated><id>/oth/LeetCodeMap</id><content type="html" xml:base="/oth/LeetCodeMap.html"><![CDATA[<h2 id="application-themes">Application Themes</h2>

<h3 id="linesweep">LineSweep</h3>

<ul>
  <li><a href="/oth/LeetCode0218.html">0218 - The Skyline Problem</a></li>
  <li><a href="/oth/LeetCode0391.html">0391 - Perfect Rectangle</a></li>
  <li><a href="/oth/LeetCode0850.html">0850 - Rectangle Area II</a></li>
  <li><a href="/oth/LeetCode1851.html">1851 - Minimum Level to Include</a></li>
</ul>

<h3 id="graph">Graph</h3>

<ul>
  <li><a href="/algs/LeetCode0685.html">0685 - Redundant Connection II</a></li>
</ul>

<h3 id="palindrome">Palindrome</h3>

<ul>
  <li><a href="/oth/LeetCode0005.html">0005 - Longest Palindromic Substring</a></li>
  <li><a href="/algs/LeetCode0336.html">0336 - Palindrome Pairs</a></li>
</ul>

<h3 id="words-comparison">Words Comparison</h3>

<ul>
  <li><a href="/algs/LeetCode0336.html">0336 - Palindrome Pairs</a></li>
</ul>

<h3 id="parentheses">Parentheses</h3>

<ul>
  <li><a href="/oth/LeetCode0022.html">0022 - Generate Parentheses</a></li>
  <li><a href="/oth/LeetCode0032.html">0032 - Longest Valid Parentheses</a></li>
</ul>

<h2 id="tech-themes">Tech Themes</h2>

<h3 id="dp">DP</h3>

<ul>
  <li><a href="/oth/LeetCode0005.html">0005 - Longest Palindromic Substring</a></li>
  <li><a href="/oth/LeetCode0010.html">0010 - Regular Expression Matching</a></li>
  <li><a href="/oth/LeetCode0032.html">0032 - Longest Valid Parentheses</a></li>
</ul>

<h3 id="monotonic-stack">Monotonic Stack</h3>

<ul>
  <li><a href="/oth/LeetCode0042.html">0042 - Trapping Rain Water</a></li>
</ul>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[Application Themes]]></summary></entry><entry><title type="html">0022 - Generate Parentheses</title><link href="/oth/LeetCode0022.html" rel="alternate" type="text/html" title="0022 - Generate Parentheses" /><published>2023-07-24T00:00:00+08:00</published><updated>2023-07-24T00:00:00+08:00</updated><id>/oth/LeetCode0022</id><content type="html" xml:base="/oth/LeetCode0022.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/generate-parentheses/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.9/0022_gen_paren/py0022">源代码</a></p>

<p>额，测试用例就是题目限制的 $8$ 个。</p>

<h2 id="解直接构造">解①直接构造：</h2>

<p>直接构造所有可能的字符串，从空串开始逐个增加字符，<code class="language-plaintext highlighter-rouge">(</code> 和 <code class="language-plaintext highlighter-rouge">)</code>  ，直到字符串长度达到 $2n$ 。</p>

<ul>
  <li>左括号可以随意增加，只要总数不超过 $n$</li>
  <li>右括号必须匹配一个左括号，不能随意增加，它的数量不能超过当前左括号的数量</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">open</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">close</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span><span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="k">if</span> <span class="n">close</span> <span class="o">==</span> <span class="nb">open</span><span class="p">:</span>
            <span class="n">build</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="s">'('</span><span class="p">,</span> <span class="nb">open</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">close</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">open</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
            <span class="n">build</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="s">')'</span><span class="p">,</span> <span class="nb">open</span><span class="p">,</span> <span class="n">close</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">build</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="s">'('</span><span class="p">,</span> <span class="nb">open</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">close</span><span class="p">)</span>
            <span class="n">build</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="s">')'</span><span class="p">,</span> <span class="nb">open</span><span class="p">,</span> <span class="n">close</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">build</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<p>思路是本题最佳实现，$45$ ms ，虽然没有 beats 100% ，但和最快的例子没有区别</p>

<h2 id="解树级构造">解②树级构造：</h2>

<p>本题有一个 DP 的标签，从一开始考虑得是如果利用之前的构造进行构造。</p>

<p>发现了这样一个办法：每个可能的串都由并列的几个括号单元组成，比如 <code class="language-plaintext highlighter-rouge">(()())(())</code> 就有两个括号单元 <code class="language-plaintext highlighter-rouge">(()())</code> 和 <code class="language-plaintext highlighter-rouge">(())</code> ，长度为 $n$ 的括号组合可以由长度为 $n-1$ 的括号组合按照每一个括号单元外面镶嵌一层括号，每两个括号单元外镶嵌括号，… ，每 $n$ 个括号单元外镶嵌括号，以及不镶嵌括号，增加一个新的并列括号单元。</p>

<p>不过这种构造方法会构造出重复的情况，而且没法儿简单判断，最佳方法还是放入 <code class="language-plaintext highlighter-rouge">set</code> 里过滤一遍。</p>

<h3 id="数据结构">数据结构：</h3>

<p>考虑下括号单元的表示形式，最简单地是 <code class="language-plaintext highlighter-rouge">Leaf()</code> ，表示最基本的 <code class="language-plaintext highlighter-rouge">()</code>，直接使用单例模式（singleton）表示，而括号单元列表的括号嵌套就是 <code class="language-plaintext highlighter-rouge">Branch</code> ，为了用哈希集合过滤重复元素，特别定义了 <code class="language-plaintext highlighter-rouge">Branch</code> 的哈希方法 <code class="language-plaintext highlighter-rouge">__hash__</code> 和正确处理哈希冲突需要的判等方法 <code class="language-plaintext highlighter-rouge">__eq__</code> 。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Leaf</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">2</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">'()'</span>


<span class="k">class</span> <span class="nc">Branch</span><span class="p">:</span> <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Branch</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">children</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Leaf</span> <span class="o">|</span> <span class="n">Branch</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">children</span> <span class="o">=</span> <span class="n">children</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">repr</span> <span class="o">=</span> <span class="s">'({})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
            <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nb">repr</span><span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">children</span><span class="p">])</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">hash</span> <span class="o">=</span> <span class="nb">hash</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="nb">repr</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="nb">repr</span>

    <span class="k">def</span> <span class="nf">__hash__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="nb">hash</span>

    <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">:</span> <span class="nb">object</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">==</span> <span class="nb">repr</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>


<span class="n">leaf</span> <span class="o">=</span> <span class="n">Leaf</span><span class="p">()</span>
<span class="n">parens</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{(</span><span class="n">leaf</span><span class="p">,)},</span> <span class="c1"># {()}
</span>    <span class="p">{(</span><span class="n">Branch</span><span class="p">([</span><span class="n">leaf</span><span class="p">]),),</span> <span class="p">(</span><span class="n">leaf</span><span class="p">,</span> <span class="n">leaf</span><span class="p">)}</span>  <span class="c1"># {(()), ()()}
</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="计算过程">计算过程：</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">parens</span><span class="p">),</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">parens</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">gen_paren_comb</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)))</span>

    <span class="k">return</span> <span class="p">[</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nb">repr</span><span class="p">(</span><span class="n">part</span><span class="p">)</span> <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">parts</span><span class="p">])</span> <span class="k">for</span> <span class="n">parts</span> <span class="ow">in</span> <span class="n">parens</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>


<span class="k">def</span> <span class="nf">gen_paren_comb</span><span class="p">(</span><span class="n">prev_i</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">parts</span> <span class="ow">in</span> <span class="n">parens</span><span class="p">[</span><span class="n">prev_i</span><span class="p">]:</span>
        <span class="c1"># nested on each parens units: 1~n
</span>        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span><span class="o">-</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">yield</span> <span class="n">parts</span><span class="p">[:</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">Branch</span><span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">j</span><span class="o">+</span><span class="n">k</span><span class="p">]),)</span> <span class="o">+</span> <span class="n">parts</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">k</span><span class="p">:]</span>

    <span class="k">yield</span> <span class="p">(</span><span class="n">leaf</span><span class="p">,)</span> <span class="o">*</span> <span class="p">(</span><span class="n">prev_i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>在本题情况下不如直接递归地构造，运行时间 $59$ ms 。</p>

<h2 id="注解">注解</h2>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">0010 - Regular Expression Matching</title><link href="/oth/LeetCode0010.html" rel="alternate" type="text/html" title="0010 - Regular Expression Matching" /><published>2023-07-21T00:00:00+08:00</published><updated>2023-07-21T00:00:00+08:00</updated><id>/oth/LeetCode0010</id><content type="html" xml:base="/oth/LeetCode0010.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/regular-expression-matching/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.8/0010_regular_expr_matching/rs0010">源代码</a></p>

<p>这道题令人有些五味杂陈，说它是一道不好的题有它不好的理由，说它是一道好的题有好的理由，它好还是不好可能取决于你做题的流程。</p>

<p>不好的说，这道题并不是那种抽象得非常干净的题目，它更像是现实中的问题，有开放式的解决方法，可能涉及多方面知识，主要时间需要用在考虑核心算法无关的处理细节。作为那种习惯性地先成功提交，然后才回去看解析和答案的人来说这种题是非常煎熬的而且花费时间的，除非你已经很熟悉了这个套路<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<p>好的说，如果你实现就清楚这个套路，做过类似的题目，那么标准答案至少在形式上也是很简洁的<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></p>

<p>另外，当看到文本串与模式串的长度都不超过 $20$ 的条件时，就可以想到，不管这道题的本意如何，标准解法是什么，几乎一定存在一种自然解法，性能不劣于标准解法。<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup></p>

<p><strong>Tips：</strong></p>

<p>题目保证了 <code class="language-plaintext highlighter-rouge">*</code> 字符前面一定会有一个合法的字符，否则我们还需要检查下模式串的合法性。</p>

<h2 id="解固定串匹配">解①固定串匹配：</h2>

<p><strong>基于固定串匹配的自然解法</strong></p>

<p>这是我的自然解法，考虑得并不是标准解法里的字符匹配的模型<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>，而是考虑模式匹配或者子串匹配的思路，这也应该是初学者自然的思路。</p>

<p><strong>模式串</strong>里有两种模式匹配，一种是长度固定的串，就是所有普通字符加上 <code class="language-plaintext highlighter-rouge">.</code> 符号，匹配这种长度固定的串是很容易的，可以用如下的方法：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[inline]</span>
<span class="k">fn</span> <span class="nf">match_pat</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">],</span> <span class="n">pat</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">s</span><span class="nf">.len</span><span class="p">()</span> <span class="o">==</span> <span class="n">pat</span><span class="nf">.len</span><span class="p">()</span>
        <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="nf">.iter</span><span class="p">()</span>
            <span class="nf">.zip</span><span class="p">(</span><span class="n">pat</span><span class="nf">.iter</span><span class="p">())</span>
            <span class="nf">.all</span><span class="p">(|(</span><span class="o">&amp;</span><span class="n">c1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c2</span><span class="p">)|</span> <span class="n">c2</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">||</span> <span class="n">c2</span> <span class="o">==</span> <span class="n">c1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>另一种是长度不定的串，就是后面带 <code class="language-plaintext highlighter-rouge">*</code> 字符的双字符串，像 <code class="language-plaintext highlighter-rouge">.*</code> ,  <code class="language-plaintext highlighter-rouge">a*</code> 等等，长度不定的串的匹配是问题的难度所在，或者也是时间复杂度飙升的地方。</p>

<p>于是我们的思路就很清楚，首先匹配掉固定串，然后再用回溯剪枝的方法检查不定串。</p>

<p>给定文本串 <code class="language-plaintext highlighter-rouge">s: String</code> 和模式串 <code class="language-plaintext highlighter-rouge">p: String</code></p>

<h3 id="step-1搜索不定串">Step-1：搜索不定串</h3>

<p><strong>在模式串上搜索所有不定串的位置</strong></p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">p_bytes</span> <span class="o">=</span> <span class="n">p</span><span class="nf">.as_bytes</span><span class="p">();</span>
<span class="k">let</span> <span class="n">s_bytes</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.as_bytes</span><span class="p">();</span>

<span class="k">let</span> <span class="n">random_pats</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">p</span>
	<span class="nf">.match_indices</span><span class="p">(</span><span class="sc">'*'</span><span class="p">)</span>
	<span class="nf">.map</span><span class="p">(|(</span><span class="n">i</span><span class="p">,</span> <span class="n">_</span><span class="p">)|</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
	<span class="nf">.collect</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="step-2划分固定串">Step-2：划分固定串</h3>

<p><strong>划分出模式串中中间的固定串</strong></p>

<p>我们真正关心得应该是夹在不定串之间的那些固定串，因为模式串两端的固定串是可以简单匹配确定的<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup></p>

<p>在搜索固定串的位置之前，需要先检查所有其他的情况：有零个不定串或者一个不定串</p>

<h4 id="零个不定串">零个不定串：</h4>

<p>最简单的情况，直接使用固定串的匹配方法即可。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">random_pats</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">match_pat</span><span class="p">(</span><span class="n">s_bytes</span><span class="p">,</span> <span class="n">p_bytes</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="一个不定串">一个不定串：</h4>

<p>这种情况下，需要做两端固定串的匹配，然后比较文本串两端中间的部分是否匹配这个唯一地不定串。</p>

<p>在做两端固定串的匹配时，首先要检查长度是否匹配，来防止计算头尾固定串时发生算术溢出问题。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// s_bytes head i inclusive</span>
<span class="k">let</span> <span class="n">head</span> <span class="o">=</span> <span class="n">random_pats</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="k">let</span> <span class="n">tail_slice</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">random_pats</span><span class="nf">.last</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">()</span><span class="nf">.clone</span><span class="p">()</span> <span class="o">+</span> <span class="mi">2</span><span class="o">..</span><span class="p">];</span>

<span class="k">if</span> <span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">random_pats</span><span class="nf">.len</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// s_bytes tail i exclusive</span>
<span class="k">let</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="o">-</span> <span class="n">tail_slice</span><span class="nf">.len</span><span class="p">();</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">head</code> 表示头部固定串的长度，也是其余部分的起始位置，<code class="language-plaintext highlighter-rouge">tail</code> 表示尾部固定串的起始位置，因此 <code class="language-plaintext highlighter-rouge">s_bytes[head..tail]</code> 才是我们真正要做模式匹配的地方。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">!</span><span class="nf">match_pat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="o">..</span><span class="n">head</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">p_bytes</span><span class="p">[</span><span class="o">..</span><span class="n">head</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">if</span> <span class="o">!</span><span class="nf">match_pat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="n">tail</span><span class="o">..</span><span class="p">],</span> <span class="n">tail_slice</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* ONE '*' */</span>

<span class="k">if</span> <span class="n">random_pats</span><span class="nf">.len</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">random_pats</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>

    <span class="k">return</span> <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
        <span class="k">true</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">s_bytes</span><span class="p">[</span><span class="n">head</span><span class="o">..</span><span class="n">tail</span><span class="p">]</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.all</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">x</span><span class="p">|</span> <span class="n">x</span> <span class="o">==</span> <span class="n">c</span><span class="p">)</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="至少两个不定串">至少两个不定串：</h4>

<p>固定串划分就是：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">fixed_pats</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">]</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">random_pats</span>
    <span class="nf">.iter</span><span class="p">()</span>
    <span class="nf">.skip</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">.scan</span><span class="p">(</span><span class="n">random_pats</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="p">|</span><span class="n">last_i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">|</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">slice</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">p_bytes</span><span class="p">[</span><span class="o">*</span><span class="n">last_i</span><span class="o">..</span><span class="n">i</span><span class="p">];</span>
        <span class="o">*</span><span class="n">last_i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
        <span class="nf">Some</span><span class="p">(</span><span class="n">slice</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nf">.collect</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="step-3搜索固定串">Step-3：搜索固定串</h3>

<p><strong>在文本串上预搜索所有固定串的位置</strong></p>

<p>比起在文本匹配时动态地搜索每个固定串的位置，不如预先地搜索完所有固定串可能在文本串上出现的位置。</p>

<p>这里还有一个限制，可以用来减少可能性地空间，就是固定串的先后顺序和它们自身的长度，不过在此之前需要先确保整个文本串的空余长度足以容纳所有固定串：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">fixed_pats_tot</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="n">fixed_pats</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.map</span><span class="p">(|</span><span class="n">s</span><span class="p">|</span> <span class="n">s</span><span class="nf">.len</span><span class="p">())</span><span class="nf">.sum</span><span class="p">();</span>

<span class="k">if</span> <span class="n">fixed_pats_tot</span> <span class="o">&gt;</span> <span class="n">tail</span> <span class="o">-</span> <span class="n">head</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>用一个嵌套的数组 <code class="language-plaintext highlighter-rouge">fixed_pats_pos</code> 来依次保存每个固定串的可能在文本串上的可能位置<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup><sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup>，如果发现有个固定串没有合适的位置，那就可以提前返回失败了：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">start</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">end</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="n">tail</span> <span class="o">-</span> <span class="n">fixed_pats_tot</span><span class="p">;</span>

<span class="k">let</span> <span class="k">mut</span> <span class="n">fixed_pats_pos</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

<span class="k">for</span> <span class="n">pat</span> <span class="k">in</span> <span class="n">fixed_pats</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">pos</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span><span class="o">..=</span><span class="n">end</span><span class="p">)</span>
    	<span class="nf">.filter</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">j</span><span class="p">|</span> <span class="nf">match_pat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="n">j</span><span class="o">..</span><span class="n">j</span> <span class="o">+</span> <span class="n">pat</span><span class="nf">.len</span><span class="p">()],</span> <span class="n">pat</span><span class="p">))</span>
    	<span class="nf">.collect</span><span class="p">();</span>

    <span class="k">if</span> <span class="n">pos</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">fixed_pats_pos</span><span class="nf">.push</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>

    <span class="n">start</span> <span class="o">+=</span> <span class="n">pat</span><span class="nf">.len</span><span class="p">();</span>
    <span class="n">end</span> <span class="o">+=</span> <span class="n">pat</span><span class="nf">.len</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里使用了简单地匹配搜索，因为模式和文本都非常地短，如果是其他的情况在串上地多模式搜索，就有 AC 自动机，或者简单高效地 Sunday 算法。</p>

<h3 id="step-4回溯剪枝">Step-4：回溯剪枝</h3>

<p>一般来说回溯剪枝比较简洁的实现形式是递归，不过我习惯性地写非递归的版本，它在 Debug 的时候看得更清楚。</p>

<p>根据不定模式与文本的匹配情况，确定一个对应固定模式的起始范围，遍历这个起始范围，分别收集固定模式的可能位置，然后来到下一级。</p>

<p>让我们澄清一下这个比较方法：首先是前面的不定串，然后是后面的固定串，这样不定串与它后面的固定串两两划分，直到最后一个不定串，对应得是尾部的固定串。</p>

<p>这样一直到尾部的固定串都匹配时，就匹配成功，否则返回上一级，选取下一个可能位置，如果上一级为空，就继续向上返回。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">search_stack</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="nd">vec!</span><span class="p">[</span><span class="n">head</span><span class="p">]];</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">lv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">loop</span> <span class="p">{</span>
    <span class="c1">// check fail condition</span>
    <span class="k">while</span> <span class="n">search_stack</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">search_stack</span><span class="nf">.pop</span><span class="p">();</span>

        <span class="k">if</span> <span class="n">search_stack</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">lv</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="n">search_stack</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.pop</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">random_pats</span><span class="p">[</span><span class="n">lv</span><span class="p">]];</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">scale</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
        <span class="k">for</span> <span class="o">&amp;</span><span class="n">s_c</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span><span class="o">..</span><span class="p">]</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">s_c</span> <span class="o">!=</span> <span class="n">c</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">scale</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">scale</span> <span class="o">=</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// big enough</span>
    <span class="p">}</span>

    <span class="c1">// check succeed condition</span>
    <span class="k">if</span> <span class="n">lv</span> <span class="o">==</span> <span class="n">fixed_pats_pos</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">tail</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">+</span> <span class="n">scale</span> <span class="o">&gt;=</span> <span class="n">tail</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">pos</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">fixed_pats_pos</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span>
        <span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.filter</span><span class="p">(|</span><span class="o">&amp;&amp;</span><span class="n">j</span><span class="p">|</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">scale</span><span class="p">)</span>
        <span class="nf">.map</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">j</span><span class="p">|</span> <span class="n">j</span> <span class="o">+</span> <span class="n">fixed_pats</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.len</span><span class="p">())</span>
        <span class="nf">.collect</span><span class="p">();</span>

        <span class="k">if</span> <span class="o">!</span><span class="n">pos</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">search_stack</span><span class="nf">.push</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
            <span class="n">lv</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>至此为止就是原始版本的匹配算法，它的运行时间在 273 ms (beats 10.49%)，可以通过，但还不够好，可以通过一点点改进显著地提高性能。</p>

<h3 id="step-5记录失败">Step-5：记录失败</h3>

<p>可以直观地发现，有大量可以简单避免的无效匹配，如果某级从某个位置开始的后面所有可能匹配都失败了，那么下次再有从这一级的该位置开始的搜索就可以直接跳过。</p>

<p>可以直接用一个全局数组<sup id="fnref:9" role="doc-noteref"><a href="#fn:9" class="footnote" rel="footnote">9</a></sup>记录失败情况，并用栈追踪级别和位置，以在全局数组上更新：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">MAX_S_LEN</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="k">const</span> <span class="n">MAX_LV</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="n">MAX_S_LEN</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

<span class="k">static</span> <span class="k">mut</span> <span class="n">FAILED</span><span class="p">:</span> <span class="p">[</span><span class="nb">bool</span><span class="p">;</span> <span class="n">MAX_LV</span> <span class="o">*</span> <span class="n">MAX_S_LEN</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_LV</span> <span class="o">*</span> <span class="n">MAX_S_LEN</span><span class="p">];</span>

<span class="c1">// ...</span>

<span class="c1">// i, scale</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">bak_range</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</code></pre></div></div>

<p>修改后的回溯版本：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">search_stack</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="nd">vec!</span><span class="p">[</span><span class="n">head</span><span class="p">]];</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">lv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="c1">// i, scale</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">bak_range</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>

<span class="k">unsafe</span> <span class="p">{</span> <span class="n">FAILED</span><span class="nf">.fill</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">};</span>

<span class="k">loop</span> <span class="p">{</span>
    <span class="c1">// check fail condition</span>
    <span class="k">while</span> <span class="n">search_stack</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">search_stack</span><span class="nf">.pop</span><span class="p">();</span>

        <span class="k">if</span> <span class="n">search_stack</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">lv</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">let</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">scale</span><span class="p">)</span> <span class="o">=</span> <span class="n">bak_range</span><span class="nf">.pop</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span>

        <span class="k">let</span> <span class="n">base</span> <span class="o">=</span> <span class="n">lv</span><span class="o">*</span><span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
        <span class="k">unsafe</span> <span class="p">{</span> <span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">FAILED</span><span class="p">[</span><span class="n">base</span><span class="o">..=</span><span class="n">base</span><span class="o">+</span><span class="n">scale</span><span class="p">])</span><span class="nf">.fill</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="n">search_stack</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.pop</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span>

    <span class="k">if</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="n">FAILED</span><span class="p">[</span><span class="n">lv</span><span class="o">*</span><span class="n">MAX_S_LEN</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="p">}</span> <span class="p">{</span>
        <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">random_pats</span><span class="p">[</span><span class="n">lv</span><span class="p">]];</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">scale</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
        <span class="k">for</span> <span class="o">&amp;</span><span class="n">s_c</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span><span class="o">..</span><span class="p">]</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">s_c</span> <span class="o">!=</span> <span class="n">c</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">scale</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">scale</span> <span class="o">=</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// big enough</span>
    <span class="p">}</span>

    <span class="c1">// check succeed condition</span>
    <span class="k">if</span> <span class="n">lv</span> <span class="o">==</span> <span class="n">fixed_pats_pos</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">tail</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">+</span> <span class="n">scale</span> <span class="o">&gt;=</span> <span class="n">tail</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">pos</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">fixed_pats_pos</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span>
        <span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.filter</span><span class="p">(|</span><span class="o">&amp;&amp;</span><span class="n">j</span><span class="p">|</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">scale</span><span class="p">)</span>
        <span class="nf">.map</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">j</span><span class="p">|</span> <span class="n">j</span> <span class="o">+</span> <span class="n">fixed_pats</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.len</span><span class="p">())</span>
        <span class="nf">.collect</span><span class="p">();</span>

        <span class="k">if</span> <span class="o">!</span><span class="n">pos</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">search_stack</span><span class="nf">.push</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
            <span class="n">bak_range</span><span class="nf">.push</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">scale</span><span class="p">));</span>
            <span class="n">lv</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>如果不计预先搜索固定串的开销<sup id="fnref:10" role="doc-noteref"><a href="#fn:10" class="footnote" rel="footnote">10</a></sup>，那么有失败记录的实现的时间复杂度就是 $O(nm)$ ，与标准实现的一样。</p>

<p>它的运行时间稳定在 $0$ ms，还要优于简单形式的标准实现。</p>

<h2 id="解dp">解②DP：</h2>

<p>标准实现，不细究地话形式还是很简洁的。</p>

<p>把文本串与模式串逐字符比较，模式串中的不定串前面的字符当做普通字符处理，后面的星号才当做不定串特别处理。</p>

<p>分别用 $i$ 和 $j$ 表示文本串和模式串的匹配的前缀，二维地布尔数组 $\texttt{dp}[i][j]$ 表示 $s[0..i-1]$ 和 $p[0..j-1]$ 是否匹配。</p>

<p>当 $s[i-1] \neq *$ 时，如果 $\texttt{dp}[i-1][j-1]$ 匹配，并且 $s[i-1] = p[i-1]$ ，那么 $\texttt{dp}[i][j]$ 就是匹配的；</p>

<p>当$s[i-1] = *$ 时：</p>

<ul>
  <li>假设这个不定串匹配了零次，此时 $\texttt{dp}[i][j]=\texttt{dp}[i][j-2]$；</li>
  <li>假设这个不定串至少匹配了一次，此时 $\texttt{dp}[i][j]=\texttt{dp}[i-1][j] \land s[i-1] = p[i-2]$</li>
</ul>

<p>最后匹配了整个文本串和模式串的 $i$， $j$ 的 $\texttt{dp}[i][j]$ 就是需要的匹配结果。</p>

<p>另外需要考虑的一点是状态数组的初始状态：</p>

<ul>
  <li>当两个串都是空串时，状态是匹配的；</li>
  <li>当其中一个串为空，另一个不为空时，应该是不匹配的，除了一个特殊情况；</li>
  <li>特殊情况是，当文本串为空，模式串不为空，但全都是不定串时，比如 <code class="language-plaintext highlighter-rouge">a*b*.*</code> 时，也是匹配的</li>
</ul>

<h3 id="基本实现">基本实现</h3>

<p>假如用文本串作为外循环：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">dp</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="nd">vec!</span><span class="p">[</span><span class="kc">false</span><span class="p">;</span> <span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()];</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()]</span>

<span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="k">as</span> <span class="n">_</span> <span class="p">{</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> 
            <span class="p">||</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nd">char_match!</span><span class="p">(</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">],</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span>
            <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nd">char_match!</span><span class="p">(</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ...</span>

<span class="nd">macro_rules!</span> <span class="n">char_match</span> <span class="p">{</span>
    <span class="p">(</span><span class="nv">$p:expr</span><span class="p">,</span> <span class="nv">$s:expr</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="p">(</span><span class="nv">$p</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="n">_</span> <span class="p">||</span> <span class="nv">$p</span> <span class="o">==</span> <span class="nv">$s</span><span class="p">)</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这是形式上最简洁的实现，但运行时间稳定在 $2$ ms，明显不如上面的自然实现，而 $O(nm)$ 的空间复杂度虽然在本题上可以忽略不计，但也有进一步优化的可能。</p>

<h3 id="外分组实现">外分组实现</h3>

<p>像上面一样在内循环里做模式串的字符检查： <code class="language-plaintext highlighter-rouge">p_bytes[j-1]</code> 是否为 <code class="language-plaintext highlighter-rouge">*</code> 符号的检查，以及 <code class="language-plaintext highlighter-rouge">p_bytes[j-2]</code> 和 <code class="language-plaintext highlighter-rouge">p_bytes[j-2]</code> 是否为 <code class="language-plaintext highlighter-rouge">.</code> 符号的检查，主要是为了代码简洁，其实不太合适，应当放到外循环里，而从实际测试看，这两者也是有可观地性能差距。</p>

<p>把模式串的字符检查放在外循环也就是把模式串作为主迭代，使用 $\texttt{dp}[j][i]$，在这种情况下观察 $\texttt{dp}$ 数组的使用，可以发现实际上每轮都只会使用最近三行的数据：$\texttt{dp}[j][..]$ , $\texttt{dp}[j-1][i]$ ,  $\texttt{dp}[j-2][i]$ ，于是我们可以只用三个数组保存数据，每次循环结束就依次交换。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve_time_saving</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">p_bytes</span> <span class="o">=</span> <span class="n">p</span><span class="nf">.as_bytes</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">s_bytes</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.as_bytes</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">pre2</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">pre1</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">cur</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>

    <span class="n">pre1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
            <span class="c1">// The valid pattern has guaranteed that j &gt;= 2</span>
            <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
                <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                    <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">||</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cur</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                    <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                        <span class="p">||</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span>
                            <span class="o">&amp;&amp;</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
                            <span class="o">&amp;&amp;</span> <span class="n">cur</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
            <span class="n">cur</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre1</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">cur</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">pre1</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nn">std</span><span class="p">::</span><span class="nn">mem</span><span class="p">::</span><span class="nf">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">pre2</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">pre1</span><span class="p">);</span>
        <span class="nn">std</span><span class="p">::</span><span class="nn">mem</span><span class="p">::</span><span class="nf">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">pre1</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">cur</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">pre1</span><span class="p">[</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>注意最后 <code class="language-plaintext highlighter-rouge">pre1</code> 代表得才是 <code class="language-plaintext highlighter-rouge">cur</code> 。</p>

<p>本实现的运行时间稳定在 $0$ ms ，堪比前面自然实现。</p>

<h3 id="最省内存实现">最省内存实现</h3>

<p>如果仍然将文本串作为外循环的实现，$\texttt{dp}[i][j]$ 数组可以进一步压缩，因为此时只会使用三种数据： $\texttt{dp}[i-1][j-1]$ , $\texttt{dp}[i-1][j]$ ,  $\texttt{dp}[i][j-2]$ ，也就是本行的数据以及上一行本列和上一行前一列的数据。</p>

<p>因此只需要在迭代时复用一行的数据，某个位置数据在计算新的之前，保存的就是上一行的数据，可以用两个变量动态保存需要的上一行本列 $\texttt{dp}[i-1][j]$ ，和上一行前一列 $\texttt{dp}[i-1][j-1]$ 。</p>

<p>不过因此初始状态 $\texttt{dp}[0]$ 需要分情况处理，第一行的初始状态是 $1$ ，而其余行的初始位置是 $0$ 。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">mut</span> <span class="n">DP</span><span class="p">:</span> <span class="p">[</span><span class="nb">bool</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>

<span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve_mem_saving</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">unsafe</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">p_bytes</span> <span class="o">=</span> <span class="n">p</span><span class="nf">.as_bytes</span><span class="p">();</span>
        <span class="k">let</span> <span class="n">s_bytes</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.as_bytes</span><span class="p">();</span>

        <span class="n">DP</span><span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span><span class="nf">.fill</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
        <span class="n">DP</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="k">as</span> <span class="n">_</span> <span class="p">{</span>
                <span class="n">DP</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">DP</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// ..i</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">pre_1</span> <span class="o">=</span> <span class="n">DP</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="n">DP</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">let</span> <span class="n">pre_0</span> <span class="o">=</span> <span class="n">DP</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>

                <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="k">as</span> <span class="n">_</span> <span class="p">{</span>
                    <span class="n">DP</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">DP</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span>
                        <span class="p">||</span> <span class="n">pre_0</span>
                            <span class="o">&amp;&amp;</span> <span class="nd">char_match!</span><span class="p">(</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">],</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="p">{</span>
                    <span class="n">DP</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span>
                        <span class="n">pre_1</span> <span class="o">&amp;&amp;</span> <span class="nd">char_match!</span><span class="p">(</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
                <span class="p">}</span>

                <span class="n">pre_1</span> <span class="o">=</span> <span class="n">pre_0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">DP</span><span class="p">[</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>由于本质上与基本实现一致，运行时间也是 $2$ ms 。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>或者用一个该题目下某用户的留言– “脑子充满了 DP” <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>这道题有 10k 的支持，但也有 1k 的反对 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>只有一种可能你会做得很利落，那就是你之前根本就做过类似的，这能称得上是好的题目吗？ <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>这就更把人引到沟里去了，因为自然解法考虑的细节就更多了 <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>因为事先我并不熟悉这个套路，应该说套路记得我，但我不记得它 <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>不存在可以认为是空串的情况 <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>显然它的长度比之前保存不定串位置的数组 <code class="language-plaintext highlighter-rouge">random_pats</code> 少 $1$ <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>它至少应该在上一个固定串的后面，并且保证后面有足够的空间放置其他的固定串 <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:9" role="doc-endnote">
      <p>可以在多个测试用例里共享使用 <a href="#fnref:9" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:10" role="doc-endnote">
      <p>这个开销显然很小 <a href="#fnref:10" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">0336 - Palindrome Pairs</title><link href="/algs/LeetCode0336.html" rel="alternate" type="text/html" title="0336 - Palindrome Pairs" /><published>2023-07-12T00:00:00+08:00</published><updated>2023-07-12T00:00:00+08:00</updated><id>/algs/LeetCode0336</id><content type="html" xml:base="/algs/LeetCode0336.html"><![CDATA[<p><em>通常为了分类页面的干净，不将LeetCode题解的文章放到算法分类里，但这一篇实在精彩，涉及了其他算法没有介绍过的，关于大量子串比较的通解性思路</em></p>

<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/palindrome-pairs/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.7/0335_palindrome_pairs">源代码</a></p>

<p>有必要特别强调下这道题的数据特点：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">1 &lt;= words.length &lt;= 5000</code></li>
  <li><code class="language-plaintext highlighter-rouge">0 &lt;= words[i].length &lt;= 300</code></li>
  <li><code class="language-plaintext highlighter-rouge">words[i]</code> consists of lowercase English letters.</li>
</ul>

<p>如果单从题目名字出发，认为这是一个核心在于用更低时间复杂度寻找回文串的问题，那就是从根本上搞错了方向。</p>

<p>把单词数记为 $n$ ，单词长度记为 $k$ ：</p>

<ol>
  <li>这里情况是 $n$ 比 $k$ 高一个数量级，性能瓶颈首先在于单词数而不是单词长度；</li>
  <li>在 300 这个长度上，$O(k^2)$ 的简单算法通常远远好于时间复杂度为 $O(k)$ 的那些复杂算法</li>
</ol>

<p>而这个问题实际上，如果是每个单词两两比较，那么无论如何都会 TLE（Time Limit Exceed），必须寻找一种能降低单词数的时间复杂度的方法。</p>

<p>这也就引出了本文介绍的大量子串比较的通解性思路。</p>

<p><strong>Tips:</strong></p>

<ul>
  <li>给出的每个单词都是独特的；</li>
  <li>在答案里排除标号相同，也就是单词自身就是回文的情况</li>
</ul>

<h2 id="解-trie">解① Trie：</h2>

<p>当提到多个子串的比较时，我们就可以想到前缀树（Trie）这种思路<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>，我们用它保存每个单词的后缀<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<p>如果作为前缀的单词长度 $\geqslant$ 作为后缀的单词长度：</p>

<p>在单词后缀的最后一个字母上标记单词的索引，表示这是一个单词的结束，此时应该检查前缀单词的其余部分是否为空或者是一个回文串。</p>

<p>否则：</p>

<p>在把单词加入到 Trie 的时候，后缀每向前一位，就要检查下剩余部分是否构成一个回文串，如果是的话，就把这个单词的索引储存在到该位置节点里。</p>

<p>节点的结构如下：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">PostfixTrieNode</span> <span class="p">{</span>
    <span class="n">is_word</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">rest_palindromes</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">children</span><span class="p">:</span> <span class="p">[</span><span class="nb">Option</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">;</span> <span class="mi">26</span><span class="p">],</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">PostfixTrie</span> <span class="p">{</span>
    <span class="n">nodes</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">PostfixTrieNode</span><span class="o">&gt;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">is_word</code> 是当前缀单词长度较长或相等时，表示有一个后缀单词结束了，保存该后缀单词的索引；</li>
  <li><code class="language-plaintext highlighter-rouge">rest_palindromes</code> 是当前缀单词较短，表示当前缀单词结束后，后缀的其余部分仍然构成回文的那些单词的索引；</li>
  <li><code class="language-plaintext highlighter-rouge">children</code> 保存 Trie 下一级节点（的索引），保存索引而不是节点本身，是为了规避 Rust 严格的数据所有权检查</li>
</ul>

<p>树的创建和节点的创建：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">PostfixTrie</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span>
            <span class="n">nodes</span><span class="p">:</span> <span class="nd">vec!</span><span class="p">[</span><span class="nn">PostfixTrieNode</span><span class="p">::</span><span class="nf">new</span><span class="p">()],</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">push_child</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">node_i</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="nf">.len</span><span class="p">();</span>

        <span class="k">self</span><span class="py">.nodes</span><span class="nf">.push</span><span class="p">(</span><span class="nn">PostfixTrieNode</span><span class="p">::</span><span class="nf">new</span><span class="p">());</span>
        <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">p</span><span class="p">]</span><span class="py">.children</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span><span class="n">node_i</span><span class="p">);</span>

        <span class="n">node_i</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">PostfixTrieNode</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span>
            <span class="n">is_word</span><span class="p">:</span> <span class="nb">None</span><span class="p">,</span>
            <span class="n">rest_palindromes</span><span class="p">:</span> <span class="nd">vec!</span><span class="p">[],</span>
            <span class="n">children</span><span class="p">:</span> <span class="p">[</span><span class="nb">None</span><span class="p">;</span> <span class="mi">26</span><span class="p">],</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>根节点就是索引为 $0$ 的节点。</p>

<p><strong>加入一个单词：</strong></p>

<p>对于一个长度为 $k$ 的单词来讲，需要考虑从没有匹配到匹配到最后一个字符，一共 $k$ 种情况，其中没有匹配针对的前缀是空串的情况。最后在最后一个字符的 Trie 节点上打上单词结束的标记。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">PostfixTrie</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">add_word</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">word_i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">root</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="o">..=</span><span class="n">word</span><span class="nf">.len</span><span class="p">())</span><span class="nf">.rev</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nf">is_palindrome</span><span class="p">(</span><span class="o">&amp;</span><span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.rest_palindromes</span><span class="nf">.push</span><span class="p">(</span><span class="n">word_i</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">let</span> <span class="n">idx</span> <span class="o">=</span> <span class="nf">rank</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>

            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.children</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="p">{</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">root</span> <span class="o">=</span> <span class="k">self</span><span class="nf">.push_child</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">idx</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.is_word</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span><span class="n">word_i</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>搜索匹配</strong></p>

<p>搜索匹配的时候，稍微复杂一些，必须跟踪匹配的情况，如果前缀单词遍历完后没有发生失配，就需要检查此时是否也是后缀单词的一个结束（也就是前后缀长度相等的情况）并且把可能的后缀单词中没结束并且剩余部分是回文加入答案。</p>

<p>追踪匹配，在循环外单独处理有一个好处，就是适用于前缀是空串的情况。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">PostfixTrie</span> <span class="p">{</span>    
	<span class="k">fn</span> <span class="nf">search_palindrome</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">word_i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">pairs</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

        <span class="k">let</span> <span class="k">mut</span> <span class="n">root</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">matched</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">word</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.is_word</span> <span class="p">{</span>
                <span class="k">if</span> <span class="nf">is_palindrome</span><span class="p">(</span><span class="o">&amp;</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">pairs</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">word_i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">let</span> <span class="n">idx</span> <span class="o">=</span> <span class="nf">rank</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.children</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="p">{</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">matched</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="n">matched</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.is_word</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="n">word_i</span> <span class="p">{</span>
                    <span class="n">pairs</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">word_i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="n">pairs</span><span class="nf">.extend</span><span class="p">(</span><span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span>
                <span class="py">.rest_palindromes</span>
                <span class="nf">.iter</span><span class="p">()</span>
                <span class="nf">.cloned</span><span class="p">()</span>
                <span class="nf">.map</span><span class="p">(|</span><span class="n">j</span><span class="p">|</span> <span class="nd">vec!</span><span class="p">[</span><span class="n">word_i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">])</span>
            <span class="p">);</span>
        <span class="p">}</span>

        <span class="n">pairs</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>完整过程：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">words</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">trie</span> <span class="o">=</span> <span class="nn">PostfixTrie</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">trie</span><span class="nf">.add_word</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="nf">.as_bytes</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">ans</span><span class="nf">.extend</span><span class="p">(</span><span class="n">trie</span><span class="nf">.search_palindrome</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="nf">.as_bytes</span><span class="p">()));</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>总结：</strong></p>

<p>总地来说 Trie 也并不能特别地节省内存，总长度为 $n$ 的串存储到 Trie 上也仍然需要 $O(n)$ 的时间复杂度，唯一明显好处是可以缩短单词地匹配范围，把单词比较次数从原来的 $O(n^2)$ 降低为 $O(n)$ 。</p>

<p>对于本题，Rust Trie 实现大概是 276 ms / 373 MB 的水平<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">3</a></sup>。</p>

<p>这个级别的内存消耗显然过分了，特别是对于 Rust 而言，按照以往经验，一个好的 Rust 题解的内存消耗应该在 10 MB 以内，几百 MB 的消耗与其他语言相比也非常糟糕；</p>

<p>时间性能勉强还算可以，我知道 C++ 的题解里的最好地有 200+ ms ，而 Java 的题解最好地可以达到 100+ ms<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">4</a></sup> ，相较之下，这个表现显然还不够好。</p>

<h2 id="解-长度基数">解② 长度基数：</h2>

<p>这个思路非常类似于基数排序，它成立的关键是单词的长度非常有限，如果能事先哈希所有的单词，然后遍历每个单词的时候根据它的长度范围，构造后缀，在哈希表上查找符合后缀的单词。</p>

<p>对于每个单词检查所有长度不超过它的单词，在做回文对判断时，必须要有较长的那一个单词的信息，然后才能根据它的后缀，检查可能的较短的那个词是否存在，不管它们哪一个在前，哪一个在后。</p>

<p><strong>时间优化：</strong></p>

<p>可以事先统计所有单词的长度，排除掉实际上不存在的长度可能。</p>

<p><strong>空间节省：</strong></p>

<p>在做单词哈希的时候，并不保存单词的反串儿，而是原串的分片，而在查询的时候动态创建反串，这利用了回文的对称性质，哈希表上保存的分片只是原串的引用，不必因此创建新的字符串，而搜索时创建的反串又是一次性的，我们可以非常有把握地认为优化会这个反串分配的空间会被重新利用。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">words</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">words_map</span> <span class="o">=</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">len_maps</span> <span class="o">=</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="nn">BTreeSet</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">words_map</span><span class="nf">.insert</span><span class="p">(</span><span class="n">word</span><span class="nf">.as_bytes</span><span class="p">(),</span> <span class="n">i</span><span class="p">);</span>
        <span class="n">len_maps</span><span class="nf">.insert</span><span class="p">(</span><span class="n">word</span><span class="nf">.len</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">lens</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">len_maps</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.collect</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="nf">.as_bytes</span><span class="p">();</span>

        <span class="k">let</span> <span class="n">rev_word</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">word</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">()</span><span class="py">.collect</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">u8</span><span class="o">&gt;&gt;</span><span class="p">();</span>
        <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">word</span><span class="nf">.len</span><span class="p">();</span>

        <span class="k">for</span> <span class="o">&amp;</span><span class="n">k</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">lens</span><span class="p">[</span><span class="o">..</span><span class="n">lens</span><span class="nf">.binary_search</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">()]</span> <span class="p">{</span>
            <span class="c1">// word is prefix</span>
            <span class="c1">// word[0..k] =R= rev_word[0..k]</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">words_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rev_word</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">if</span> <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">word</span><span class="p">[</span><span class="n">k</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="c1">// word is postfix</span>
            <span class="c1">// word[n-k..] =&gt; rev_word[n-k..]</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">words_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rev_word</span><span class="p">[</span><span class="o">..</span><span class="n">k</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">if</span> <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">word</span><span class="p">[</span><span class="o">..</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">i</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">words_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rev_word</span><span class="p">[</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">word</span> <span class="o">&gt;</span> <span class="n">rev_word</span> <span class="p">{</span>
                <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">i</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>


<span class="cd">/// Quickest method on len(word) &lt;= 300</span>
<span class="nd">#[inline]</span>
<span class="k">fn</span> <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">s</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.eq</span><span class="p">(</span><span class="n">s</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>总结：</strong></p>

<p>单词长度的统计和排序是 $O(n\text{log}n)$ ，对于本题，$\text{log}n$ 相当于一个非常小的常数，因此这段开销可以忽略不计，而相比于 Trie 解，不需要检查每个串的所有后缀是否是回文，而只检查部分后缀（存在该长度的串），并且有更好的局部性，因此提高了性能。</p>

<p>性能表现：107 ms / 6.6 MB 。</p>

<p>运行时间比 Trie 快了一倍，但也只是和 Java 的最好情况打平，只能说差强人意，不过内存的占用控制在 10 MB 以内，还是令人非常满意的。</p>

<h2 id="解-串排序">解③ 串排序：</h2>

<p>有什么能比长度基数的比较更快的方法吗？</p>

<p>在前面基数长度的题解中，仍然是有无谓地单词比较，最好的办法是能只比较确定有共同回文部分的串。</p>

<p>这个方法的思路并没有出现在热门题解中，是我从 Python 的最佳提交中看来的，非常简单，而且具有通用性，在很多其他问题上也有这样的处理思路。</p>

<p>如果把所有单词的正串和反串放在一起排序，那么按照字符串比较的字典序<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>，会有如下几个关键性质：</p>

<ol>
  <li>
    <p>有最长公共前缀的字符串会紧挨在一起，而且短的在前，长的在后，不管它们是正串还是反串，这都不影响回文的判断；</p>
  </li>
  <li>
    <p>如果存在构成回文对的一对单词的正反串，那么其中的短串一定是长串的前缀，而且两个串的正反性是不同的；</p>
  </li>
  <li>
    <p>反之从某个串 $s_i$ 的位置 $i$ 向后检查，如果发现了一个前缀不包含 $s_i$ 的串 $s_j$ ，那显然 $s_j$ 以及之后的串肯定不与 $s_i$ 构成回文对</p>
  </li>
</ol>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">words</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">words_and_revs</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">words</span><span class="nf">.len</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">forward</span> <span class="o">=</span> <span class="n">word</span><span class="nf">.into_bytes</span><span class="p">();</span>
        <span class="k">let</span> <span class="n">backward</span> <span class="o">=</span> <span class="n">forward</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">()</span><span class="nf">.collect</span><span class="p">();</span>

        <span class="n">words_and_revs</span><span class="nf">.push</span><span class="p">((</span><span class="n">forward</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="n">i</span> <span class="k">as</span> <span class="nb">i32</span><span class="p">));</span>
        <span class="n">words_and_revs</span><span class="nf">.push</span><span class="p">((</span><span class="n">backward</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="n">i</span> <span class="k">as</span> <span class="nb">i32</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="n">words_and_revs</span><span class="nf">.sort_unstable</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">short</span><span class="p">,</span> <span class="n">short_is_forward</span><span class="p">,</span> <span class="n">short_i</span><span class="p">))</span> <span class="k">in</span>
        <span class="n">words_and_revs</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">long</span><span class="p">,</span> <span class="n">long_is_forward</span><span class="p">,</span> <span class="n">long_i</span><span class="p">)</span> <span class="k">in</span> <span class="n">words_and_revs</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">..</span><span class="p">]</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">short_is_forward</span> <span class="o">==</span> <span class="n">long_is_forward</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="n">long</span><span class="nf">.starts_with</span><span class="p">(</span><span class="o">&amp;</span><span class="n">short</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">long_i</span> <span class="o">!=</span> <span class="n">short_i</span> <span class="o">&amp;&amp;</span> <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">long</span><span class="p">[</span><span class="n">short</span><span class="nf">.len</span><span class="p">()</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="o">*</span><span class="n">long_is_forward</span> <span class="p">{</span>
                        <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="o">*</span><span class="n">long_i</span><span class="p">,</span> <span class="o">*</span><span class="n">short_i</span><span class="p">]);</span>
                    <span class="p">}</span>
                    <span class="k">else</span> <span class="p">{</span>
                        <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="o">*</span><span class="n">short_i</span><span class="p">,</span> <span class="o">*</span><span class="n">long_i</span><span class="p">]);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>总结：</strong></p>

<p>排序的方法省掉了所有不必要的串的比较，只检查每个前后缀对称的单词对儿一次回文，局部性也不错，拥有理论和实际的最佳时间性能，唯一难受的点在于数据读取的方向是固定的，没有高效的从后向前读的方法，这使得我们不得不实际上为每一个反串创建一份正向的版本，这增加了一些内存的开销。</p>

<p>性能表现：61 ms / 7.7 MB</p>

<p>没什么好说的，就是双优地时、空表现。</p>

<h3 id="串排序内存节省版本">串排序（内存节省版本）</h3>

<p>接下来我们带着做实验的心态，尝试用无实体数据的方法表示反串，从而节省内存。</p>

<p>静态类型语言要求严格地向量是单态的，因此对于正串和反串，都需要同一类型的包装，需要实现它们的比较方法：</p>

<p>显然由于反串的存在，它们的比较方法只能逐个字节进行，这不影响时间复杂度，但很可能极大地影响实际的性能。</p>

<p>这里使用堆上地动态 Trait 对象来统一正串和反串创建的两种不同的迭代器。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[derive(PartialEq,</span> <span class="nd">Eq)]</span>
<span class="k">struct</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="n">raw</span><span class="p">:</span> <span class="o">&amp;</span><span class="nv">'a</span> <span class="p">[</span><span class="nb">u8</span><span class="p">],</span>
    <span class="n">dir</span><span class="p">:</span> <span class="nb">bool</span>
<span class="p">}</span>

<span class="k">impl</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">raw</span><span class="p">:</span> <span class="o">&amp;</span><span class="nv">'a</span> <span class="p">[</span><span class="nb">u8</span><span class="p">],</span> <span class="n">is_forward</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span> <span class="n">raw</span><span class="p">,</span> <span class="n">dir</span><span class="p">:</span> <span class="n">is_forward</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="nd">#[inline]</span>
    <span class="k">fn</span> <span class="nf">len</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
        <span class="k">self</span><span class="py">.raw</span><span class="nf">.len</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">iter</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">'a</span> <span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Box</span><span class="o">&lt;</span><span class="k">dyn</span> <span class="nb">Iterator</span><span class="o">&lt;</span><span class="n">Item</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nb">u8</span><span class="o">&gt;</span> <span class="o">+</span> <span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">self</span><span class="py">.dir</span> <span class="p">{</span>
            <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="k">self</span><span class="py">.raw</span><span class="nf">.iter</span><span class="p">())</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">i</span> <span class="o">=</span> <span class="k">self</span><span class="py">.raw</span><span class="nf">.len</span><span class="p">();</span>

            <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="nn">std</span><span class="p">::</span><span class="nn">iter</span><span class="p">::</span><span class="nf">from_fn</span><span class="p">(</span><span class="k">move</span> <span class="p">||</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
                    <span class="nb">None</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="p">{</span>
                    <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
                    <span class="nf">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="py">.raw</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="p">}</span>
            <span class="p">}))</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="nb">PartialOrd</span> <span class="k">for</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">partial_cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">other</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nn">std</span><span class="p">::</span><span class="nn">cmp</span><span class="p">::</span><span class="n">Ordering</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">self</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.partial_cmp</span><span class="p">(</span><span class="n">other</span><span class="nf">.iter</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">impl</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="nb">Ord</span> <span class="k">for</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">other</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nn">std</span><span class="p">::</span><span class="nn">cmp</span><span class="p">::</span><span class="n">Ordering</span> <span class="p">{</span>
        <span class="k">self</span><span class="nf">.partial_cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">other</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>同时由于不存在实际的串结构，那么 <code class="language-plaintext highlighter-rouge">startswith</code> 和余部回文检测的方法也要改写：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>    
	<span class="k">fn</span> <span class="nf">starts_with</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">other</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">it</span> <span class="o">=</span> <span class="k">self</span><span class="nf">.iter</span><span class="p">();</span>

        <span class="k">for</span> <span class="n">e</span> <span class="k">in</span> <span class="n">other</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">pe</span><span class="p">)</span> <span class="o">=</span> <span class="n">it</span><span class="nf">.next</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">e</span> <span class="o">!=</span> <span class="n">pe</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">false</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">true</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">rem_is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">skipped</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">self</span><span class="py">.dir</span> <span class="p">{</span>
            <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="py">.raw</span><span class="p">[</span><span class="n">skipped</span><span class="o">..</span><span class="p">])</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="py">.raw</span><span class="p">[</span><span class="o">..</span><span class="k">self</span><span class="nf">.len</span><span class="p">()</span><span class="o">-</span><span class="n">skipped</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>主过程方法：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">words</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">words_and_revs</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">words</span><span class="nf">.len</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">words_and_revs</span><span class="nf">.push</span><span class="p">((</span><span class="nn">Slice</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">word</span><span class="nf">.as_bytes</span><span class="p">(),</span> <span class="k">true</span><span class="p">),</span> <span class="n">i</span> <span class="k">as</span> <span class="nb">i32</span><span class="p">));</span>
        <span class="n">words_and_revs</span><span class="nf">.push</span><span class="p">((</span><span class="nn">Slice</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">word</span><span class="nf">.as_bytes</span><span class="p">(),</span> <span class="k">false</span><span class="p">),</span> <span class="n">i</span> <span class="k">as</span> <span class="nb">i32</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="n">words_and_revs</span><span class="nf">.sort_unstable</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">short</span><span class="p">,</span> <span class="n">short_i</span><span class="p">))</span> <span class="k">in</span>
        <span class="n">words_and_revs</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">long</span><span class="p">,</span>  <span class="n">long_i</span><span class="p">)</span> <span class="k">in</span> <span class="n">words_and_revs</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">short</span><span class="py">.dir</span> <span class="o">==</span> <span class="n">long</span><span class="py">.dir</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="n">long</span><span class="nf">.starts_with</span><span class="p">(</span><span class="o">&amp;</span><span class="n">short</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">long_i</span> <span class="o">!=</span> <span class="n">short_i</span> <span class="o">&amp;&amp;</span> <span class="n">long</span><span class="nf">.rem_is_palindrome_or_empty</span><span class="p">(</span><span class="n">short</span><span class="nf">.len</span><span class="p">())</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="n">long</span><span class="py">.dir</span> <span class="p">{</span>
                        <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="o">*</span><span class="n">long_i</span><span class="p">,</span> <span class="o">*</span><span class="n">short_i</span><span class="p">]);</span>
                    <span class="p">}</span>
                    <span class="k">else</span> <span class="p">{</span>
                        <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="o">*</span><span class="n">short_i</span><span class="p">,</span> <span class="o">*</span><span class="n">long_i</span><span class="p">]);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>总结：</strong></p>

<p>运行性能：323 ms / 5.8 MB</p>

<p>动态地逐字节比较确实非常慢，但确实省到了内存，至少内存上可以说 beats 100% 。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>很多批量查询地算法都使用了这种结构，比如基于KMP 前缀数组和 Trie 的 AC 自动机（AC Automaton） <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>或者每个单词串的反串儿的前缀 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>有一种看起来会节省内存的调整是把节点上为孩子预先分配的数组结构换成哈希表，但这不改变结构的本质上，毕竟哈希表的基础也是数组，只是时间与空间的平衡因子不同，实际测试结果也支持了这样的判断：换成哈希表后消耗的空间减半，但运行时间加倍 <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>很符合我对 C++ 的一贯想象，值得一提的是 LeetCode 平台使用得还是 clang ，如果是 gnu g++ 那局面更不敢想象了 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>线性结构的比较默认采用字典序，它可以这样理解：从首元素开始两两比较，直到发现不同元素或者两个串都耗尽，较短的那一个串后面补空，相当于是权值最小的元素。但是有时候有些领域为了它们的某些方便，会判断较短的串一定比较长的串要小，但这种比较方法不能称之为字典序 <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;algs&quot;]" /><summary type="html"><![CDATA[通常为了分类页面的干净，不将LeetCode题解的文章放到算法分类里，但这一篇实在精彩，涉及了其他算法没有介绍过的，关于大量子串比较的通解性思路]]></summary></entry><entry><title type="html">0005 - Longest Palindromic Substring</title><link href="/oth/LeetCode0005.html" rel="alternate" type="text/html" title="0005 - Longest Palindromic Substring" /><published>2023-07-05T00:00:00+08:00</published><updated>2023-07-05T00:00:00+08:00</updated><id>/oth/LeetCode0005</id><content type="html" xml:base="/oth/LeetCode0005.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/longest-palindromic-substring/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p>选取最长的回文子串，如果有多个，任选一个即可。参考<a href="/algs/StringPalindrome.html">专门的回文章节</a>，这里只列出 Python 实现。</p>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.5/0005_longest_palindromic_substr/py0005">源代码</a></p>

<h2 id="解朴素实现">解①朴素实现：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""O(n^2) 448ms, beats 92.33%"""</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="c1"># Odd symmetric
</span>
    <span class="n">ans_odd_r</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">ans_odd_i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">max_len</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>

        <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_len</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">l</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">l</span><span class="p">]:</span>
                <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">break</span>

        <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">ans_odd_r</span><span class="p">:</span>
            <span class="n">ans_odd_r</span> <span class="o">=</span> <span class="n">r</span>
            <span class="n">ans_odd_i</span> <span class="o">=</span> <span class="n">i</span>

    <span class="c1"># Even symmetric
</span>
    <span class="n">ans_even_r</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">ans_even_i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">max_len</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>

        <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_len</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span><span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">l</span><span class="p">]:</span>
                <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">break</span>

        <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">ans_even_r</span><span class="p">:</span>
            <span class="n">ans_even_r</span> <span class="o">=</span> <span class="n">r</span>
            <span class="n">ans_even_i</span> <span class="o">=</span> <span class="n">i</span>

    <span class="k">if</span> <span class="n">ans_odd_r</span> <span class="o">&gt;=</span> <span class="n">ans_even_r</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">ans_odd_i</span> <span class="o">-</span> <span class="n">ans_odd_r</span> <span class="p">:</span> <span class="n">ans_odd_i</span> <span class="o">+</span> <span class="n">ans_odd_r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">ans_even_i</span> <span class="o">-</span> <span class="p">(</span><span class="n">ans_even_r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">:</span> <span class="n">ans_even_i</span> <span class="o">+</span> <span class="n">ans_even_r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>

</code></pre></div></div>

<h2 id="解串哈希">解②串哈希：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">""" O(nlogn) 1072ms beats 42.67% """</span>

<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">log2</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="n">forward_hash</span> <span class="o">=</span> <span class="n">PrefixHash</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">backward_hash</span> <span class="o">=</span> <span class="n">PrefixHash</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">s</span><span class="p">)))</span>

    <span class="c1"># Odd
</span>
    <span class="n">odd_r</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">odd_i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">max_r</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">max_r</span> <span class="o">&lt;=</span> <span class="n">odd_r</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="n">acc_r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">log2</span><span class="p">(</span><span class="n">max_r</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)):</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">acc_r</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">**</span> <span class="n">k</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">max_r</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="k">if</span> <span class="n">forward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">backward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">acc_r</span> <span class="o">=</span> <span class="n">r</span>

        <span class="k">if</span> <span class="n">acc_r</span> <span class="o">&gt;</span> <span class="n">odd_r</span><span class="p">:</span>
            <span class="n">odd_r</span> <span class="o">=</span> <span class="n">acc_r</span>
            <span class="n">odd_i</span> <span class="o">=</span> <span class="n">i</span>

    <span class="c1"># Even
</span>
    <span class="n">even_r</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">even_i</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">max_r</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">max_r</span> <span class="o">&lt;=</span> <span class="n">even_r</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="n">acc_r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">log2</span><span class="p">(</span><span class="n">max_r</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)):</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">acc_r</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">**</span> <span class="n">k</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">max_r</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="k">if</span> <span class="n">forward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">backward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">acc_r</span> <span class="o">=</span> <span class="n">r</span>

        <span class="k">if</span> <span class="n">acc_r</span> <span class="o">&gt;</span> <span class="n">even_r</span><span class="p">:</span>
            <span class="n">even_r</span> <span class="o">=</span> <span class="n">acc_r</span>
            <span class="n">even_i</span> <span class="o">=</span> <span class="n">i</span>

    <span class="k">if</span> <span class="n">even_r</span> <span class="o">&gt;=</span> <span class="n">odd_r</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">even_i</span> <span class="o">-</span> <span class="n">even_r</span> <span class="p">:</span> <span class="n">even_i</span><span class="o">+</span><span class="n">even_r</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">odd_i</span> <span class="o">-</span> <span class="n">odd_r</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span> <span class="n">odd_i</span><span class="o">+</span><span class="n">odd_r</span><span class="p">]</span>


<span class="c1"># 对于只数字和英文字符, p=79
</span>
<span class="n">P</span> <span class="o">=</span> <span class="mi">79</span>
<span class="n">M</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">**</span> <span class="mi">9</span>
<span class="n">N</span> <span class="o">=</span> <span class="mi">1000</span>  <span class="c1"># Max String Length
</span>
<span class="n">NPOWS</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
    <span class="n">NPOWS</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">NPOWS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">P</span> <span class="o">%</span> <span class="n">M</span>

<span class="c1"># it's nosense both considering correctness and performance
# def rank(c: str):
#     if '0' &lt;= 'c' &lt;= '9':
#         return ord(c) - ord('0') + 1
#     elif 'A' &lt;= 'c' &lt;= 'Z':
#         return ord(c) - ord('A') + 10 + 1
#     else:
#         return ord(c) - ord('a') + 26 + 10 + 1
</span>
<span class="k">class</span> <span class="nc">PrefixHash</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">prefix</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">build_prefix</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">prefix</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">build_prefix</span><span class="p">(</span><span class="n">l</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">P</span> <span class="o">%</span> <span class="n">M</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="o">%</span> <span class="n">M</span>

    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s">""" [l, r] """</span>

        <span class="n">a</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">prefix</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
        <span class="n">b</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">prefix</span><span class="p">[</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">NPOWS</span><span class="p">[</span><span class="n">r</span><span class="o">-</span><span class="p">(</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="o">%</span> <span class="n">M</span> <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>

        <span class="k">return</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">M</span> <span class="o">-</span> <span class="n">b</span><span class="p">)</span> <span class="o">%</span> <span class="n">M</span>

</code></pre></div></div>

<h2 id="解哈希dp">解③哈希DP：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">""" O(n) 251ms beats 95.4% """</span>

<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="n">forward_hash</span> <span class="o">=</span> <span class="n">PrefixHash</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">backward_hash</span> <span class="o">=</span> <span class="n">PrefixHash</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">s</span><span class="p">)))</span>

    <span class="n">max_d</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">max_i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="n">prev_d</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">prev_d</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">forward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="p">(</span><span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="n">backward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="p">(</span><span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="p">)):</span>
                <span class="n">prev_d</span> <span class="o">=</span> <span class="n">d</span>
                <span class="k">break</span>

        <span class="k">if</span> <span class="n">prev_d</span> <span class="o">&gt;</span> <span class="n">max_d</span><span class="p">:</span>
            <span class="n">max_d</span> <span class="o">=</span> <span class="n">prev_d</span>
            <span class="n">max_i</span> <span class="o">=</span> <span class="n">i</span>


    <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">max_i</span><span class="o">-</span><span class="p">(</span><span class="n">max_d</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span> <span class="n">max_i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="解manacher">解④manacher：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">""" O(n) 99ms, beats 98.74% """</span>

<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">d1</span> <span class="o">=</span> <span class="n">compute_d1</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">d2</span> <span class="o">=</span> <span class="n">compute_d2</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="p">(</span><span class="n">odd_i</span><span class="p">,</span> <span class="n">odd_r</span><span class="p">)</span> <span class="o">=</span> <span class="n">map_d</span><span class="p">(</span><span class="n">d1</span><span class="p">)</span>
    <span class="p">(</span><span class="n">even_i</span><span class="p">,</span> <span class="n">even_r</span><span class="p">)</span> <span class="o">=</span> <span class="n">map_d</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">even_r</span> <span class="o">&gt;=</span> <span class="n">odd_r</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">even_i</span><span class="o">-</span><span class="n">even_r</span> <span class="p">:</span> <span class="n">even_i</span><span class="o">+</span><span class="n">even_r</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">odd_i</span><span class="o">-</span><span class="n">odd_r</span><span class="o">+</span><span class="mi">1</span> <span class="p">:</span> <span class="n">odd_i</span><span class="o">+</span><span class="n">odd_r</span><span class="p">]</span>


<span class="n">map_d</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">l</span><span class="p">:</span> <span class="nb">max</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">l</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">compute_d1</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="s">""" return (i, r) """</span>

    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="n">d1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>

    <span class="n">rl</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># rightmost left
</span>    <span class="n">rr</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># rightmost right
</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rr</span><span class="p">:</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">rr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="n">rl</span>

            <span class="k">if</span> <span class="n">d1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">-</span> <span class="n">rl</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">d1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">d1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">rl</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span>

        <span class="k">while</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">-</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">r</span><span class="p">]:</span>
            <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">rr</span><span class="p">:</span>
            <span class="n">rr</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span>
            <span class="n">rl</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">d1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span>

    <span class="k">return</span> <span class="n">d1</span>


<span class="k">def</span> <span class="nf">compute_d2</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="s">""" return (i, r) """</span>

    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="n">d2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>

    <span class="n">rl</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># rightmost left
</span>    <span class="n">rr</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># rightmost right
</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rr</span><span class="p">:</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">rr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="n">rl</span> <span class="o">+</span> <span class="mi">1</span>

            <span class="k">if</span> <span class="n">d2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">-</span> <span class="n">rl</span><span class="p">:</span>
                <span class="n">d2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">d2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">rl</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">-</span><span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="p">]:</span>
            <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">rr</span><span class="p">:</span>
            <span class="n">rr</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span>
            <span class="n">rl</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="n">r</span>

        <span class="n">d2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span>

    <span class="k">return</span> <span class="n">d2</span>
</code></pre></div></div>

<h2 id="解manacher-union">解⑤manacher union：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">""" O(n) 138ms, beats 96.32%"""</span>

<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span>

    <span class="n">s1</span> <span class="o">=</span> <span class="s">'#'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">d1_1</span> <span class="o">=</span> <span class="n">compute_d1</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>

    <span class="p">(</span><span class="n">odd_i1</span><span class="p">,</span> <span class="n">odd_r1</span><span class="p">)</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span>
        <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">d1_1</span><span class="p">)),</span>
        <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="p">(</span><span class="n">even_i1</span><span class="p">,</span> <span class="n">even_r1</span><span class="p">)</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span>
        <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">d1_1</span><span class="p">)),</span>
        <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="n">odd_i</span> <span class="o">=</span> <span class="n">odd_i1</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">odd_r</span> <span class="o">=</span> <span class="p">(</span><span class="n">odd_r1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>

    <span class="n">even_i</span> <span class="o">=</span> <span class="p">(</span><span class="n">even_i1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">even_r</span> <span class="o">=</span> <span class="n">even_r1</span> <span class="o">//</span> <span class="mi">2</span>

    <span class="k">if</span> <span class="n">even_r</span> <span class="o">&gt;=</span> <span class="n">odd_r</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">even_i</span><span class="o">-</span><span class="n">even_r</span><span class="p">:</span> <span class="n">even_i</span><span class="o">+</span><span class="n">even_r</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">odd_i</span><span class="o">-</span><span class="n">odd_r</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span> <span class="n">odd_i</span><span class="o">+</span><span class="n">odd_r</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="注解">注解</h2>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">回文串基础</title><link href="/algs/StringPalindrome.html" rel="alternate" type="text/html" title="回文串基础" /><published>2023-07-03T00:00:00+08:00</published><updated>2023-07-03T00:00:00+08:00</updated><id>/algs/StringPalindrome</id><content type="html" xml:base="/algs/StringPalindrome.html"><![CDATA[<h2 id="前言">前言</h2>

<p>讨论回文串的相关基础问题以及收集寻找本质不同回文串或最长回文串的各种算法。</p>

<h2 id="概念基础">概念基础</h2>

<p>回文串（Palindrome），就是一个符号序列，它正着读和反着读都是相同的。</p>

<p>也就是说回文串总是对称的，奇数长度的回文串在中间的字母上对称，而偶数长度的回文串在两个字母的空儿上对称。</p>

<p>对称是回文最主要的性质，求解过程通常都要分奇数轴和偶数轴分别讨论。</p>

<h2 id="本质不同回文串">本质不同回文串</h2>

<p>它的一个子问题是，寻找最长回文串。</p>

<h3 id="朴素算法">朴素算法</h3>

<p>以考虑模式串上的每个位置作为对称轴，对两边的字符进行比对，分奇数轴和偶数轴两种情况。</p>

<p>时间复杂度为 $O(n)$ 。</p>

<h4 id="rust-实现">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// O(n^2) -&gt; (Odd, Even)</span>
<span class="cd">///</span>
<span class="cd">/// for odd length palindrome: "aba", r=2</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="nf">find_sub_palindromes_brute_force</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="c1">// Odd Symmetry</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">d1</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">matched_r</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">);</span>

        <span class="k">for</span> <span class="n">r</span> <span class="k">in</span> <span class="mi">2</span><span class="o">..=</span><span class="n">matched_r</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">!=</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="p">{</span>
                <span class="n">matched_r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">d1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">matched_r</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Even Symmetry</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">d2</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">matched_r</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">);</span>

        <span class="k">for</span> <span class="n">r</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">matched_r</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">r</span><span class="p">]</span> <span class="o">!=</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">r</span><span class="p">]</span> <span class="p">{</span>
                <span class="n">matched_r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">d2</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">matched_r</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="串哈希算法">串哈希算法</h3>

<p>如果只考虑求取最长回文串，可以使用<a href="/algs/StringHash.html">串哈希</a>的方法<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">1</a></sup>，分别预处理正向的串的哈希和反向串的哈希，实现 $O(1)$ 复杂度的回文串检查，这样对于模式串上的每个位置采用<a href="/algs/BinaryLifting.html">二进制提升（Binary Lifting）</a>的方法，测试出每个位置上的<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>最长回文串，当然这需要分奇数轴和偶数轴分别求解。</p>

<p>注意当检查子串 $s[i..i+d-1]$ 是否是回文时：</p>

<ol>
  <li>
    <p>正向的串当然是查询 $i..i+d$  ；</p>
  </li>
  <li>
    <p>反向串，查询的则是 $n-(i+d)..n-i$</p>
  </li>
</ol>

<p>二进制提升的基础是：</p>

<ol>
  <li>对奇数对称的回文，如果有一个半径 $r &gt; 0$ 的回文存在，那么同一个对称轴上必然有一个半径为 $r-1$ 的奇数回文；</li>
  <li>对偶数对称的回文，如果有一个半径 $r &gt; 1$ 的回文存在，那么同一个对称轴上必然有一个半径为 $r-1$ 的偶数回；</li>
  <li>以上两个定义显然都是递归的</li>
</ol>

<p>因此假定对每个对称轴上都有一个最大的回文半径，在它范围内的也都是回文，这有有了做二进制提升的条件，这个最大回文半径就是目标，只要仍然构成一个合法回文就是没超过，否则就是超过。</p>

<h4 id="rust-实现-1">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// O(nlogn)</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="n">find_longest_palindromes_hash_native</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">N</span><span class="p">:</span> <span class="nb">usize</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
    <span class="n">alphabet</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">dyn</span> <span class="n">AlphaBet</span><span class="p">,</span>
    <span class="n">npows</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[[</span><span class="nb">u64</span><span class="p">;</span> <span class="n">N</span><span class="p">]],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">usize</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="n">alphabet</span><span class="nf">.prime</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">char_ranks</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

    <span class="k">for</span> <span class="n">c</span> <span class="k">in</span> <span class="n">chars</span> <span class="p">{</span>
        <span class="n">char_ranks</span><span class="nf">.push</span><span class="p">(</span><span class="n">alphabet</span><span class="nf">.rank</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">forward_hash</span> <span class="o">=</span>
        <span class="nn">PrefixRollingHash</span><span class="p">::</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">char_ranks</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">(),</span> <span class="n">p</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">backward_hash</span> <span class="o">=</span>
        <span class="nn">PrefixRollingHash</span><span class="p">::</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">char_ranks</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">(),</span> <span class="n">p</span><span class="p">);</span>

    <span class="c1">// Odd Symmetry</span>

    <span class="k">let</span> <span class="n">max_odd_r</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">odd_r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">odd_i</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">if</span> <span class="n">max_odd_r</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span><span class="o">..=</span><span class="n">max_odd_r</span><span class="nf">.ilog2</span><span class="p">())</span><span class="nf">.rev</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">odd_r</span> <span class="o">+</span> <span class="mi">2_usize</span><span class="nf">.pow</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">max_odd_r</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">let</span> <span class="n">d</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">found</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="n">d</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">{</span>
                <span class="k">let</span> <span class="n">h1</span> <span class="o">=</span> <span class="n">forward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">i</span><span class="o">..</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>
                <span class="k">let</span> <span class="n">h2</span> <span class="o">=</span> <span class="n">backward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">)</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>

                <span class="k">if</span> <span class="n">h1</span> <span class="o">==</span> <span class="n">h2</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="o">!</span><span class="n">found</span> <span class="p">{</span>
                        <span class="n">found</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
                        <span class="n">odd_r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
                        <span class="n">odd_i</span><span class="nf">.clear</span><span class="p">();</span>
                    <span class="p">}</span>

                    <span class="n">odd_i</span><span class="nf">.push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Even Symmetry</span>

    <span class="k">let</span> <span class="n">max_even_r</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">even_r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">even_i</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">if</span> <span class="n">max_even_r</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span><span class="o">..=</span><span class="n">max_even_r</span><span class="nf">.ilog2</span><span class="p">())</span><span class="nf">.rev</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">even_r</span> <span class="o">+</span> <span class="mi">2_usize</span><span class="nf">.pow</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">max_even_r</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">let</span> <span class="n">d</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">found</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="n">d</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">{</span>
                <span class="k">let</span> <span class="n">h1</span> <span class="o">=</span> <span class="n">forward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">i</span><span class="o">..</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>
                <span class="k">let</span> <span class="n">h2</span> <span class="o">=</span> <span class="n">backward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">)</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>

                <span class="k">if</span> <span class="n">h1</span> <span class="o">==</span> <span class="n">h2</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="o">!</span><span class="n">found</span> <span class="p">{</span>
                        <span class="n">found</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
                        <span class="n">even_r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
                        <span class="n">even_i</span><span class="nf">.clear</span><span class="p">();</span>
                    <span class="p">}</span>

                    <span class="n">even_i</span><span class="nf">.push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">odd_r</span> <span class="o">&gt;=</span> <span class="n">even_r</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">odd_r</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="n">n</span><span class="p">)</span><span class="nf">.collect</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="p">(</span><span class="n">odd_r</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">odd_i</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="p">(</span><span class="n">even_r</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="n">even_i</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="串哈希-dp">串哈希 DP<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">3</a></sup></h3>

<p>介绍参考<a href="/algs/StringDP.html">串上DP</a>的相关章节</p>

<h4 id="rust-实现-2">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// O(n)</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="n">find_longest_palindromes_hash_dp</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">N</span><span class="p">:</span> <span class="nb">usize</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
    <span class="n">alphabet</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">dyn</span> <span class="n">AlphaBet</span><span class="p">,</span>
    <span class="n">npows</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[[</span><span class="nb">u64</span><span class="p">;</span> <span class="n">N</span><span class="p">]],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">usize</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="n">alphabet</span><span class="nf">.prime</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">char_ranks</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

    <span class="k">for</span> <span class="n">c</span> <span class="k">in</span> <span class="n">chars</span> <span class="p">{</span>
        <span class="n">char_ranks</span><span class="nf">.push</span><span class="p">(</span><span class="n">alphabet</span><span class="nf">.rank</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">forward_hash</span> <span class="o">=</span>
        <span class="nn">PrefixRollingHash</span><span class="p">::</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">char_ranks</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">(),</span> <span class="n">p</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">backward_hash</span> <span class="o">=</span>
        <span class="nn">PrefixRollingHash</span><span class="p">::</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">char_ranks</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">(),</span> <span class="n">p</span><span class="p">);</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>
    <span class="n">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">max_d</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">n</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">d</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="o">..=</span><span class="nf">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span><span class="nf">.rev</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">h1</span> <span class="o">=</span> <span class="n">forward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">d</span><span class="o">..=</span><span class="n">i</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>
            <span class="k">let</span> <span class="n">h2</span> <span class="o">=</span> <span class="n">backward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">d</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>

            <span class="k">if</span> <span class="n">h1</span> <span class="o">==</span> <span class="n">h2</span> <span class="p">{</span>
                <span class="n">max_d</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">max_d</span><span class="p">,</span> <span class="n">d</span><span class="p">);</span>
                <span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">(</span>
        <span class="n">max_d</span><span class="p">,</span>
        <span class="n">r</span><span class="nf">.into_iter</span><span class="p">()</span>
            <span class="nf">.enumerate</span><span class="p">()</span>
            <span class="nf">.filter</span><span class="p">(|(</span><span class="n">_</span><span class="p">,</span> <span class="n">d</span><span class="p">)|</span> <span class="o">*</span><span class="n">d</span> <span class="o">==</span> <span class="n">max_d</span><span class="p">)</span>
            <span class="nf">.map</span><span class="p">(|(</span><span class="n">i</span><span class="p">,</span> <span class="n">_</span><span class="p">)|</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">max_d</span><span class="p">)</span>
            <span class="nf">.collect</span><span class="p">(),</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="manacher-算法">Manacher 算法</h3>

<p>同样介绍参考<a href="/algs/StringDP.html">串上DP</a>的相关章节</p>

<h4 id="rust-实现-3">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// return d1</span>
<span class="k">fn</span> <span class="nf">find_sub_palindromes_manacher_odd</span><span class="p">(</span><span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">d1</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">pl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">pr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">n</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pr</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">j</span> <span class="o">=</span> <span class="n">pl</span> <span class="o">+</span> <span class="n">pr</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span>

            <span class="n">r</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">d1</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">pr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">while</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">-</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
            <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">r</span><span class="p">]</span>
        <span class="p">{</span>
            <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">d1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>

        <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">pr</span> <span class="p">{</span>
            <span class="n">pr</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">pl</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">d1</span>
<span class="p">}</span>

<span class="cd">/// return d2</span>
<span class="k">fn</span> <span class="nf">find_sub_palindromes_manacher_even</span><span class="p">(</span><span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">d2</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span> <span class="c1">// actual value from 1..n-1</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">pl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">pr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">n</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pr</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">j</span> <span class="o">=</span> <span class="n">pl</span> <span class="o">+</span> <span class="n">pr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

            <span class="n">r</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">d2</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">pr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">while</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">-</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span>
            <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
        <span class="p">{</span>
            <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">d2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>

        <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">pr</span> <span class="p">{</span>
            <span class="n">pr</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">pl</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">r</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">d2</span>
<span class="p">}</span>

<span class="k">pub</span> <span class="k">fn</span> <span class="nf">find_sub_palindromes_manacher</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">d1</span> <span class="o">=</span> <span class="nf">find_sub_palindromes_manacher_odd</span><span class="p">(</span><span class="n">chars</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">d2</span> <span class="o">=</span> <span class="nf">find_sub_palindromes_manacher_even</span><span class="p">(</span><span class="n">chars</span><span class="p">);</span>

    <span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="统一实现">统一实现<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup><sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup></h4>

<p>另外有一种借助字符串构造，利用求奇数轴的单个函数求 $d_1$ 和 $d_2$ 的方法。</p>

<p>这种方法可以这么理解，把原字符串 $s$ 的每个空隙都替换成一个固定字母，比如 <code class="language-plaintext highlighter-rouge">'#'</code> ，这样偶数轴的情况就可以由 <code class="language-plaintext highlighter-rouge">'#'</code> 字符为对称轴的奇数轴回文得到。</p>

<p><strong>举例：</strong></p>

<p>对于原串 <code class="language-plaintext highlighter-rouge">s='abaabaa'</code> ，长度 $n=7$ 。</p>

<p>将空隙替换为字符 <code class="language-plaintext highlighter-rouge">'#'</code> 后，得到 <code class="language-plaintext highlighter-rouge">s1='a#b#a#a#b#a#a'</code> 长度变为 $2n-1 = 13$ 。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">VALUE\ID</th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
      <th>10</th>
      <th>11</th>
      <th>12</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">$s$</td>
      <td>a</td>
      <td>b</td>
      <td>a</td>
      <td>a</td>
      <td>b</td>
      <td>a</td>
      <td>a</td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td style="text-align: center">$s’$</td>
      <td>a</td>
      <td>#</td>
      <td>b</td>
      <td>#</td>
      <td>a</td>
      <td>#</td>
      <td>a</td>
      <td>#</td>
      <td>b</td>
      <td>#</td>
      <td>a</td>
      <td>#</td>
      <td>a</td>
    </tr>
    <tr>
      <td style="text-align: center">$d_1’$</td>
      <td>1</td>
      <td>1</td>
      <td>3</td>
      <td>1</td>
      <td>2</td>
      <td>6</td>
      <td>2</td>
      <td>1</td>
      <td>5</td>
      <td>1</td>
      <td>2</td>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <td style="text-align: center">$d_1$</td>
      <td>1</td>
      <td> </td>
      <td>2</td>
      <td> </td>
      <td>1</td>
      <td> </td>
      <td>1</td>
      <td> </td>
      <td>2</td>
      <td> </td>
      <td>1</td>
      <td> </td>
      <td>1</td>
    </tr>
    <tr>
      <td style="text-align: center">$d_2$</td>
      <td>-</td>
      <td>0</td>
      <td> </td>
      <td>0</td>
      <td> </td>
      <td>3</td>
      <td> </td>
      <td>0</td>
      <td> </td>
      <td>0</td>
      <td> </td>
      <td>1</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>我们可以发现 $d_1’$ 与 $d_1$ 、$d_2$ 有这样的对应关系：</p>

<p>$d_1$ 上的字符对应着 $s’$ 上那些本就属于 $s$ 的字符，分别在 $0,\ 2,\ 4,\ \dots,\ 2i$ ，它的值相比于原来，除了作为轴的那个点外，每额外有一个对称的点，也就额外增加一个插入符 <code class="language-plaintext highlighter-rouge">'#'</code> ，因此可以得到：</p>

\[d_1[i] = \lfloor {(d_1'[2i] + 1)}/ {2} \rfloor\]

<p>$d_2$ 上的字符对应着 s’ 上的 <code class="language-plaintext highlighter-rouge">'#'</code> ，表示它本来应该是 $s$ 上的字符的空隙，分别在 $1,\ 3,\ 5,\ \dots,\ 2i-1$ <sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>，而 $s’$ 上的值恰好就应该是原来 $s$ 上的两倍，因此可以得到：</p>

\[d_2[i] = d_1'[2i-1] / 2\]

<h4 id="rust-实现-4">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">find_sub_palindromes_manacher_unify</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">chars2</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="sc">'#'</span><span class="p">;</span> <span class="n">n2</span><span class="p">];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="k">in</span> <span class="n">chars</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">chars2</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">*</span><span class="n">c</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">d21</span> <span class="o">=</span> <span class="nf">find_sub_palindromes_manacher_odd</span><span class="p">(</span><span class="o">&amp;</span><span class="n">chars2</span><span class="p">);</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">d1</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">d2</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">in</span> <span class="n">d21</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="n">d1</span><span class="p">[</span><span class="n">i</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">d2</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="补充为回文串">补充为回文串</h2>

<p>给定一个串，增加一个最小的前缀，使其变为一个回文。</p>

<p><a href="https://leetcode.com/problems/shortest-palindrome/description/">题目</a></p>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.6/0214_shortest_palindrome/py0214">源代码</a></p>

<h3 id="破题">破题</h3>

<p>考虑构建后作为回文的新串与原串的关系，由于要求最小的前缀，那么原串肯定应该至少占据这个回文的右半部分还多一个点，最多占据全部，也就是原串本身就是回文串，这时不需要添加任何前缀。</p>

<p>然后我们可以发现，原串某个前缀因此也应该是一个回文，至少说第一个字符肯定构成长度为 $1$ 的奇数轴回文，此时就是原串占据构造后的回文串部分最少的情况，如果能找到原串属于回文的前缀里最长的那一个，那么显然把那个前缀后面的字符取反后加到前缀上，就能得到一个最小的构造回文。</p>

<h3 id="一般性方法">一般性方法</h3>

<p>可以采用朴素地 $O(n^2)$ 的算法，或者前面介绍的 $O(n)$ 地求取所有本质不同子串的方法，然后寻找同时是前缀的最长回文子串，除此之外这里特别介绍一个利用回文反转相同的性质，通过构造字符串利用 KMP 前缀函数求解的方法。<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup></p>

<h3 id="构造串kmp">构造串+KMP</h3>

<p>回文就是反转后仍然等于原串，那么如果把原串和原串的反转拼接在一起，那么原来是前缀里最长回文的那部分，就会构新串成前后缀相等的情况，长度就是也就是 KMP 前缀数组里 $\pi[n-1]$ 标识的。</p>

<p>有一点需要注意，这里假设得是原串的真前缀是回文，而原串本身不能是回文，否则求解前缀数组的时候就会出现前后缀重叠的情况，可以在构造连接原串和原串的反串时，在中间加一个字母表外的字符，确保不会出现前后缀重叠的情况，比如给定的字母表是小写字母，那就可以加一个 <code class="language-plaintext highlighter-rouge">'#'</code> 。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:3" role="doc-endnote">
      <p>对于朴素串哈希来说，也可以求解本质不同回文串，这里缩小问题是为了方便引出下面的 DP 版串哈希算法 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>以该位置为对称轴 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p>https://oi-wiki.org/string/hash/#%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>https://cp-algorithms.com/string/manacher.html#working-with-parities <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>https://oi-wiki.org/string/manacher/#%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86 <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>注意，按照我们前面的规定， $d_2$ 采取得是插入序，它的有效值是从 $1$ 开始取的 <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>但是这道题的测试数据非常宽松，反而是朴素算法的性能最好 <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;algs&quot;]" /><summary type="html"><![CDATA[前言]]></summary></entry></feed>