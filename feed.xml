<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-07-22T18:28:00+08:00</updated><id>/feed.xml</id><title type="html">MINGHU6’s Blog</title><subtitle>Coding somethings</subtitle><entry><title type="html">0010 - Regular Expression Matching</title><link href="/oth/LeetCode0010.html" rel="alternate" type="text/html" title="0010 - Regular Expression Matching" /><published>2023-07-21T00:00:00+08:00</published><updated>2023-07-21T00:00:00+08:00</updated><id>/oth/LeetCode0010</id><content type="html" xml:base="/oth/LeetCode0010.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/regular-expression-matching/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.8/0010_regular_expr_matching/rs0010">源代码</a></p>

<p>这道题令人有些五味杂陈，说它是一道不好的题有它不好的理由，说它是一道好的题有好的理由，它好还是不好可能取决于你做题的流程。</p>

<p>不好的说，这道题并不是那种抽象得非常干净的题目，它更像是现实中的问题，有开放式的解决方法，可能涉及多方面知识，主要时间需要用在考虑核心算法无关的处理细节。作为那种习惯性地先成功提交，然后才回去看解析和答案的人来说这种题是非常煎熬的而且花费时间的，除非你已经很熟悉了这个套路<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<p>好的说，如果你实现就清楚这个套路，做过类似的题目，那么标准答案至少在形式上也是很简洁的<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></p>

<p>另外，当看到文本串与模式串的长度都不超过 $20$ 的条件时，就可以想到，不管这道题的本意如何，标准解法是什么，几乎一定存在一种自然解法，性能不劣于标准解法。<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup></p>

<p><strong>Tips：</strong></p>

<p>题目保证了 <code class="language-plaintext highlighter-rouge">*</code> 字符前面一定会有一个合法的字符，否则我们还需要检查下模式串的合法性。</p>

<h2 id="解固定串匹配">解①固定串匹配：</h2>

<p><strong>基于固定串匹配的自然解法</strong></p>

<p>这是我的自然解法，考虑得并不是标准解法里的字符匹配的模型<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>，而是考虑模式匹配或者子串匹配的思路，这也应该是初学者自然的思路。</p>

<p><strong>模式串</strong>里有两种模式匹配，一种是长度固定的串，就是所有普通字符加上 <code class="language-plaintext highlighter-rouge">.</code> 符号，匹配这种长度固定的串是很容易的，可以用如下的方法：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[inline]</span>
<span class="k">fn</span> <span class="nf">match_pat</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">],</span> <span class="n">pat</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">s</span><span class="nf">.len</span><span class="p">()</span> <span class="o">==</span> <span class="n">pat</span><span class="nf">.len</span><span class="p">()</span>
        <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="nf">.iter</span><span class="p">()</span>
            <span class="nf">.zip</span><span class="p">(</span><span class="n">pat</span><span class="nf">.iter</span><span class="p">())</span>
            <span class="nf">.all</span><span class="p">(|(</span><span class="o">&amp;</span><span class="n">c1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c2</span><span class="p">)|</span> <span class="n">c2</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">||</span> <span class="n">c2</span> <span class="o">==</span> <span class="n">c1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>另一种是长度不定的串，就是后面带 <code class="language-plaintext highlighter-rouge">*</code> 字符的双字符串，像 <code class="language-plaintext highlighter-rouge">.*</code> ,  <code class="language-plaintext highlighter-rouge">a*</code> 等等，长度不定的串的匹配是问题的难度所在，或者也是时间复杂度飙升的地方。</p>

<p>于是我们的思路就很清楚，首先匹配掉固定串，然后再用回溯剪枝的方法检查不定串。</p>

<p>给定文本串 <code class="language-plaintext highlighter-rouge">s: String</code> 和模式串 <code class="language-plaintext highlighter-rouge">p: String</code></p>

<h3 id="step-1搜索不定串">Step-1：搜索不定串</h3>

<p><strong>在模式串上搜索所有不定串的位置</strong></p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">p_bytes</span> <span class="o">=</span> <span class="n">p</span><span class="nf">.as_bytes</span><span class="p">();</span>
<span class="k">let</span> <span class="n">s_bytes</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.as_bytes</span><span class="p">();</span>

<span class="k">let</span> <span class="n">random_pats</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">p</span>
	<span class="nf">.match_indices</span><span class="p">(</span><span class="sc">'*'</span><span class="p">)</span>
	<span class="nf">.map</span><span class="p">(|(</span><span class="n">i</span><span class="p">,</span> <span class="n">_</span><span class="p">)|</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
	<span class="nf">.collect</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="step-2划分固定串">Step-2：划分固定串</h3>

<p><strong>划分出模式串中中间的固定串</strong></p>

<p>我们真正关心得应该是夹在不定串之间的那些固定串，因为模式串两端的固定串是可以简单匹配确定的<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup></p>

<p>在搜索固定串的位置之前，需要先检查所有其他的情况：有零个不定串或者一个不定串</p>

<h4 id="零个不定串">零个不定串：</h4>

<p>最简单的情况，直接使用固定串的匹配方法即可。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">random_pats</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">match_pat</span><span class="p">(</span><span class="n">s_bytes</span><span class="p">,</span> <span class="n">p_bytes</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="一个不定串">一个不定串：</h4>

<p>这种情况下，需要做两端固定串的匹配，然后比较文本串两端中间的部分是否匹配这个唯一地不定串。</p>

<p>在做两端固定串的匹配时，首先要检查长度是否匹配，来防止计算头尾固定串时发生算术溢出问题。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// s_bytes head i inclusive</span>
<span class="k">let</span> <span class="n">head</span> <span class="o">=</span> <span class="n">random_pats</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="k">let</span> <span class="n">tail_slice</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">random_pats</span><span class="nf">.last</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">()</span><span class="nf">.clone</span><span class="p">()</span> <span class="o">+</span> <span class="mi">2</span><span class="o">..</span><span class="p">];</span>

<span class="k">if</span> <span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">random_pats</span><span class="nf">.len</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// s_bytes tail i exclusive</span>
<span class="k">let</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="o">-</span> <span class="n">tail_slice</span><span class="nf">.len</span><span class="p">();</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">head</code> 表示头部固定串的长度，也是其余部分的起始位置，<code class="language-plaintext highlighter-rouge">tail</code> 表示尾部固定串的起始位置，因此 <code class="language-plaintext highlighter-rouge">s_bytes[head..tail]</code> 才是我们真正要做模式匹配的地方。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">!</span><span class="nf">match_pat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="o">..</span><span class="n">head</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">p_bytes</span><span class="p">[</span><span class="o">..</span><span class="n">head</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">if</span> <span class="o">!</span><span class="nf">match_pat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="n">tail</span><span class="o">..</span><span class="p">],</span> <span class="n">tail_slice</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* ONE '*' */</span>

<span class="k">if</span> <span class="n">random_pats</span><span class="nf">.len</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">random_pats</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>

    <span class="k">return</span> <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
        <span class="k">true</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">s_bytes</span><span class="p">[</span><span class="n">head</span><span class="o">..</span><span class="n">tail</span><span class="p">]</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.all</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">x</span><span class="p">|</span> <span class="n">x</span> <span class="o">==</span> <span class="n">c</span><span class="p">)</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="至少两个不定串">至少两个不定串：</h4>

<p>固定串划分就是：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">fixed_pats</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">]</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">random_pats</span>
    <span class="nf">.iter</span><span class="p">()</span>
    <span class="nf">.skip</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">.scan</span><span class="p">(</span><span class="n">random_pats</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="p">|</span><span class="n">last_i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">|</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">slice</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">p_bytes</span><span class="p">[</span><span class="o">*</span><span class="n">last_i</span><span class="o">..</span><span class="n">i</span><span class="p">];</span>
        <span class="o">*</span><span class="n">last_i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
        <span class="nf">Some</span><span class="p">(</span><span class="n">slice</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nf">.collect</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="step-3搜索固定串">Step-3：搜索固定串</h3>

<p><strong>在文本串上预搜索所有固定串的位置</strong></p>

<p>比起在文本匹配时动态地搜索每个固定串的位置，不如预先地搜索完所有固定串可能在文本串上出现的位置。</p>

<p>这里还有一个限制，可以用来减少可能性地空间，就是固定串的先后顺序和它们自身的长度，不过在此之前需要先确保整个文本串的空余长度足以容纳所有固定串：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">fixed_pats_tot</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="n">fixed_pats</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.map</span><span class="p">(|</span><span class="n">s</span><span class="p">|</span> <span class="n">s</span><span class="nf">.len</span><span class="p">())</span><span class="nf">.sum</span><span class="p">();</span>

<span class="k">if</span> <span class="n">fixed_pats_tot</span> <span class="o">&gt;</span> <span class="n">tail</span> <span class="o">-</span> <span class="n">head</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>用一个嵌套的数组 <code class="language-plaintext highlighter-rouge">fixed_pats_pos</code> 来依次保存每个固定串的可能在文本串上的可能位置<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup><sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup>，如果发现有个固定串没有合适的位置，那就可以提前返回失败了：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">start</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">end</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="n">tail</span> <span class="o">-</span> <span class="n">fixed_pats_tot</span><span class="p">;</span>

<span class="k">let</span> <span class="k">mut</span> <span class="n">fixed_pats_pos</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

<span class="k">for</span> <span class="n">pat</span> <span class="k">in</span> <span class="n">fixed_pats</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">pos</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span><span class="o">..=</span><span class="n">end</span><span class="p">)</span>
    	<span class="nf">.filter</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">j</span><span class="p">|</span> <span class="nf">match_pat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="n">j</span><span class="o">..</span><span class="n">j</span> <span class="o">+</span> <span class="n">pat</span><span class="nf">.len</span><span class="p">()],</span> <span class="n">pat</span><span class="p">))</span>
    	<span class="nf">.collect</span><span class="p">();</span>

    <span class="k">if</span> <span class="n">pos</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">fixed_pats_pos</span><span class="nf">.push</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>

    <span class="n">start</span> <span class="o">+=</span> <span class="n">pat</span><span class="nf">.len</span><span class="p">();</span>
    <span class="n">end</span> <span class="o">+=</span> <span class="n">pat</span><span class="nf">.len</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里使用了简单地匹配搜索，因为模式和文本都非常地短，如果是其他的情况在串上地多模式搜索，就有 AC 自动机，或者简单高效地 Sunday 算法。</p>

<h3 id="step-4回溯剪枝">Step-4：回溯剪枝</h3>

<p>一般来说回溯剪枝比较简洁的实现形式是递归，不过我习惯性地写非递归的版本，它在 Debug 的时候看得更清楚。</p>

<p>根据不定模式与文本的匹配情况，确定一个对应固定模式的起始范围，遍历这个起始范围，分别收集固定模式的可能位置，然后来到下一级。</p>

<p>让我们澄清一下这个比较方法：首先是前面的不定串，然后是后面的固定串，这样不定串与它后面的固定串两两划分，直到最后一个不定串，对应得是尾部的固定串。</p>

<p>这样一直到尾部的固定串都匹配时，就匹配成功，否则返回上一级，选取下一个可能位置，如果上一级为空，就继续向上返回。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">search_stack</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="nd">vec!</span><span class="p">[</span><span class="n">head</span><span class="p">]];</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">lv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">loop</span> <span class="p">{</span>
    <span class="c1">// check fail condition</span>
    <span class="k">while</span> <span class="n">search_stack</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">search_stack</span><span class="nf">.pop</span><span class="p">();</span>

        <span class="k">if</span> <span class="n">search_stack</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">lv</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="n">search_stack</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.pop</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">random_pats</span><span class="p">[</span><span class="n">lv</span><span class="p">]];</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">scale</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
        <span class="k">for</span> <span class="o">&amp;</span><span class="n">s_c</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span><span class="o">..</span><span class="p">]</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">s_c</span> <span class="o">!=</span> <span class="n">c</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">scale</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">scale</span> <span class="o">=</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// big enough</span>
    <span class="p">}</span>

    <span class="c1">// check succeed condition</span>
    <span class="k">if</span> <span class="n">lv</span> <span class="o">==</span> <span class="n">fixed_pats_pos</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">tail</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">+</span> <span class="n">scale</span> <span class="o">&gt;=</span> <span class="n">tail</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">pos</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">fixed_pats_pos</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span>
        <span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.filter</span><span class="p">(|</span><span class="o">&amp;&amp;</span><span class="n">j</span><span class="p">|</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">scale</span><span class="p">)</span>
        <span class="nf">.map</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">j</span><span class="p">|</span> <span class="n">j</span> <span class="o">+</span> <span class="n">fixed_pats</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.len</span><span class="p">())</span>
        <span class="nf">.collect</span><span class="p">();</span>

        <span class="k">if</span> <span class="o">!</span><span class="n">pos</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">search_stack</span><span class="nf">.push</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
            <span class="n">lv</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>至此为止就是原始版本的匹配算法，它的运行时间在 273 ms (beats 10.49%)，可以通过，但还不够好，可以通过一点点改进显著地提高性能。</p>

<h3 id="step-5记录失败">Step-5：记录失败</h3>

<p>可以直观地发现，有大量可以简单避免的无效匹配，如果某级从某个位置开始的后面所有可能匹配都失败了，那么下次再有从这一级的该位置开始的搜索就可以直接跳过。</p>

<p>可以直接用一个全局数组<sup id="fnref:9" role="doc-noteref"><a href="#fn:9" class="footnote" rel="footnote">9</a></sup>记录失败情况，并用栈追踪级别和位置，以在全局数组上更新：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">MAX_S_LEN</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="k">const</span> <span class="n">MAX_LV</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="n">MAX_S_LEN</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

<span class="k">static</span> <span class="k">mut</span> <span class="n">FAILED</span><span class="p">:</span> <span class="p">[</span><span class="nb">bool</span><span class="p">;</span> <span class="n">MAX_LV</span> <span class="o">*</span> <span class="n">MAX_S_LEN</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_LV</span> <span class="o">*</span> <span class="n">MAX_S_LEN</span><span class="p">];</span>

<span class="c1">// ...</span>

<span class="c1">// i, scale</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">bak_range</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</code></pre></div></div>

<p>修改后的回溯版本：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">search_stack</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="nd">vec!</span><span class="p">[</span><span class="n">head</span><span class="p">]];</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">lv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="c1">// i, scale</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">bak_range</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>

<span class="k">unsafe</span> <span class="p">{</span> <span class="n">FAILED</span><span class="nf">.fill</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">};</span>

<span class="k">loop</span> <span class="p">{</span>
    <span class="c1">// check fail condition</span>
    <span class="k">while</span> <span class="n">search_stack</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">search_stack</span><span class="nf">.pop</span><span class="p">();</span>

        <span class="k">if</span> <span class="n">search_stack</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">lv</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">let</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">scale</span><span class="p">)</span> <span class="o">=</span> <span class="n">bak_range</span><span class="nf">.pop</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span>

        <span class="k">let</span> <span class="n">base</span> <span class="o">=</span> <span class="n">lv</span><span class="o">*</span><span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
        <span class="k">unsafe</span> <span class="p">{</span> <span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">FAILED</span><span class="p">[</span><span class="n">base</span><span class="o">..=</span><span class="n">base</span><span class="o">+</span><span class="n">scale</span><span class="p">])</span><span class="nf">.fill</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="n">search_stack</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.pop</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span>

    <span class="k">if</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="n">FAILED</span><span class="p">[</span><span class="n">lv</span><span class="o">*</span><span class="n">MAX_S_LEN</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="p">}</span> <span class="p">{</span>
        <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">random_pats</span><span class="p">[</span><span class="n">lv</span><span class="p">]];</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">scale</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
        <span class="k">for</span> <span class="o">&amp;</span><span class="n">s_c</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span><span class="o">..</span><span class="p">]</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">s_c</span> <span class="o">!=</span> <span class="n">c</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">scale</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">scale</span> <span class="o">=</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// big enough</span>
    <span class="p">}</span>

    <span class="c1">// check succeed condition</span>
    <span class="k">if</span> <span class="n">lv</span> <span class="o">==</span> <span class="n">fixed_pats_pos</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">tail</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">+</span> <span class="n">scale</span> <span class="o">&gt;=</span> <span class="n">tail</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">pos</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">fixed_pats_pos</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span>
        <span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.filter</span><span class="p">(|</span><span class="o">&amp;&amp;</span><span class="n">j</span><span class="p">|</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">scale</span><span class="p">)</span>
        <span class="nf">.map</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">j</span><span class="p">|</span> <span class="n">j</span> <span class="o">+</span> <span class="n">fixed_pats</span><span class="p">[</span><span class="n">lv</span><span class="p">]</span><span class="nf">.len</span><span class="p">())</span>
        <span class="nf">.collect</span><span class="p">();</span>

        <span class="k">if</span> <span class="o">!</span><span class="n">pos</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">search_stack</span><span class="nf">.push</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
            <span class="n">bak_range</span><span class="nf">.push</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">scale</span><span class="p">));</span>
            <span class="n">lv</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>如果不计预先搜索固定串的开销<sup id="fnref:10" role="doc-noteref"><a href="#fn:10" class="footnote" rel="footnote">10</a></sup>，那么有失败记录的实现的时间复杂度就是 $O(nm)$ ，与标准实现的一样。</p>

<p>它的运行时间稳定在 $0$ ms，还要优于简单形式的标准实现。</p>

<h2 id="解dp">解②DP：</h2>

<p>标准实现，不细究地话形式还是很简洁的。</p>

<p>把文本串与模式串逐字符比较，模式串中的不定串前面的字符当做普通字符处理，后面的星号才当做不定串特别处理。</p>

<p>分别用 $i$ 和 $j$ 表示文本串和模式串的匹配的前缀，二维地布尔数组 $\texttt{dp}[i][j]$ 表示 $s[0..i-1]$ 和 $p[0..j-1]$ 是否匹配。</p>

<p>当 $s[i-1] \neq *$ 时，如果 $\texttt{dp}[i-1][j-1]$ 匹配，并且 $s[i-1] = p[i-1]$ ，那么 $\texttt{dp}[i][j]$ 就是匹配的；</p>

<p>当$s[i-1] = *$ 时：</p>

<ul>
  <li>假设这个不定串匹配了零次，此时 $\texttt{dp}[i][j]=\texttt{dp}[i][j-2]$；</li>
  <li>假设这个不定串至少匹配了一次，此时 $\texttt{dp}[i][j]=\texttt{dp}[i-1][j] \land s[i-1] = p[i-2]$</li>
</ul>

<p>最后匹配了整个文本串和模式串的 $i$， $j$ 的 $\texttt{dp}[i][j]$ 就是需要的匹配结果。</p>

<p>另外需要考虑的一点是状态数组的初始状态：</p>

<ul>
  <li>当两个串都是空串时，状态是匹配的；</li>
  <li>当其中一个串为空，另一个不为空时，应该是不匹配的，除了一个特殊情况；</li>
  <li>特殊情况是，当文本串为空，模式串不为空，但全都是不定串时，比如 <code class="language-plaintext highlighter-rouge">a*b*.*</code> 时，也是匹配的</li>
</ul>

<h3 id="基本实现">基本实现</h3>

<p>假如用文本串作为外循环：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">dp</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="nd">vec!</span><span class="p">[</span><span class="kc">false</span><span class="p">;</span> <span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()];</span> <span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()]</span>

<span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="k">as</span> <span class="n">_</span> <span class="p">{</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> 
            <span class="p">||</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nd">char_match!</span><span class="p">(</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">],</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span>
            <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nd">char_match!</span><span class="p">(</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ...</span>

<span class="nd">macro_rules!</span> <span class="n">char_match</span> <span class="p">{</span>
    <span class="p">(</span><span class="nv">$p:expr</span><span class="p">,</span> <span class="nv">$s:expr</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="p">(</span><span class="nv">$p</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="n">_</span> <span class="p">||</span> <span class="nv">$p</span> <span class="o">==</span> <span class="nv">$s</span><span class="p">)</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这是形式上最简洁的实现，但运行时间稳定在 $2$ ms，明显不如上面的自然实现，而 $O(nm)$ 的空间复杂度虽然在本题上可以忽略不计，但也有进一步优化的可能。</p>

<h3 id="外分组实现">外分组实现</h3>

<p>像上面一样在内循环里做模式串的字符检查： <code class="language-plaintext highlighter-rouge">p_bytes[j-1]</code> 是否为 <code class="language-plaintext highlighter-rouge">*</code> 符号的检查，以及 <code class="language-plaintext highlighter-rouge">p_bytes[j-2]</code> 和 <code class="language-plaintext highlighter-rouge">p_bytes[j-2]</code> 是否为 <code class="language-plaintext highlighter-rouge">.</code> 符号的检查，主要是为了代码简洁，其实不太合适，应当放到外循环里，而从实际测试看，这两者也是有可观地性能差距。</p>

<p>把模式串的字符检查放在外循环也就是把模式串作为主迭代，使用 $\texttt{dp}[j][i]$，在这种情况下观察 $\texttt{dp}$ 数组的使用，可以发现实际上每轮都只会使用最近三行的数据：$\texttt{dp}[j][..]$ , $\texttt{dp}[j-1][i]$ ,  $\texttt{dp}[j-2][i]$ ，于是我们可以只用三个数组保存数据，每次循环结束就依次交换。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve_time_saving</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">p_bytes</span> <span class="o">=</span> <span class="n">p</span><span class="nf">.as_bytes</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">s_bytes</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.as_bytes</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">pre2</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">pre1</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">cur</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>

    <span class="n">pre1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
            <span class="c1">// The valid pattern has guaranteed that j &gt;= 2</span>
            <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
                <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                    <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">||</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cur</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                    <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                        <span class="p">||</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span>
                            <span class="o">&amp;&amp;</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
                            <span class="o">&amp;&amp;</span> <span class="n">cur</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="k">as</span> <span class="nb">u8</span> <span class="p">{</span>
            <span class="n">cur</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre1</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">cur</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                <span class="n">cur</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">pre1</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nn">std</span><span class="p">::</span><span class="nn">mem</span><span class="p">::</span><span class="nf">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">pre2</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">pre1</span><span class="p">);</span>
        <span class="nn">std</span><span class="p">::</span><span class="nn">mem</span><span class="p">::</span><span class="nf">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">pre1</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">cur</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">pre1</span><span class="p">[</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>注意最后 <code class="language-plaintext highlighter-rouge">pre1</code> 代表得才是 <code class="language-plaintext highlighter-rouge">cur</code> 。</p>

<p>本实现的运行时间稳定在 $0$ ms ，堪比前面自然实现。</p>

<h3 id="最省内存实现">最省内存实现</h3>

<p>如果仍然将文本串作为外循环的实现，$\texttt{dp}[i][j]$ 数组可以进一步压缩，因为此时只会使用三种数据： $\texttt{dp}[i-1][j-1]$ , $\texttt{dp}[i-1][j]$ ,  $\texttt{dp}[i][j-2]$ ，也就是本行的数据以及上一行本列和上一行前一列的数据。</p>

<p>因此只需要在迭代时复用一行的数据，某个位置数据在计算新的之前，保存的就是上一行的数据，可以用两个变量动态保存需要的上一行本列 $\texttt{dp}[i-1][j]$ ，和上一行前一列 $\texttt{dp}[i-1][j-1]$ 。</p>

<p>不过因此初始状态 $\texttt{dp}[0]$ 需要分情况处理，第一行的初始状态是 $1$ ，而其余行的初始位置是 $0$ 。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">mut</span> <span class="n">DP</span><span class="p">:</span> <span class="p">[</span><span class="nb">bool</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="k">false</span><span class="p">;</span> <span class="n">MAX_S_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>

<span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve_mem_saving</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">unsafe</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">p_bytes</span> <span class="o">=</span> <span class="n">p</span><span class="nf">.as_bytes</span><span class="p">();</span>
        <span class="k">let</span> <span class="n">s_bytes</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.as_bytes</span><span class="p">();</span>

        <span class="n">DP</span><span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span><span class="nf">.fill</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
        <span class="n">DP</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="k">as</span> <span class="n">_</span> <span class="p">{</span>
                <span class="n">DP</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">DP</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// ..i</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">s_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">pre_1</span> <span class="o">=</span> <span class="n">DP</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="n">DP</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">let</span> <span class="n">pre_0</span> <span class="o">=</span> <span class="n">DP</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>

                <span class="k">if</span> <span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="k">as</span> <span class="n">_</span> <span class="p">{</span>
                    <span class="n">DP</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">DP</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span>
                        <span class="p">||</span> <span class="n">pre_0</span>
                            <span class="o">&amp;&amp;</span> <span class="nd">char_match!</span><span class="p">(</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">],</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="p">{</span>
                    <span class="n">DP</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span>
                        <span class="n">pre_1</span> <span class="o">&amp;&amp;</span> <span class="nd">char_match!</span><span class="p">(</span><span class="n">p_bytes</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">s_bytes</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
                <span class="p">}</span>

                <span class="n">pre_1</span> <span class="o">=</span> <span class="n">pre_0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">DP</span><span class="p">[</span><span class="n">p_bytes</span><span class="nf">.len</span><span class="p">()]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>由于本质上与基本实现一致，运行时间也是 $2$ ms 。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>或者用一个该题目下某用户的留言– “脑子充满了 DP” <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>这道题有 10k 的支持，但也有 1k 的反对 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>只有一种可能你会做得很利落，那就是你之前根本就做过类似的，这能称得上是好的题目吗？ <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>这就更把人引到沟里去了，因为自然解法考虑的细节就更多了 <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>因为事先我并不熟悉这个套路，应该说套路记得我，但我不记得它 <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>不存在可以认为是空串的情况 <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>显然它的长度比之前保存不定串位置的数组 <code class="language-plaintext highlighter-rouge">random_pats</code> 少 $1$ <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>它至少应该在上一个固定串的后面，并且保证后面有足够的空间放置其他的固定串 <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:9" role="doc-endnote">
      <p>可以在多个测试用例里共享使用 <a href="#fnref:9" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:10" role="doc-endnote">
      <p>这个开销显然很小 <a href="#fnref:10" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">0336 - Palindrome Pairs</title><link href="/algs/LeetCode0336.html" rel="alternate" type="text/html" title="0336 - Palindrome Pairs" /><published>2023-07-12T00:00:00+08:00</published><updated>2023-07-12T00:00:00+08:00</updated><id>/algs/LeetCode0336</id><content type="html" xml:base="/algs/LeetCode0336.html"><![CDATA[<p><em>通常为了分类页面的干净，不将LeetCode题解的文章放到算法分类里，但这一篇实在精彩，涉及了其他算法没有介绍过的，关于大量子串比较的通解性思路</em></p>

<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/palindrome-pairs/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.7/0335_palindrome_pairs">源代码</a></p>

<p>有必要特别强调下这道题的数据特点：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">1 &lt;= words.length &lt;= 5000</code></li>
  <li><code class="language-plaintext highlighter-rouge">0 &lt;= words[i].length &lt;= 300</code></li>
  <li><code class="language-plaintext highlighter-rouge">words[i]</code> consists of lowercase English letters.</li>
</ul>

<p>如果单从题目名字出发，认为这是一个核心在于用更低时间复杂度寻找回文串的问题，那就是从根本上搞错了方向。</p>

<p>把单词数记为 $n$ ，单词长度记为 $k$ ：</p>

<ol>
  <li>这里情况是 $n$ 比 $k$ 高一个数量级，性能瓶颈首先在于单词数而不是单词长度；</li>
  <li>在 300 这个长度上，$O(k^2)$ 的简单算法通常远远好于时间复杂度为 $O(k)$ 的那些复杂算法</li>
</ol>

<p>而这个问题实际上，如果是每个单词两两比较，那么无论如何都会 TLE（Time Limit Exceed），必须寻找一种能降低单词数的时间复杂度的方法。</p>

<p>这也就引出了本文介绍的大量子串比较的通解性思路。</p>

<p><strong>Tips:</strong></p>

<ul>
  <li>给出的每个单词都是独特的；</li>
  <li>在答案里排除标号相同，也就是单词自身就是回文的情况</li>
</ul>

<h2 id="解-trie">解① Trie：</h2>

<p>当提到多个子串的比较时，我们就可以想到前缀树（Trie）这种思路<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>，我们用它保存每个单词的后缀<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<p>如果作为前缀的单词长度 $\geqslant$ 作为后缀的单词长度：</p>

<p>在单词后缀的最后一个字母上标记单词的索引，表示这是一个单词的结束，此时应该检查前缀单词的其余部分是否为空或者是一个回文串。</p>

<p>否则：</p>

<p>在把单词加入到 Trie 的时候，后缀每向前一位，就要检查下剩余部分是否构成一个回文串，如果是的话，就把这个单词的索引储存在到该位置节点里。</p>

<p>节点的结构如下：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">PostfixTrieNode</span> <span class="p">{</span>
    <span class="n">is_word</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">rest_palindromes</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">children</span><span class="p">:</span> <span class="p">[</span><span class="nb">Option</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">;</span> <span class="mi">26</span><span class="p">],</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">PostfixTrie</span> <span class="p">{</span>
    <span class="n">nodes</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">PostfixTrieNode</span><span class="o">&gt;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">is_word</code> 是当前缀单词长度较长或相等时，表示有一个后缀单词结束了，保存该后缀单词的索引；</li>
  <li><code class="language-plaintext highlighter-rouge">rest_palindromes</code> 是当前缀单词较短，表示当前缀单词结束后，后缀的其余部分仍然构成回文的那些单词的索引；</li>
  <li><code class="language-plaintext highlighter-rouge">children</code> 保存 Trie 下一级节点（的索引），保存索引而不是节点本身，是为了规避 Rust 严格的数据所有权检查</li>
</ul>

<p>树的创建和节点的创建：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">PostfixTrie</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span>
            <span class="n">nodes</span><span class="p">:</span> <span class="nd">vec!</span><span class="p">[</span><span class="nn">PostfixTrieNode</span><span class="p">::</span><span class="nf">new</span><span class="p">()],</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">push_child</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">node_i</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="nf">.len</span><span class="p">();</span>

        <span class="k">self</span><span class="py">.nodes</span><span class="nf">.push</span><span class="p">(</span><span class="nn">PostfixTrieNode</span><span class="p">::</span><span class="nf">new</span><span class="p">());</span>
        <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">p</span><span class="p">]</span><span class="py">.children</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span><span class="n">node_i</span><span class="p">);</span>

        <span class="n">node_i</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">PostfixTrieNode</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span>
            <span class="n">is_word</span><span class="p">:</span> <span class="nb">None</span><span class="p">,</span>
            <span class="n">rest_palindromes</span><span class="p">:</span> <span class="nd">vec!</span><span class="p">[],</span>
            <span class="n">children</span><span class="p">:</span> <span class="p">[</span><span class="nb">None</span><span class="p">;</span> <span class="mi">26</span><span class="p">],</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>根节点就是索引为 $0$ 的节点。</p>

<p><strong>加入一个单词：</strong></p>

<p>对于一个长度为 $k$ 的单词来讲，需要考虑从没有匹配到匹配到最后一个字符，一共 $k$ 种情况，其中没有匹配针对的前缀是空串的情况。最后在最后一个字符的 Trie 节点上打上单词结束的标记。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">PostfixTrie</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">add_word</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">word_i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">root</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="o">..=</span><span class="n">word</span><span class="nf">.len</span><span class="p">())</span><span class="nf">.rev</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nf">is_palindrome</span><span class="p">(</span><span class="o">&amp;</span><span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.rest_palindromes</span><span class="nf">.push</span><span class="p">(</span><span class="n">word_i</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">let</span> <span class="n">idx</span> <span class="o">=</span> <span class="nf">rank</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>

            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.children</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="p">{</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">root</span> <span class="o">=</span> <span class="k">self</span><span class="nf">.push_child</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">idx</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.is_word</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span><span class="n">word_i</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>搜索匹配</strong></p>

<p>搜索匹配的时候，稍微复杂一些，必须跟踪匹配的情况，如果前缀单词遍历完后没有发生失配，就需要检查此时是否也是后缀单词的一个结束（也就是前后缀长度相等的情况）并且把可能的后缀单词中没结束并且剩余部分是回文加入答案。</p>

<p>追踪匹配，在循环外单独处理有一个好处，就是适用于前缀是空串的情况。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">PostfixTrie</span> <span class="p">{</span>    
	<span class="k">fn</span> <span class="nf">search_palindrome</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">word_i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">pairs</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

        <span class="k">let</span> <span class="k">mut</span> <span class="n">root</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">matched</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">word</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.is_word</span> <span class="p">{</span>
                <span class="k">if</span> <span class="nf">is_palindrome</span><span class="p">(</span><span class="o">&amp;</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">pairs</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">word_i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">let</span> <span class="n">idx</span> <span class="o">=</span> <span class="nf">rank</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.children</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="p">{</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">matched</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="n">matched</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span><span class="py">.is_word</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="n">word_i</span> <span class="p">{</span>
                    <span class="n">pairs</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">word_i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="n">pairs</span><span class="nf">.extend</span><span class="p">(</span><span class="k">self</span><span class="py">.nodes</span><span class="p">[</span><span class="n">root</span><span class="p">]</span>
                <span class="py">.rest_palindromes</span>
                <span class="nf">.iter</span><span class="p">()</span>
                <span class="nf">.cloned</span><span class="p">()</span>
                <span class="nf">.map</span><span class="p">(|</span><span class="n">j</span><span class="p">|</span> <span class="nd">vec!</span><span class="p">[</span><span class="n">word_i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">])</span>
            <span class="p">);</span>
        <span class="p">}</span>

        <span class="n">pairs</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>完整过程：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">words</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">trie</span> <span class="o">=</span> <span class="nn">PostfixTrie</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">trie</span><span class="nf">.add_word</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="nf">.as_bytes</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">ans</span><span class="nf">.extend</span><span class="p">(</span><span class="n">trie</span><span class="nf">.search_palindrome</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="nf">.as_bytes</span><span class="p">()));</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>总结：</strong></p>

<p>总地来说 Trie 也并不能特别地节省内存，总长度为 $n$ 的串存储到 Trie 上也仍然需要 $O(n)$ 的时间复杂度，唯一明显好处是可以缩短单词地匹配范围，把单词比较次数从原来的 $O(n^2)$ 降低为 $O(n)$ 。</p>

<p>对于本题，Rust Trie 实现大概是 276 ms / 373 MB 的水平<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">3</a></sup>。</p>

<p>这个级别的内存消耗显然过分了，特别是对于 Rust 而言，按照以往经验，一个好的 Rust 题解的内存消耗应该在 10 MB 以内，几百 MB 的消耗与其他语言相比也非常糟糕；</p>

<p>时间性能勉强还算可以，我知道 C++ 的题解里的最好地有 200+ ms ，而 Java 的题解最好地可以达到 100+ ms<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">4</a></sup> ，相较之下，这个表现显然还不够好。</p>

<h2 id="解-长度基数">解② 长度基数：</h2>

<p>这个思路非常类似于基数排序，它成立的关键是单词的长度非常有限，如果能事先哈希所有的单词，然后遍历每个单词的时候根据它的长度范围，构造后缀，在哈希表上查找符合后缀的单词。</p>

<p>对于每个单词检查所有长度不超过它的单词，在做回文对判断时，必须要有较长的那一个单词的信息，然后才能根据它的后缀，检查可能的较短的那个词是否存在，不管它们哪一个在前，哪一个在后。</p>

<p><strong>时间优化：</strong></p>

<p>可以事先统计所有单词的长度，排除掉实际上不存在的长度可能。</p>

<p><strong>空间节省：</strong></p>

<p>在做单词哈希的时候，并不保存单词的反串儿，而是原串的分片，而在查询的时候动态创建反串，这利用了回文的对称性质，哈希表上保存的分片只是原串的引用，不必因此创建新的字符串，而搜索时创建的反串又是一次性的，我们可以非常有把握地认为优化会这个反串分配的空间会被重新利用。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">words</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">words_map</span> <span class="o">=</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">len_maps</span> <span class="o">=</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="nn">BTreeSet</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">words_map</span><span class="nf">.insert</span><span class="p">(</span><span class="n">word</span><span class="nf">.as_bytes</span><span class="p">(),</span> <span class="n">i</span><span class="p">);</span>
        <span class="n">len_maps</span><span class="nf">.insert</span><span class="p">(</span><span class="n">word</span><span class="nf">.len</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">lens</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">len_maps</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.collect</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="nf">.as_bytes</span><span class="p">();</span>

        <span class="k">let</span> <span class="n">rev_word</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">word</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">()</span><span class="py">.collect</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">u8</span><span class="o">&gt;&gt;</span><span class="p">();</span>
        <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">word</span><span class="nf">.len</span><span class="p">();</span>

        <span class="k">for</span> <span class="o">&amp;</span><span class="n">k</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">lens</span><span class="p">[</span><span class="o">..</span><span class="n">lens</span><span class="nf">.binary_search</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">()]</span> <span class="p">{</span>
            <span class="c1">// word is prefix</span>
            <span class="c1">// word[0..k] =R= rev_word[0..k]</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">words_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rev_word</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">if</span> <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">word</span><span class="p">[</span><span class="n">k</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="c1">// word is postfix</span>
            <span class="c1">// word[n-k..] =&gt; rev_word[n-k..]</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">words_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rev_word</span><span class="p">[</span><span class="o">..</span><span class="n">k</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">if</span> <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">word</span><span class="p">[</span><span class="o">..</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">i</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">words_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rev_word</span><span class="p">[</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">word</span> <span class="o">&gt;</span> <span class="n">rev_word</span> <span class="p">{</span>
                <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">i</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
                <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="n">j</span> <span class="k">as</span> <span class="n">_</span><span class="p">,</span> <span class="n">i</span> <span class="k">as</span> <span class="n">_</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>


<span class="cd">/// Quickest method on len(word) &lt;= 300</span>
<span class="nd">#[inline]</span>
<span class="k">fn</span> <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">u8</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">s</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.eq</span><span class="p">(</span><span class="n">s</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>总结：</strong></p>

<p>单词长度的统计和排序是 $O(n\text{log}n)$ ，对于本题，$\text{log}n$ 相当于一个非常小的常数，因此这段开销可以忽略不计，而相比于 Trie 解，不需要检查每个串的所有后缀是否是回文，而只检查部分后缀（存在该长度的串），并且有更好的局部性，因此提高了性能。</p>

<p>性能表现：107 ms / 6.6 MB 。</p>

<p>运行时间比 Trie 快了一倍，但也只是和 Java 的最好情况打平，只能说差强人意，不过内存的占用控制在 10 MB 以内，还是令人非常满意的。</p>

<h2 id="解-串排序">解③ 串排序：</h2>

<p>有什么能比长度基数的比较更快的方法吗？</p>

<p>在前面基数长度的题解中，仍然是有无谓地单词比较，最好的办法是能只比较确定有共同回文部分的串。</p>

<p>这个方法的思路并没有出现在热门题解中，是我从 Python 的最佳提交中看来的，非常简单，而且具有通用性，在很多其他问题上也有这样的处理思路。</p>

<p>如果把所有单词的正串和反串放在一起排序，那么按照字符串比较的字典序<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>，会有如下几个关键性质：</p>

<ol>
  <li>
    <p>有最长公共前缀的字符串会紧挨在一起，而且短的在前，长的在后，不管它们是正串还是反串，这都不影响回文的判断；</p>
  </li>
  <li>
    <p>如果存在构成回文对的一对单词的正反串，那么其中的短串一定是长串的前缀，而且两个串的正反性是不同的；</p>
  </li>
  <li>
    <p>反之从某个串 $s_i$ 的位置 $i$ 向后检查，如果发现了一个前缀不包含 $s_i$ 的串 $s_j$ ，那显然 $s_j$ 以及之后的串肯定不与 $s_i$ 构成回文对</p>
  </li>
</ol>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">words</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">words_and_revs</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">words</span><span class="nf">.len</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">forward</span> <span class="o">=</span> <span class="n">word</span><span class="nf">.into_bytes</span><span class="p">();</span>
        <span class="k">let</span> <span class="n">backward</span> <span class="o">=</span> <span class="n">forward</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">()</span><span class="nf">.collect</span><span class="p">();</span>

        <span class="n">words_and_revs</span><span class="nf">.push</span><span class="p">((</span><span class="n">forward</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="n">i</span> <span class="k">as</span> <span class="nb">i32</span><span class="p">));</span>
        <span class="n">words_and_revs</span><span class="nf">.push</span><span class="p">((</span><span class="n">backward</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="n">i</span> <span class="k">as</span> <span class="nb">i32</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="n">words_and_revs</span><span class="nf">.sort_unstable</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">short</span><span class="p">,</span> <span class="n">short_is_forward</span><span class="p">,</span> <span class="n">short_i</span><span class="p">))</span> <span class="k">in</span>
        <span class="n">words_and_revs</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">long</span><span class="p">,</span> <span class="n">long_is_forward</span><span class="p">,</span> <span class="n">long_i</span><span class="p">)</span> <span class="k">in</span> <span class="n">words_and_revs</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">..</span><span class="p">]</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">short_is_forward</span> <span class="o">==</span> <span class="n">long_is_forward</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="n">long</span><span class="nf">.starts_with</span><span class="p">(</span><span class="o">&amp;</span><span class="n">short</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">long_i</span> <span class="o">!=</span> <span class="n">short_i</span> <span class="o">&amp;&amp;</span> <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">long</span><span class="p">[</span><span class="n">short</span><span class="nf">.len</span><span class="p">()</span><span class="o">..</span><span class="p">])</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="o">*</span><span class="n">long_is_forward</span> <span class="p">{</span>
                        <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="o">*</span><span class="n">long_i</span><span class="p">,</span> <span class="o">*</span><span class="n">short_i</span><span class="p">]);</span>
                    <span class="p">}</span>
                    <span class="k">else</span> <span class="p">{</span>
                        <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="o">*</span><span class="n">short_i</span><span class="p">,</span> <span class="o">*</span><span class="n">long_i</span><span class="p">]);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>总结：</strong></p>

<p>排序的方法省掉了所有不必要的串的比较，只检查每个前后缀对称的单词对儿一次回文，局部性也不错，拥有理论和实际的最佳时间性能，唯一难受的点在于数据读取的方向是固定的，没有高效的从后向前读的方法，这使得我们不得不实际上为每一个反串创建一份正向的版本，这增加了一些内存的开销。</p>

<p>性能表现：61 ms / 7.7 MB</p>

<p>没什么好说的，就是双优地时、空表现。</p>

<h3 id="串排序内存节省版本">串排序（内存节省版本）</h3>

<p>接下来我们带着做实验的心态，尝试用无实体数据的方法表示反串，从而节省内存。</p>

<p>静态类型语言要求严格地向量是单态的，因此对于正串和反串，都需要同一类型的包装，需要实现它们的比较方法：</p>

<p>显然由于反串的存在，它们的比较方法只能逐个字节进行，这不影响时间复杂度，但很可能极大地影响实际的性能。</p>

<p>这里使用堆上地动态 Trait 对象来统一正串和反串创建的两种不同的迭代器。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[derive(PartialEq,</span> <span class="nd">Eq)]</span>
<span class="k">struct</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="n">raw</span><span class="p">:</span> <span class="o">&amp;</span><span class="nv">'a</span> <span class="p">[</span><span class="nb">u8</span><span class="p">],</span>
    <span class="n">dir</span><span class="p">:</span> <span class="nb">bool</span>
<span class="p">}</span>

<span class="k">impl</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">raw</span><span class="p">:</span> <span class="o">&amp;</span><span class="nv">'a</span> <span class="p">[</span><span class="nb">u8</span><span class="p">],</span> <span class="n">is_forward</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span> <span class="n">raw</span><span class="p">,</span> <span class="n">dir</span><span class="p">:</span> <span class="n">is_forward</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="nd">#[inline]</span>
    <span class="k">fn</span> <span class="nf">len</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
        <span class="k">self</span><span class="py">.raw</span><span class="nf">.len</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">iter</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">'a</span> <span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Box</span><span class="o">&lt;</span><span class="k">dyn</span> <span class="nb">Iterator</span><span class="o">&lt;</span><span class="n">Item</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nb">u8</span><span class="o">&gt;</span> <span class="o">+</span> <span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">self</span><span class="py">.dir</span> <span class="p">{</span>
            <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="k">self</span><span class="py">.raw</span><span class="nf">.iter</span><span class="p">())</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">i</span> <span class="o">=</span> <span class="k">self</span><span class="py">.raw</span><span class="nf">.len</span><span class="p">();</span>

            <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="nn">std</span><span class="p">::</span><span class="nn">iter</span><span class="p">::</span><span class="nf">from_fn</span><span class="p">(</span><span class="k">move</span> <span class="p">||</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
                    <span class="nb">None</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="p">{</span>
                    <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
                    <span class="nf">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="py">.raw</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="p">}</span>
            <span class="p">}))</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="nb">PartialOrd</span> <span class="k">for</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">partial_cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">other</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nn">std</span><span class="p">::</span><span class="nn">cmp</span><span class="p">::</span><span class="n">Ordering</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">self</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.partial_cmp</span><span class="p">(</span><span class="n">other</span><span class="nf">.iter</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">impl</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="nb">Ord</span> <span class="k">for</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">other</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nn">std</span><span class="p">::</span><span class="nn">cmp</span><span class="p">::</span><span class="n">Ordering</span> <span class="p">{</span>
        <span class="k">self</span><span class="nf">.partial_cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">other</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>同时由于不存在实际的串结构，那么 <code class="language-plaintext highlighter-rouge">startswith</code> 和余部回文检测的方法也要改写：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="n">Slice</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>    
	<span class="k">fn</span> <span class="nf">starts_with</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">other</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">it</span> <span class="o">=</span> <span class="k">self</span><span class="nf">.iter</span><span class="p">();</span>

        <span class="k">for</span> <span class="n">e</span> <span class="k">in</span> <span class="n">other</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">pe</span><span class="p">)</span> <span class="o">=</span> <span class="n">it</span><span class="nf">.next</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">e</span> <span class="o">!=</span> <span class="n">pe</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">false</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">true</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">rem_is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">skipped</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">self</span><span class="py">.dir</span> <span class="p">{</span>
            <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="py">.raw</span><span class="p">[</span><span class="n">skipped</span><span class="o">..</span><span class="p">])</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="nf">is_palindrome_or_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="py">.raw</span><span class="p">[</span><span class="o">..</span><span class="k">self</span><span class="nf">.len</span><span class="p">()</span><span class="o">-</span><span class="n">skipped</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>主过程方法：</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">words</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">words_and_revs</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">words</span><span class="nf">.len</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">in</span> <span class="n">words</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">words_and_revs</span><span class="nf">.push</span><span class="p">((</span><span class="nn">Slice</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">word</span><span class="nf">.as_bytes</span><span class="p">(),</span> <span class="k">true</span><span class="p">),</span> <span class="n">i</span> <span class="k">as</span> <span class="nb">i32</span><span class="p">));</span>
        <span class="n">words_and_revs</span><span class="nf">.push</span><span class="p">((</span><span class="nn">Slice</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">word</span><span class="nf">.as_bytes</span><span class="p">(),</span> <span class="k">false</span><span class="p">),</span> <span class="n">i</span> <span class="k">as</span> <span class="nb">i32</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="n">words_and_revs</span><span class="nf">.sort_unstable</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">short</span><span class="p">,</span> <span class="n">short_i</span><span class="p">))</span> <span class="k">in</span>
        <span class="n">words_and_revs</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">long</span><span class="p">,</span>  <span class="n">long_i</span><span class="p">)</span> <span class="k">in</span> <span class="n">words_and_revs</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">short</span><span class="py">.dir</span> <span class="o">==</span> <span class="n">long</span><span class="py">.dir</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="n">long</span><span class="nf">.starts_with</span><span class="p">(</span><span class="o">&amp;</span><span class="n">short</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">long_i</span> <span class="o">!=</span> <span class="n">short_i</span> <span class="o">&amp;&amp;</span> <span class="n">long</span><span class="nf">.rem_is_palindrome_or_empty</span><span class="p">(</span><span class="n">short</span><span class="nf">.len</span><span class="p">())</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="n">long</span><span class="py">.dir</span> <span class="p">{</span>
                        <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="o">*</span><span class="n">long_i</span><span class="p">,</span> <span class="o">*</span><span class="n">short_i</span><span class="p">]);</span>
                    <span class="p">}</span>
                    <span class="k">else</span> <span class="p">{</span>
                        <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="nd">vec!</span><span class="p">[</span><span class="o">*</span><span class="n">short_i</span><span class="p">,</span> <span class="o">*</span><span class="n">long_i</span><span class="p">]);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>总结：</strong></p>

<p>运行性能：323 ms / 5.8 MB</p>

<p>动态地逐字节比较确实非常慢，但确实省到了内存，至少内存上可以说 beats 100% 。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>很多批量查询地算法都使用了这种结构，比如基于KMP 前缀数组和 Trie 的 AC 自动机（AC Automaton） <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>或者每个单词串的反串儿的前缀 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>有一种看起来会节省内存的调整是把节点上为孩子预先分配的数组结构换成哈希表，但这不改变结构的本质上，毕竟哈希表的基础也是数组，只是时间与空间的平衡因子不同，实际测试结果也支持了这样的判断：换成哈希表后消耗的空间减半，但运行时间加倍 <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>很符合我对 C++ 的一贯想象，值得一提的是 LeetCode 平台使用得还是 clang ，如果是 gnu g++ 那局面更不敢想象了 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>线性结构的比较默认采用字典序，它可以这样理解：从首元素开始两两比较，直到发现不同元素或者两个串都耗尽，较短的那一个串后面补空，相当于是权值最小的元素。但是有时候有些领域为了它们的某些方便，会判断较短的串一定比较长的串要小，但这种比较方法不能称之为字典序 <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;algs&quot;]" /><summary type="html"><![CDATA[通常为了分类页面的干净，不将LeetCode题解的文章放到算法分类里，但这一篇实在精彩，涉及了其他算法没有介绍过的，关于大量子串比较的通解性思路]]></summary></entry><entry><title type="html">0005 - Longest Palindromic Substring</title><link href="/oth/LeetCode0005.html" rel="alternate" type="text/html" title="0005 - Longest Palindromic Substring" /><published>2023-07-05T00:00:00+08:00</published><updated>2023-07-05T00:00:00+08:00</updated><id>/oth/LeetCode0005</id><content type="html" xml:base="/oth/LeetCode0005.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/longest-palindromic-substring/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p>选取最长的回文子串，如果有多个，任选一个即可。参考<a href="/algs/StringPalindrome.html">专门的回文章节</a>，这里只列出 Python 实现。</p>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.5/0005_longest_palindromic_substr/py0005">源代码</a></p>

<h2 id="解朴素实现">解①朴素实现：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""O(n^2) 448ms, beats 92.33%"""</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="c1"># Odd symmetric
</span>
    <span class="n">ans_odd_r</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">ans_odd_i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">max_len</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>

        <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_len</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">l</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">l</span><span class="p">]:</span>
                <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">break</span>

        <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">ans_odd_r</span><span class="p">:</span>
            <span class="n">ans_odd_r</span> <span class="o">=</span> <span class="n">r</span>
            <span class="n">ans_odd_i</span> <span class="o">=</span> <span class="n">i</span>

    <span class="c1"># Even symmetric
</span>
    <span class="n">ans_even_r</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">ans_even_i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">max_len</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>

        <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_len</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span><span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">l</span><span class="p">]:</span>
                <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">break</span>

        <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">ans_even_r</span><span class="p">:</span>
            <span class="n">ans_even_r</span> <span class="o">=</span> <span class="n">r</span>
            <span class="n">ans_even_i</span> <span class="o">=</span> <span class="n">i</span>

    <span class="k">if</span> <span class="n">ans_odd_r</span> <span class="o">&gt;=</span> <span class="n">ans_even_r</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">ans_odd_i</span> <span class="o">-</span> <span class="n">ans_odd_r</span> <span class="p">:</span> <span class="n">ans_odd_i</span> <span class="o">+</span> <span class="n">ans_odd_r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">ans_even_i</span> <span class="o">-</span> <span class="p">(</span><span class="n">ans_even_r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">:</span> <span class="n">ans_even_i</span> <span class="o">+</span> <span class="n">ans_even_r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>

</code></pre></div></div>

<h2 id="解串哈希">解②串哈希：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">""" O(nlogn) 1072ms beats 42.67% """</span>

<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">log2</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="n">forward_hash</span> <span class="o">=</span> <span class="n">PrefixHash</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">backward_hash</span> <span class="o">=</span> <span class="n">PrefixHash</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">s</span><span class="p">)))</span>

    <span class="c1"># Odd
</span>
    <span class="n">odd_r</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">odd_i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">max_r</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">max_r</span> <span class="o">&lt;=</span> <span class="n">odd_r</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="n">acc_r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">log2</span><span class="p">(</span><span class="n">max_r</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)):</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">acc_r</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">**</span> <span class="n">k</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">max_r</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="k">if</span> <span class="n">forward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">backward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">acc_r</span> <span class="o">=</span> <span class="n">r</span>

        <span class="k">if</span> <span class="n">acc_r</span> <span class="o">&gt;</span> <span class="n">odd_r</span><span class="p">:</span>
            <span class="n">odd_r</span> <span class="o">=</span> <span class="n">acc_r</span>
            <span class="n">odd_i</span> <span class="o">=</span> <span class="n">i</span>

    <span class="c1"># Even
</span>
    <span class="n">even_r</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">even_i</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">max_r</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">max_r</span> <span class="o">&lt;=</span> <span class="n">even_r</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="n">acc_r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">log2</span><span class="p">(</span><span class="n">max_r</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)):</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">acc_r</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">**</span> <span class="n">k</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">max_r</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="k">if</span> <span class="n">forward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">backward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">acc_r</span> <span class="o">=</span> <span class="n">r</span>

        <span class="k">if</span> <span class="n">acc_r</span> <span class="o">&gt;</span> <span class="n">even_r</span><span class="p">:</span>
            <span class="n">even_r</span> <span class="o">=</span> <span class="n">acc_r</span>
            <span class="n">even_i</span> <span class="o">=</span> <span class="n">i</span>

    <span class="k">if</span> <span class="n">even_r</span> <span class="o">&gt;=</span> <span class="n">odd_r</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">even_i</span> <span class="o">-</span> <span class="n">even_r</span> <span class="p">:</span> <span class="n">even_i</span><span class="o">+</span><span class="n">even_r</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">odd_i</span> <span class="o">-</span> <span class="n">odd_r</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span> <span class="n">odd_i</span><span class="o">+</span><span class="n">odd_r</span><span class="p">]</span>


<span class="c1"># 对于只数字和英文字符, p=79
</span>
<span class="n">P</span> <span class="o">=</span> <span class="mi">79</span>
<span class="n">M</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">**</span> <span class="mi">9</span>
<span class="n">N</span> <span class="o">=</span> <span class="mi">1000</span>  <span class="c1"># Max String Length
</span>
<span class="n">NPOWS</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
    <span class="n">NPOWS</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">NPOWS</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">P</span> <span class="o">%</span> <span class="n">M</span>

<span class="c1"># it's nosense both considering correctness and performance
# def rank(c: str):
#     if '0' &lt;= 'c' &lt;= '9':
#         return ord(c) - ord('0') + 1
#     elif 'A' &lt;= 'c' &lt;= 'Z':
#         return ord(c) - ord('A') + 10 + 1
#     else:
#         return ord(c) - ord('a') + 26 + 10 + 1
</span>
<span class="k">class</span> <span class="nc">PrefixHash</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">prefix</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">build_prefix</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">prefix</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">build_prefix</span><span class="p">(</span><span class="n">l</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">P</span> <span class="o">%</span> <span class="n">M</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="o">%</span> <span class="n">M</span>

    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s">""" [l, r] """</span>

        <span class="n">a</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">prefix</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
        <span class="n">b</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">prefix</span><span class="p">[</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">NPOWS</span><span class="p">[</span><span class="n">r</span><span class="o">-</span><span class="p">(</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="o">%</span> <span class="n">M</span> <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>

        <span class="k">return</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">M</span> <span class="o">-</span> <span class="n">b</span><span class="p">)</span> <span class="o">%</span> <span class="n">M</span>

</code></pre></div></div>

<h2 id="解哈希dp">解③哈希DP：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">""" O(n) 251ms beats 95.4% """</span>

<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="n">forward_hash</span> <span class="o">=</span> <span class="n">PrefixHash</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">backward_hash</span> <span class="o">=</span> <span class="n">PrefixHash</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">s</span><span class="p">)))</span>

    <span class="n">max_d</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">max_i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="n">prev_d</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">prev_d</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">forward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="p">(</span><span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="n">backward_hash</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="p">(</span><span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="p">)):</span>
                <span class="n">prev_d</span> <span class="o">=</span> <span class="n">d</span>
                <span class="k">break</span>

        <span class="k">if</span> <span class="n">prev_d</span> <span class="o">&gt;</span> <span class="n">max_d</span><span class="p">:</span>
            <span class="n">max_d</span> <span class="o">=</span> <span class="n">prev_d</span>
            <span class="n">max_i</span> <span class="o">=</span> <span class="n">i</span>


    <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">max_i</span><span class="o">-</span><span class="p">(</span><span class="n">max_d</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span> <span class="n">max_i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="解manacher">解④manacher：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">""" O(n) 99ms, beats 98.74% """</span>

<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">d1</span> <span class="o">=</span> <span class="n">compute_d1</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">d2</span> <span class="o">=</span> <span class="n">compute_d2</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="p">(</span><span class="n">odd_i</span><span class="p">,</span> <span class="n">odd_r</span><span class="p">)</span> <span class="o">=</span> <span class="n">map_d</span><span class="p">(</span><span class="n">d1</span><span class="p">)</span>
    <span class="p">(</span><span class="n">even_i</span><span class="p">,</span> <span class="n">even_r</span><span class="p">)</span> <span class="o">=</span> <span class="n">map_d</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">even_r</span> <span class="o">&gt;=</span> <span class="n">odd_r</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">even_i</span><span class="o">-</span><span class="n">even_r</span> <span class="p">:</span> <span class="n">even_i</span><span class="o">+</span><span class="n">even_r</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">odd_i</span><span class="o">-</span><span class="n">odd_r</span><span class="o">+</span><span class="mi">1</span> <span class="p">:</span> <span class="n">odd_i</span><span class="o">+</span><span class="n">odd_r</span><span class="p">]</span>


<span class="n">map_d</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">l</span><span class="p">:</span> <span class="nb">max</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">l</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">compute_d1</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="s">""" return (i, r) """</span>

    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="n">d1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>

    <span class="n">rl</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># rightmost left
</span>    <span class="n">rr</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># rightmost right
</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rr</span><span class="p">:</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">rr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="n">rl</span>

            <span class="k">if</span> <span class="n">d1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">-</span> <span class="n">rl</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">d1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">d1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">rl</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span>

        <span class="k">while</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">-</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">r</span><span class="p">]:</span>
            <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">rr</span><span class="p">:</span>
            <span class="n">rr</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span>
            <span class="n">rl</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">d1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span>

    <span class="k">return</span> <span class="n">d1</span>


<span class="k">def</span> <span class="nf">compute_d2</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="s">""" return (i, r) """</span>

    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

    <span class="n">d2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>

    <span class="n">rl</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># rightmost left
</span>    <span class="n">rr</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># rightmost right
</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rr</span><span class="p">:</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">rr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="n">rl</span> <span class="o">+</span> <span class="mi">1</span>

            <span class="k">if</span> <span class="n">d2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">-</span> <span class="n">rl</span><span class="p">:</span>
                <span class="n">d2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">d2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">rl</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">i</span><span class="o">-</span><span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="p">]:</span>
            <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">rr</span><span class="p">:</span>
            <span class="n">rr</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span>
            <span class="n">rl</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="n">r</span>

        <span class="n">d2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span>

    <span class="k">return</span> <span class="n">d2</span>
</code></pre></div></div>

<h2 id="解manacher-union">解⑤manacher union：</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">""" O(n) 138ms, beats 96.32%"""</span>

<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span>

    <span class="n">s1</span> <span class="o">=</span> <span class="s">'#'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">d1_1</span> <span class="o">=</span> <span class="n">compute_d1</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>

    <span class="p">(</span><span class="n">odd_i1</span><span class="p">,</span> <span class="n">odd_r1</span><span class="p">)</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span>
        <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">d1_1</span><span class="p">)),</span>
        <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="p">(</span><span class="n">even_i1</span><span class="p">,</span> <span class="n">even_r1</span><span class="p">)</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span>
        <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">d1_1</span><span class="p">)),</span>
        <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="n">odd_i</span> <span class="o">=</span> <span class="n">odd_i1</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">odd_r</span> <span class="o">=</span> <span class="p">(</span><span class="n">odd_r1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>

    <span class="n">even_i</span> <span class="o">=</span> <span class="p">(</span><span class="n">even_i1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">even_r</span> <span class="o">=</span> <span class="n">even_r1</span> <span class="o">//</span> <span class="mi">2</span>

    <span class="k">if</span> <span class="n">even_r</span> <span class="o">&gt;=</span> <span class="n">odd_r</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">even_i</span><span class="o">-</span><span class="n">even_r</span><span class="p">:</span> <span class="n">even_i</span><span class="o">+</span><span class="n">even_r</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">odd_i</span><span class="o">-</span><span class="n">odd_r</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span> <span class="n">odd_i</span><span class="o">+</span><span class="n">odd_r</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="注解">注解</h2>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">回文串基础</title><link href="/algs/StringPalindrome.html" rel="alternate" type="text/html" title="回文串基础" /><published>2023-07-03T00:00:00+08:00</published><updated>2023-07-03T00:00:00+08:00</updated><id>/algs/StringPalindrome</id><content type="html" xml:base="/algs/StringPalindrome.html"><![CDATA[<h2 id="前言">前言</h2>

<p>讨论回文串的相关基础问题以及收集寻找本质不同回文串或最长回文串的各种算法。</p>

<h2 id="概念基础">概念基础</h2>

<p>回文串（Palindrome），就是一个符号序列，它正着读和反着读都是相同的。</p>

<p>也就是说回文串总是对称的，奇数长度的回文串在中间的字母上对称，而偶数长度的回文串在两个字母的空儿上对称。</p>

<p>对称是回文最主要的性质，求解过程通常都要分奇数轴和偶数轴分别讨论。</p>

<h2 id="本质不同回文串">本质不同回文串</h2>

<p>它的一个子问题是，寻找最长回文串。</p>

<h3 id="朴素算法">朴素算法</h3>

<p>以考虑模式串上的每个位置作为对称轴，对两边的字符进行比对，分奇数轴和偶数轴两种情况。</p>

<p>时间复杂度为 $O(n)$ 。</p>

<h4 id="rust-实现">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// O(n^2) -&gt; (Odd, Even)</span>
<span class="cd">///</span>
<span class="cd">/// for odd length palindrome: "aba", r=2</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="nf">find_sub_palindromes_brute_force</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="c1">// Odd Symmetry</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">d1</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">matched_r</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">);</span>

        <span class="k">for</span> <span class="n">r</span> <span class="k">in</span> <span class="mi">2</span><span class="o">..=</span><span class="n">matched_r</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">!=</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="p">{</span>
                <span class="n">matched_r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">d1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">matched_r</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Even Symmetry</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">d2</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">matched_r</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">);</span>

        <span class="k">for</span> <span class="n">r</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..=</span><span class="n">matched_r</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">r</span><span class="p">]</span> <span class="o">!=</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">r</span><span class="p">]</span> <span class="p">{</span>
                <span class="n">matched_r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">d2</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">matched_r</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="串哈希算法">串哈希算法</h3>

<p>如果只考虑求取最长回文串，可以使用<a href="/algs/StringHash.html">串哈希</a>的方法<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">1</a></sup>，分别预处理正向的串的哈希和反向串的哈希，实现 $O(1)$ 复杂度的回文串检查，这样对于模式串上的每个位置采用<a href="/algs/BinaryLifting.html">二进制提升（Binary Lifting）</a>的方法，测试出每个位置上的<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>最长回文串，当然这需要分奇数轴和偶数轴分别求解。</p>

<p>注意当检查子串 $s[i..i+d-1]$ 是否是回文时：</p>

<ol>
  <li>
    <p>正向的串当然是查询 $i..i+d$  ；</p>
  </li>
  <li>
    <p>反向串，查询的则是 $n-(i+d)..n-i$</p>
  </li>
</ol>

<p>二进制提升的基础是：</p>

<ol>
  <li>对奇数对称的回文，如果有一个半径 $r &gt; 0$ 的回文存在，那么同一个对称轴上必然有一个半径为 $r-1$ 的奇数回文；</li>
  <li>对偶数对称的回文，如果有一个半径 $r &gt; 1$ 的回文存在，那么同一个对称轴上必然有一个半径为 $r-1$ 的偶数回；</li>
  <li>以上两个定义显然都是递归的</li>
</ol>

<p>因此假定对每个对称轴上都有一个最大的回文半径，在它范围内的也都是回文，这有有了做二进制提升的条件，这个最大回文半径就是目标，只要仍然构成一个合法回文就是没超过，否则就是超过。</p>

<h4 id="rust-实现-1">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// O(nlogn)</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="n">find_longest_palindromes_hash_native</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">N</span><span class="p">:</span> <span class="nb">usize</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
    <span class="n">alphabet</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">dyn</span> <span class="n">AlphaBet</span><span class="p">,</span>
    <span class="n">npows</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[[</span><span class="nb">u64</span><span class="p">;</span> <span class="n">N</span><span class="p">]],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">usize</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="n">alphabet</span><span class="nf">.prime</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">char_ranks</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

    <span class="k">for</span> <span class="n">c</span> <span class="k">in</span> <span class="n">chars</span> <span class="p">{</span>
        <span class="n">char_ranks</span><span class="nf">.push</span><span class="p">(</span><span class="n">alphabet</span><span class="nf">.rank</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">forward_hash</span> <span class="o">=</span>
        <span class="nn">PrefixRollingHash</span><span class="p">::</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">char_ranks</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">(),</span> <span class="n">p</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">backward_hash</span> <span class="o">=</span>
        <span class="nn">PrefixRollingHash</span><span class="p">::</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">char_ranks</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">(),</span> <span class="n">p</span><span class="p">);</span>

    <span class="c1">// Odd Symmetry</span>

    <span class="k">let</span> <span class="n">max_odd_r</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">odd_r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">odd_i</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">if</span> <span class="n">max_odd_r</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span><span class="o">..=</span><span class="n">max_odd_r</span><span class="nf">.ilog2</span><span class="p">())</span><span class="nf">.rev</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">odd_r</span> <span class="o">+</span> <span class="mi">2_usize</span><span class="nf">.pow</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">max_odd_r</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">let</span> <span class="n">d</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">found</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="n">d</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">{</span>
                <span class="k">let</span> <span class="n">h1</span> <span class="o">=</span> <span class="n">forward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">i</span><span class="o">..</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>
                <span class="k">let</span> <span class="n">h2</span> <span class="o">=</span> <span class="n">backward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">)</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>

                <span class="k">if</span> <span class="n">h1</span> <span class="o">==</span> <span class="n">h2</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="o">!</span><span class="n">found</span> <span class="p">{</span>
                        <span class="n">found</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
                        <span class="n">odd_r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
                        <span class="n">odd_i</span><span class="nf">.clear</span><span class="p">();</span>
                    <span class="p">}</span>

                    <span class="n">odd_i</span><span class="nf">.push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Even Symmetry</span>

    <span class="k">let</span> <span class="n">max_even_r</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">even_r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">even_i</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">if</span> <span class="n">max_even_r</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span><span class="o">..=</span><span class="n">max_even_r</span><span class="nf">.ilog2</span><span class="p">())</span><span class="nf">.rev</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">even_r</span> <span class="o">+</span> <span class="mi">2_usize</span><span class="nf">.pow</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="n">max_even_r</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">let</span> <span class="n">d</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">found</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="n">d</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">{</span>
                <span class="k">let</span> <span class="n">h1</span> <span class="o">=</span> <span class="n">forward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">i</span><span class="o">..</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>
                <span class="k">let</span> <span class="n">h2</span> <span class="o">=</span> <span class="n">backward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">)</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>

                <span class="k">if</span> <span class="n">h1</span> <span class="o">==</span> <span class="n">h2</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="o">!</span><span class="n">found</span> <span class="p">{</span>
                        <span class="n">found</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
                        <span class="n">even_r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
                        <span class="n">even_i</span><span class="nf">.clear</span><span class="p">();</span>
                    <span class="p">}</span>

                    <span class="n">even_i</span><span class="nf">.push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">odd_r</span> <span class="o">&gt;=</span> <span class="n">even_r</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">odd_r</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="n">n</span><span class="p">)</span><span class="nf">.collect</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="p">(</span><span class="n">odd_r</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">odd_i</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="p">(</span><span class="n">even_r</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="n">even_i</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="串哈希-dp">串哈希 DP<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">3</a></sup></h3>

<p>介绍参考<a href="/algs/StringDP.html">串上DP</a>的相关章节</p>

<h4 id="rust-实现-2">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// O(n)</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="n">find_longest_palindromes_hash_dp</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">N</span><span class="p">:</span> <span class="nb">usize</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
    <span class="n">alphabet</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">dyn</span> <span class="n">AlphaBet</span><span class="p">,</span>
    <span class="n">npows</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[[</span><span class="nb">u64</span><span class="p">;</span> <span class="n">N</span><span class="p">]],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">usize</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="n">alphabet</span><span class="nf">.prime</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">char_ranks</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

    <span class="k">for</span> <span class="n">c</span> <span class="k">in</span> <span class="n">chars</span> <span class="p">{</span>
        <span class="n">char_ranks</span><span class="nf">.push</span><span class="p">(</span><span class="n">alphabet</span><span class="nf">.rank</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">forward_hash</span> <span class="o">=</span>
        <span class="nn">PrefixRollingHash</span><span class="p">::</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">char_ranks</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">(),</span> <span class="n">p</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">backward_hash</span> <span class="o">=</span>
        <span class="nn">PrefixRollingHash</span><span class="p">::</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">char_ranks</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">(),</span> <span class="n">p</span><span class="p">);</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>
    <span class="n">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">max_d</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">n</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">d</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="o">..=</span><span class="nf">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span><span class="nf">.rev</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">h1</span> <span class="o">=</span> <span class="n">forward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">d</span><span class="o">..=</span><span class="n">i</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>
            <span class="k">let</span> <span class="n">h2</span> <span class="o">=</span> <span class="n">backward_hash</span><span class="nf">.query</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">..</span><span class="n">n</span> <span class="o">-</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">d</span><span class="p">,</span> <span class="n">npows</span><span class="p">);</span>

            <span class="k">if</span> <span class="n">h1</span> <span class="o">==</span> <span class="n">h2</span> <span class="p">{</span>
                <span class="n">max_d</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">max_d</span><span class="p">,</span> <span class="n">d</span><span class="p">);</span>
                <span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">(</span>
        <span class="n">max_d</span><span class="p">,</span>
        <span class="n">r</span><span class="nf">.into_iter</span><span class="p">()</span>
            <span class="nf">.enumerate</span><span class="p">()</span>
            <span class="nf">.filter</span><span class="p">(|(</span><span class="n">_</span><span class="p">,</span> <span class="n">d</span><span class="p">)|</span> <span class="o">*</span><span class="n">d</span> <span class="o">==</span> <span class="n">max_d</span><span class="p">)</span>
            <span class="nf">.map</span><span class="p">(|(</span><span class="n">i</span><span class="p">,</span> <span class="n">_</span><span class="p">)|</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">max_d</span><span class="p">)</span>
            <span class="nf">.collect</span><span class="p">(),</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="manacher-算法">Manacher 算法</h3>

<p>同样介绍参考<a href="/algs/StringDP.html">串上DP</a>的相关章节</p>

<h4 id="rust-实现-3">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// return d1</span>
<span class="k">fn</span> <span class="nf">find_sub_palindromes_manacher_odd</span><span class="p">(</span><span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">d1</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">pl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">pr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">n</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pr</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">j</span> <span class="o">=</span> <span class="n">pl</span> <span class="o">+</span> <span class="n">pr</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span>

            <span class="n">r</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">d1</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">pr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">while</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">-</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
            <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">r</span><span class="p">]</span>
        <span class="p">{</span>
            <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">d1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>

        <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">pr</span> <span class="p">{</span>
            <span class="n">pr</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">pl</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">d1</span>
<span class="p">}</span>

<span class="cd">/// return d2</span>
<span class="k">fn</span> <span class="nf">find_sub_palindromes_manacher_even</span><span class="p">(</span><span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">d2</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span> <span class="c1">// actual value from 1..n-1</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">pl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">pr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">n</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pr</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">j</span> <span class="o">=</span> <span class="n">pl</span> <span class="o">+</span> <span class="n">pr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

            <span class="n">r</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">d2</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">pr</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">while</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">-</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span>
            <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
        <span class="p">{</span>
            <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">d2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>

        <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">pr</span> <span class="p">{</span>
            <span class="n">pr</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">pl</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">r</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">d2</span>
<span class="p">}</span>

<span class="k">pub</span> <span class="k">fn</span> <span class="nf">find_sub_palindromes_manacher</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">d1</span> <span class="o">=</span> <span class="nf">find_sub_palindromes_manacher_odd</span><span class="p">(</span><span class="n">chars</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">d2</span> <span class="o">=</span> <span class="nf">find_sub_palindromes_manacher_even</span><span class="p">(</span><span class="n">chars</span><span class="p">);</span>

    <span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="统一实现">统一实现<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup><sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup></h4>

<p>另外有一种借助字符串构造，利用求奇数轴的单个函数求 $d_1$ 和 $d_2$ 的方法。</p>

<p>这种方法可以这么理解，把原字符串 $s$ 的每个空隙都替换成一个固定字母，比如 <code class="language-plaintext highlighter-rouge">'#'</code> ，这样偶数轴的情况就可以由 <code class="language-plaintext highlighter-rouge">'#'</code> 字符为对称轴的奇数轴回文得到。</p>

<p><strong>举例：</strong></p>

<p>对于原串 <code class="language-plaintext highlighter-rouge">s='abaabaa'</code> ，长度 $n=7$ 。</p>

<p>将空隙替换为字符 <code class="language-plaintext highlighter-rouge">'#'</code> 后，得到 <code class="language-plaintext highlighter-rouge">s1='a#b#a#a#b#a#a'</code> 长度变为 $2n-1 = 13$ 。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">VALUE\ID</th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
      <th>10</th>
      <th>11</th>
      <th>12</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">$s$</td>
      <td>a</td>
      <td>b</td>
      <td>a</td>
      <td>a</td>
      <td>b</td>
      <td>a</td>
      <td>a</td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td style="text-align: center">$s’$</td>
      <td>a</td>
      <td>#</td>
      <td>b</td>
      <td>#</td>
      <td>a</td>
      <td>#</td>
      <td>a</td>
      <td>#</td>
      <td>b</td>
      <td>#</td>
      <td>a</td>
      <td>#</td>
      <td>a</td>
    </tr>
    <tr>
      <td style="text-align: center">$d_1’$</td>
      <td>1</td>
      <td>1</td>
      <td>3</td>
      <td>1</td>
      <td>2</td>
      <td>6</td>
      <td>2</td>
      <td>1</td>
      <td>5</td>
      <td>1</td>
      <td>2</td>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <td style="text-align: center">$d_1$</td>
      <td>1</td>
      <td> </td>
      <td>2</td>
      <td> </td>
      <td>1</td>
      <td> </td>
      <td>1</td>
      <td> </td>
      <td>2</td>
      <td> </td>
      <td>1</td>
      <td> </td>
      <td>1</td>
    </tr>
    <tr>
      <td style="text-align: center">$d_2$</td>
      <td>-</td>
      <td>0</td>
      <td> </td>
      <td>0</td>
      <td> </td>
      <td>3</td>
      <td> </td>
      <td>0</td>
      <td> </td>
      <td>0</td>
      <td> </td>
      <td>1</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>我们可以发现 $d_1’$ 与 $d_1$ 、$d_2$ 有这样的对应关系：</p>

<p>$d_1$ 上的字符对应着 $s’$ 上那些本就属于 $s$ 的字符，分别在 $0,\ 2,\ 4,\ \dots,\ 2i$ ，它的值相比于原来，除了作为轴的那个点外，每额外有一个对称的点，也就额外增加一个插入符 <code class="language-plaintext highlighter-rouge">'#'</code> ，因此可以得到：</p>

\[d_1[i] = \lfloor {(d_1'[2i] + 1)}/ {2} \rfloor\]

<p>$d_2$ 上的字符对应着 s’ 上的 <code class="language-plaintext highlighter-rouge">'#'</code> ，表示它本来应该是 $s$ 上的字符的空隙，分别在 $1,\ 3,\ 5,\ \dots,\ 2i-1$ <sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup>，而 $s’$ 上的值恰好就应该是原来 $s$ 上的两倍，因此可以得到：</p>

\[d_2[i] = d_1'[2i-1] / 2\]

<h4 id="rust-实现-4">Rust 实现</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">find_sub_palindromes_manacher_unify</span><span class="p">(</span>
    <span class="n">chars</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">char</span><span class="p">],</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">();</span>

    <span class="k">let</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">chars2</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="sc">'#'</span><span class="p">;</span> <span class="n">n2</span><span class="p">];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="k">in</span> <span class="n">chars</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">chars2</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">*</span><span class="n">c</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">d21</span> <span class="o">=</span> <span class="nf">find_sub_palindromes_manacher_odd</span><span class="p">(</span><span class="o">&amp;</span><span class="n">chars2</span><span class="p">);</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">d1</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">d2</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">n</span><span class="p">];</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">in</span> <span class="n">d21</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="n">d1</span><span class="p">[</span><span class="n">i</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">d2</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="补充为回文串">补充为回文串</h2>

<p>给定一个串，增加一个最小的前缀，使其变为一个回文。</p>

<p><a href="https://leetcode.com/problems/shortest-palindrome/description/">题目</a></p>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.6/0214_shortest_palindrome/py0214">源代码</a></p>

<h3 id="破题">破题</h3>

<p>考虑构建后作为回文的新串与原串的关系，由于要求最小的前缀，那么原串肯定应该至少占据这个回文的右半部分还多一个点，最多占据全部，也就是原串本身就是回文串，这时不需要添加任何前缀。</p>

<p>然后我们可以发现，原串某个前缀因此也应该是一个回文，至少说第一个字符肯定构成长度为 $1$ 的奇数轴回文，此时就是原串占据构造后的回文串部分最少的情况，如果能找到原串属于回文的前缀里最长的那一个，那么显然把那个前缀后面的字符取反后加到前缀上，就能得到一个最小的构造回文。</p>

<h3 id="一般性方法">一般性方法</h3>

<p>可以采用朴素地 $O(n^2)$ 的算法，或者前面介绍的 $O(n)$ 地求取所有本质不同子串的方法，然后寻找同时是前缀的最长回文子串，除此之外这里特别介绍一个利用回文反转相同的性质，通过构造字符串利用 KMP 前缀函数求解的方法。<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup></p>

<h3 id="构造串kmp">构造串+KMP</h3>

<p>回文就是反转后仍然等于原串，那么如果把原串和原串的反转拼接在一起，那么原来是前缀里最长回文的那部分，就会构新串成前后缀相等的情况，长度就是也就是 KMP 前缀数组里 $\pi[n-1]$ 标识的。</p>

<p>有一点需要注意，这里假设得是原串的真前缀是回文，而原串本身不能是回文，否则求解前缀数组的时候就会出现前后缀重叠的情况，可以在构造连接原串和原串的反串时，在中间加一个字母表外的字符，确保不会出现前后缀重叠的情况，比如给定的字母表是小写字母，那就可以加一个 <code class="language-plaintext highlighter-rouge">'#'</code> 。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:3" role="doc-endnote">
      <p>对于朴素串哈希来说，也可以求解本质不同回文串，这里缩小问题是为了方便引出下面的 DP 版串哈希算法 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>以该位置为对称轴 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p>https://oi-wiki.org/string/hash/#%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>https://cp-algorithms.com/string/manacher.html#working-with-parities <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>https://oi-wiki.org/string/manacher/#%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86 <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>注意，按照我们前面的规定， $d_2$ 采取得是插入序，它的有效值是从 $1$ 开始取的 <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>但是这道题的测试数据非常宽松，反而是朴素算法的性能最好 <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;algs&quot;]" /><summary type="html"><![CDATA[前言]]></summary></entry><entry><title type="html">串上DP</title><link href="/algs/StringDP.html" rel="alternate" type="text/html" title="串上DP" /><published>2023-07-01T00:00:00+08:00</published><updated>2023-07-01T00:00:00+08:00</updated><id>/algs/StringDP</id><content type="html" xml:base="/algs/StringDP.html"><![CDATA[<h2 id="前言">前言</h2>

<p>总结一系列在字符串上通过动态规划实现渐进最优的算法。</p>

<p>为了形式化描述定义以下几个概念：</p>

<p><strong>朴素算法：</strong> 不使用 DP 思想，暴力比较的算法。</p>

<p><strong>匹配：</strong> 符合算法要求的一个子串，一般追踪地是最右边的一个匹配。</p>

<p><strong>模式串：</strong> 作为算法运行目标的串，有时候相对于其他子串，也叫它母串。</p>

<p>同时：</p>

<ol>
  <li>用 $n$ 表示母串的长度；</li>
  <li>用 $i_0$ 表示追踪的（最右）匹配所属的坐标，用 $s[l..r]$ 它所代表的子串。</li>
</ol>

<h2 id="z-函数">Z 函数</h2>

<p>后缀函数，母串与（真）后缀子串的前缀相等的部分。</p>

<p><strong>特别规定：</strong> $z[0] = 0$</p>

<p><strong>举例：</strong></p>

\[\begin{array}{l}
\text{patstr}: s[0..6]=\text{abcabca}\\
&amp;- &amp;z[0] = 0\\
\text{suffix}[1]= s[1.. 6]=\text{bcabca} &amp;\varnothing &amp;z[1] = 0\\
\text{suffix}[2]=s[2..6]=\text{cabca} &amp;\varnothing &amp;z[2]=0\\
\text{suffix}[3]=s[3..6]=\text{abca} &amp;abca &amp;z[3]=4\\
\text{suffix}[4]=s[4..6]=\text{bca} &amp;\varnothing &amp;z[4]=0\\
\text{suffix}[5]=s[5..6]=\text{ca} &amp;\varnothing &amp;z[5]=0\\
\text{suffix}[6]=s[6..6]=\text{a} &amp;a &amp;z[6]=1\\
\end{array}\]

<p><strong>形式化表示：</strong></p>

<p>$z[i] = \displaystyle \max_{k=0..i} {k: s[0.. k-1]=s[i..i+k-1]}$</p>

<p><strong>DP过程：</strong></p>

<p>寻找最右边的匹配，这里就应该是最右边的，与母串前缀相等的子串。</p>

<p>这个子串必然是之前的位置 $i_0$ 计算过的一个匹配，它的范围是 $s[i_0..r]$ ，首先确保了当前位置 $i$ 不会落到它的左边，这时如果发现 $i &lt; r$ ，那么根据匹配的性质 $s[i_0..r]=s[0..r-i_0]$ ，就有：</p>

<p>$s[i..r]=s[r-i_0-(r-i)..r-i_0]=s[i-i_0..r-i_0]$ ，这样可以利用 $z[i-i_0]$ ：</p>

<ol>
  <li>如果 $z[i-i_0] \lt r-i+1$，那么实际上 $z[i]$ 就是等于 $z[i-i_0]$ ，因为它们不仅与母串前缀相等的部分是一样的，与母串前缀不相等的失配字符也是一样的；</li>
  <li>如果 $z[i-i_0] \geqslant r-i+1$，那么z[i] 可以知道大于等于 $r-i+1$ ，之后可以遂行朴素算法逐字符匹配。</li>
</ol>

<p><strong>复杂度分析：</strong></p>

<p>对每个位置 $i$ 运用朴素算法进行比较时，最多有 $1$ 次字符失配，在此之间的比较结果都是字符匹配，而每一次字符匹配都会使得最右匹配的 $r$ 加一，而 $r$ 不会超过 $n$ ，这样实际上总共的字符比较次数是 $O(n)$ 。</p>

<h2 id="kmp-前缀函数">KMP 前缀函数</h2>

<p>前缀函数，子串（真）前缀与子串后缀相等的部分。</p>

<p><strong>特别规定：</strong> $\pi[0] = 0$</p>

<p><strong>举例：</strong></p>

\[\begin{array}{l}
\text{patstr}: s[0..6]=\text{abcabca}\\
 &amp;- &amp;\pi[0] = 0\\
\text{prefix}[1]= s[0..1]=\text{ab} &amp;\varnothing &amp;\pi[1] = 0\\
\text{prefix}[2]=s[0..2]=\text{abc} &amp;\varnothing &amp;\pi[2]=0\\
\text{prefix}[3]=s[0..3]=\text{abca} &amp;a &amp;\pi[3]=1\\
\text{prefix}[4]=s[0..4]=\text{abcab} &amp;ab &amp;\pi[4]=2\\
\text{prefix}[5]=s[0..5]=\text{abcabc} &amp;abc &amp;\pi[5]=3\\
\text{prefix}[6]=s[0..6]=\text{abcabca} &amp;abca &amp;\pi[6]=4\\
\end{array}\]

<p><strong>形式化表示：</strong></p>

<p>$z[i] = \displaystyle \max_{k=0..i} {k: s[0.. k-1]=s[i-(k-1)..i]}$</p>

<p>和上面 Z-函数比较，可以发现，它俩一个与模式串的前缀做比较，不过一个比较得是后缀的前缀，而另一个是前缀的后缀，这种相似性可能就是Z-函数被叫做拓展KMP的原因。</p>

<p><strong>DP过程：</strong></p>

<p>这里的最右匹配是最右边的，与前缀相等的后缀子串，实际上也就是前一个位置的相等后缀，即 $i_0=i-1$ ，</p>

<p>记 $\pi[i-1]$ 为 $\pi_0^{(0)}$，则根据 $\pi$ 函数的性质，有 $s[0..\pi_0-1]=s[i_0-\pi_0+1..i_0]$ ，并且 $\pi[i] \leqslant \pi[i-1] + 1 = \pi_0+1$ ，</p>

<p>当 $s[i]=\pi_0$ 时，$\pi[i]$ 取到最大值 $\pi_0+1$ ，否则寻找下一个可能匹配，但是我们不能简单地缩小长度，因为比较的<strong>“基”发生了变化</strong>，KMP 前缀函数比通常其他串上 DP 更难想的点在于，它的失败匹配并不是一个简单过程，而是<strong>递归</strong>的，下一个可能的 $\pi_0^{(n)}$ 是从当前长度 $\pi_0^{(n-1)}$ 计算出的：$\pi_0^{(n)} = \pi[\pi_0^{(n-1)}-1]\ (n \geqslant 1)$ 。</p>

<p>如此这般，直到找到一个匹配，或者发现没有匹配。</p>

<p><strong>复杂度分析：</strong></p>

<p>求解每个位置 $i$ 的 $\pi[i]$ 时，最多有一次字符匹配，而每一次字符失配都会使得最右匹配的长度减少 $1$；同时匹配的长度一次最多增加 $1$ ，因此字符比较次数是 $O(n)$ 。</p>

<h2 id="串哈希找最长回文">串哈希找最长回文</h2>

<p>前缀函数，作为回文串的后缀部分。</p>

<p><strong>背景：</strong></p>

<p>使用串哈希的方法<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> 寻找模式串中最长的回文串。</p>

<p><strong>举例：</strong></p>

\[\begin{array}{l}
\text{patstr}: s[0..6]=\text{abaabaa}\\
\text{prefix}[0]= s[0..0]=\text{a}&amp;a &amp;R[0]=1\\
\text{prefix}[1]= s[0..1]=\text{ab} &amp;b &amp;R[1]=1\\
\text{prefix}[2]=s[0..2]=\text{aba} &amp;aba &amp;R[2]=3\\
\text{prefix}[3]=s[0..3]=\text{abaa} &amp;aa &amp;R[3]=2\\
\text{prefix}[4]=s[0..4]=\text{abaab} &amp;baab &amp;R[4]=4\\
\text{prefix}[5]=s[0..5]=\text{abaaba} &amp;abaaba &amp;R[5]=6\\
\text{prefix}[6]=s[0..6]=\text{abaabaa} &amp;aa &amp;R[6]=2\\
\end{array}\]

<p><strong>形式化表示：</strong></p>

<p>$R[i] = \displaystyle \max_{k=0..i} {k: s[i-(k-1)..i]\ \in \text{Palindrome}}$</p>

<p><strong>DP过程：</strong></p>

<p>和 KMP 前缀数组的计算非常类似，而且更简单，首先最右匹配是前一个位置的后缀上的最长回文，$i_0=i-1$ 。</p>

<p>记 $R[i-1]$ 为 $R_0$ ，不管是奇数回文还是偶数回文，总有 $R[i] \leqslant R_0 + 2$ ，然后遂行朴素算法从长度为 $R_0 + 2$ 开始的后缀子串开始检查，如果不是回文，就一步步缩小长度直到 $1$ <sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<p><strong>复杂度分析：</strong></p>

<p>每一轮，回文检查成功最多一次，而检查如果失败，每失败一次就减少 $1$ ；同时 $R$ 每轮最多增加 $2$ ，这样暴力匹配的次数仍然是 $O(n)$ 。</p>

<h2 id="manacher-算法">Manacher 算法</h2>

<p>以某个位置为对称轴的回文半径，分奇数轴和偶数轴两种情况，分别用 $d_1$ 和 $d_2$ 表示 。</p>

<p><strong>特别规定：</strong></p>

<ol>
  <li>奇数回文的半径包含轴点本身，因此最小长度为 1；</li>
  <li>由于偶数回文的轴是两点间的空而不是点，因此这里规定空的坐标表示是它后面点的坐标，也就是和插入序<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>一样，这样 $d_2[0]$ 就是未定义的，不妨规定 $d_2[0]=0$ ，$0$ 也是偶数回文的最小长度。</li>
</ol>

<p><strong>背景：</strong></p>

<p>求解所有本质不同的回文串</p>

<p><strong>举例：</strong></p>

\[\begin{array}{l}
\text{patstr}: s[0..6]=\text{abaabaa}\\
\\
\texttt{Odd:}\\
s[0]=\text{a}&amp;a &amp;d_1[0]=1\\
s[1]=\text{aba} &amp;aba &amp;d_1[1]=2\\
s[2]=\text{ababa} &amp;a &amp;d_1[2]=1\\
s[3]=\text{abaabaa} &amp;a &amp;d_1[3]=1\\
s[4]=\text{aabaa} &amp;aba &amp;d_1[4]=2\\
s[5]=\text{baa} &amp;a &amp;d_1[5]=1\\
s[6]=\text{a} &amp;a &amp;d_1[6]=1\\
\\ 
\texttt{Even:}\\
&amp;- &amp;d_2[0]=0\\
s[1]=\text{a-b} &amp;\varnothing &amp;d_2[1]=0\\
s[2]=\text{ab-aa} &amp;\varnothing &amp;d_2[2]=0\\
s[3]=\text{aba-aba} &amp;abaaba &amp;d_2[3]=3\\
s[4]=\text{baa-baa} &amp;\varnothing &amp;d_2[4]=0\\
s[5]=\text{ab-aa} &amp;\varnothing &amp;d_2[5]=0\\
s[6]=\text{a-a} &amp;aa &amp;d_2[6]=1\\
\end{array}\]

<p><strong>形式化表示：</strong></p>

<p>$d_1[i] = \displaystyle \max_{k=0..i} {k: s[i-(k-1)..i+k-1]\ \in \text{Palindrome}}$</p>

<p>$d_2[i] = \displaystyle \max_{k=0..i} {k: s[i-k..i+k-1]\ \in \text{Palindrome}}$</p>

<p><strong>DP过程：</strong></p>

<p>类似于Z-函数的过程，最右匹配是最右边的回文半径，如果 $i &lt; r$ ，由于肯定有 $i &gt; i_0$ ，那么根据回文串的性质：</p>

<ol>
  <li>轴的两侧是对称的；</li>
  <li>对称的两边交换位置，仍然是对称的</li>
</ol>

<p>因此有对称的两个子串</p>

<p>$s[i..r] \leftrightarrow s[l..l+r-i]$</p>

<p>对奇数轴：$d_1[i]$ 初始值为 $\min(d_1[l+r-i], r-i+1)$ ；</p>

<p>对偶数轴：关于空的对称，采取插入序，$d_2[i]$ 初始值为 $\min(d_2[l+r-i+1], r-i+1)$</p>

<p>然后逐个字符比较，直到匹配或者字符串长度耗尽。</p>

<p><strong>复杂度分析：</strong></p>

<p>每轮的字符对称匹配最多失败一次，而每成功一次， $r$ 就要增加 $1$ ；而 $r$ 最多增加到 $n-1$ ，因此字符比较复杂度是 $O(n)$ 。</p>

<h2 id="概念澄清">概念澄清</h2>

<h3 id="后缀树组sa">后缀树组（SA）</h3>

<p>后缀函数，串所有后缀的排名。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>给模式串所有前缀建立滚动式哈希 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>长度为 $1$ 的串此时必然是回文 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>在一个有序向量上搜索某个元素，如果没有相等元素，就返回一个位置，使得如果在这个位置插入被搜索值后仍能维持向量有序，这里简称为插入序 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;algs&quot;]" /><summary type="html"><![CDATA[前言]]></summary></entry><entry><title type="html">串哈希</title><link href="/algs/StringHash.html" rel="alternate" type="text/html" title="串哈希" /><published>2023-06-26T00:00:00+08:00</published><updated>2023-06-26T00:00:00+08:00</updated><id>/algs/StringHash</id><content type="html" xml:base="/algs/StringHash.html"><![CDATA[<h2 id="概念基础">概念基础</h2>

<p>字符串哈希是从 <a href="https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm">Rabin-Karp 算法 (1987)</a> 衍生出来的，用于解决基于字符串子串比较问题的一种思路。</p>

<p>RK 算法使用了一个简单的多项式滚动哈希算法<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>，对于任意子串 $\text{substr}[l..r]$ ，它的哈希值可以由两端对应的前缀字符串       $\text{substr}[0..l-1]$ 和 $\text{substr}[0..r]$ 的哈希值计算得到，也就是说如果提前计算了字符串所有前缀的哈希，那么它的任意子串的哈希都可以在常量时间计算得到。</p>

<p>同时作为滚动哈希，每个前缀 $\text{substr}[0..i]$ 的哈希也可以由子前缀 $\text{substr}[0..i-1]$ 直接计算得出，这样就可以在 $O(n)$ 的时间计算出所有前缀的哈希，并用 $O(1)$ 的时间做子串的比较。</p>

<p>下面介绍这个哈希算法：</p>

<h3 id="哈希算法">哈希算法<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup><sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></h3>

<p>对于串 $s$</p>

\[\begin{array}{l}
\text{hash}(s) &amp;= s[0]\cdot p^0 + s[1] \cdot p^1 + s[2] \cdot p^2 + ... + s[n-1] \cdot p^{n-1} \pmod m \\
&amp;= \displaystyle\sum_{i=0}^{n-1} s[i] \cdot p^i \pmod m
\end{array}\]

<p>其中， $n$ 为串的长度，$m$ 和 $p$ 是根据需要挑选的一个正整数。</p>

<p>一般可以令 $p$ 为字母表（alphabet）大小的质数，比如对于只包含小写字母的串，$p=31$；对于大小写字母，$p=53$ 。</p>

<p>$m$ 作为模除运算的除数，需要是一个很大的整数，因为两个随机字符串发生哈希碰撞的概率 $\approx \frac{1}{m}$，可以取 $2^{64}$ ，这样做的好处是用 <code class="language-plaintext highlighter-rouge">u64</code> 保存数值时不需要显式地进行取模运算，等待数值自然溢出即可，但这样必然存在方法，用来构造无关于 $p$ 的产生哈希碰撞的字符串，更好的方法是选取一个大素数，比如 $10^9 + 9$ ，这个大小的素数有一个好处，就是确保 <code class="language-plaintext highlighter-rouge">u64</code> 类型足以容纳计算结果而不会溢出<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup></p>

<p>$s[i]$ 是在位置 $i$ 处字符的值，这个值是字符在字母表里的排名，而一般空串的哈希值为 $0$ ，因此字符的排名最好从 $1$ 开始，来避免字母表里最小字符与与空串的值相同。</p>

<p>这样串 $s$ 的前缀可以通过 $\text{hash}(s[0..i]) = \text{hash}(s[0..i-1]) \cdot p + s[i] \mod m$ 计算得到，而任意子串的哈希值则有如下的关系：</p>

\[p^{l}\cdot \text{hash}(s[l..r]) \pmod m =\text{hash}(s[0..r]) - \text{hash}(s[0..l-1]) \pmod m\]

<p>这样需要再额外计算一步 $p^l$ 的<a href="https://cp-algorithms.com/algebra/module-inverse.html">模乘逆元</a>，可以通过<a href="/algs/GCD.html">拓展欧几里得算法</a>，以 $p^l$ 和 $m$ 为参数直接求解模乘逆元。</p>

<p>可以通过换一下多项式滚动哈希的计算方向，来避免求解模乘逆元这一步操作。</p>

<h4 id="msb-型算法">MSB 型算法</h4>

<p>可以认为串 $s$ 的哈希是一个由串上每个字符组成的 $p$ 进制的数字，前面的计算方法是小端序（LSB，Least Significant Bit)</p>

<p>而我们更改为大端序（MSB，Most Significant Bit）：</p>

\[\begin{array}{l}
\text{hash}(s) &amp;= s[0]\cdot p^{n-1} + s[1] \cdot p^{n-2} + ... + s[n-1] \cdot p^{0} \pmod m \\
&amp;= \displaystyle\sum_{i=0}^{n-1} s[i] \cdot p^{n-1-i} \pmod m
\end{array}\]

<p>这样子串哈希与前缀哈希就有如下的关系：</p>

\[\text{hash}(s[l..r]) =\text{hash}(s[0..r]) - \text{hash}(s[0..l-1]) \cdot p^{r-(l-1)} \pmod m\]

<p>另外在计算前缀时，MSB 需要从后开始遍历串。</p>

<p><em>对子串哈希的查询总让人想起树状数组（BIT）里面用前缀来计算区间的类似操作</em></p>

<h3 id="哈希碰撞">哈希碰撞</h3>

<p>用哈希来做串的映射时总要考虑哈希碰撞，也就是串不同但哈希值相同的情况，在广泛地基于概率的算法与数据结构<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>中也习惯用假阳性（False Positive）来表示这种情况。</p>

<h4 id="大量比较">大量比较</h4>

<p>在考虑到串的比较次数较多时，比如 $10^6$ 个不同字符串的两两比较，会有 $10^{6+6} = 10^{12}$ 个情况，这时 $10^9$ 的碰撞空间就不够用了，这时总是会发生碰撞。</p>

<p>这时就必须扩大碰撞空间，而单一地增大 $m$ ，然后对应地把计算的数据类型从 <code class="language-plaintext highlighter-rouge">u64</code> 提升到 <code class="language-plaintext highlighter-rouge">u128</code> 乃至专门的 Big Int 类型，实在不怎么可取，不如独立计算几组哈希值，采用不同的 $p$ 或者 $m$ ，比如两组，就可以让碰撞空间扩大到 $(10^9)^2=10^{18}$ 从而满足前面的情况，当然还可以有更多的组数来得到更大的哈希空间。</p>

<h4 id="绝对正确">绝对正确</h4>

<p>如果对判断的结果要求绝对正确，可以在哈希判等的情况下再用原始的文本串进行比较。</p>

<h2 id="实现">实现</h2>

<p>将用 Rust 来实现字符串哈希，并在此基础上实现 Rabin-Karp 算法。</p>

<h3 id="字母表">字母表</h3>

<p>在计算串哈希的时候，首先要考虑串的构成字符的字母表，这涉及字符值的计算与 $p$ 的选取。</p>

<p>于是我们可以把字母表抽象出来，规定它应该有：</p>

<ol>
  <li>查询给定字符的排名，<code class="language-plaintext highlighter-rouge">rank</code> ，排名用作计算哈希时字符的值，从 $1$ 开始；</li>
  <li>给出字母表的大小，<code class="language-plaintext highlighter-rouge">len</code>；</li>
  <li>给出字母表大小对应的 $p$ ，<code class="language-plaintext highlighter-rouge">prime</code></li>
</ol>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">trait</span> <span class="n">AlphaBet</span> <span class="p">{</span>
    <span class="cd">/// None for char out of scope of the alphabet</span>
    <span class="k">fn</span> <span class="nf">rank</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span> <span class="nb">char</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">u64</span><span class="o">&gt;</span><span class="p">;</span>
    <span class="k">fn</span> <span class="nf">len</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span><span class="p">;</span>
    <span class="k">fn</span> <span class="nf">prime</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u64</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>定义几个字母表实例作为示范：</p>

<p>不得不称赞 Rust 原生的模式匹配语法让代码干净简洁许多！</p>

<h4 id="数字字母">数字字母</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">struct</span> <span class="n">DigitsLetters</span><span class="p">;</span>

<span class="k">impl</span> <span class="n">AlphaBet</span> <span class="k">for</span> <span class="n">DigitsLetters</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">rank</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span> <span class="nb">char</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">u64</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="nf">Some</span><span class="p">(</span><span class="k">match</span> <span class="n">c</span> <span class="p">{</span>
            <span class="sc">'0'</span><span class="o">..=</span><span class="sc">'9'</span> <span class="k">=&gt;</span> <span class="n">c</span> <span class="k">as</span> <span class="nb">u64</span> <span class="o">-</span> <span class="sc">'0'</span> <span class="k">as</span> <span class="nb">u64</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
            <span class="sc">'A'</span><span class="o">..=</span><span class="sc">'Z'</span> <span class="k">=&gt;</span> <span class="n">c</span> <span class="k">as</span> <span class="nb">u64</span> <span class="o">-</span> <span class="sc">'A'</span> <span class="k">as</span> <span class="nb">u64</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span>
            <span class="sc">'a'</span><span class="o">..=</span><span class="sc">'z'</span> <span class="k">=&gt;</span> <span class="n">c</span> <span class="k">as</span> <span class="nb">u64</span> <span class="o">-</span> <span class="sc">'a'</span> <span class="k">as</span> <span class="nb">u64</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">26</span><span class="p">,</span>
            <span class="n">_</span> <span class="k">=&gt;</span> <span class="k">return</span> <span class="nb">None</span>
        <span class="p">})</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">len</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
        <span class="mi">26</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">10</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">prime</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u64</span> <span class="p">{</span>
        <span class="mi">79</span> <span class="c1">// 0x4F</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="常见中文">常见中文</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// Common CJK + CJK Symbols and Punctuation + ASCII</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">CommonChinese</span><span class="p">;</span>

<span class="k">impl</span> <span class="n">AlphaBet</span> <span class="k">for</span> <span class="n">CommonChinese</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">rank</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span> <span class="nb">char</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">u64</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">c</span> <span class="k">as</span> <span class="nb">u64</span><span class="p">;</span>

        <span class="nf">Some</span><span class="p">(</span><span class="k">match</span> <span class="n">c</span> <span class="p">{</span>
            <span class="mi">0</span><span class="o">..=</span><span class="mi">127</span> <span class="k">=&gt;</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>  <span class="c1">// ASCII</span>
            <span class="mi">0x3000</span><span class="o">..=</span><span class="mi">0x303F</span> <span class="k">=&gt;</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">0x3000</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">128</span><span class="p">,</span>  <span class="c1">// CJK Symbols and Punctuation</span>
            <span class="mi">0x4E00</span><span class="o">..=</span><span class="mi">0x9FFF</span> <span class="k">=&gt;</span> <span class="n">c</span> <span class="o">-</span> <span class="mi">0x4E00</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">128</span> <span class="o">+</span> <span class="mi">0x40</span><span class="p">,</span>  <span class="c1">// Common CJK</span>
            <span class="n">_</span> <span class="k">=&gt;</span> <span class="k">return</span> <span class="nb">None</span><span class="p">,</span>
        <span class="p">})</span>
    <span class="p">}</span>

    <span class="cd">/// 21184</span>
    <span class="k">fn</span> <span class="nf">len</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
        <span class="p">(</span><span class="mi">0x9FFF</span> <span class="o">-</span> <span class="mi">0x4E00</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">127</span> <span class="o">-</span> <span class="mi">0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">0x303F</span> <span class="o">-</span> <span class="mi">0x3000</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">prime</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u64</span> <span class="p">{</span>
        <span class="mi">21187</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="计算哈希">计算哈希</h3>

<h4 id="多组哈希">多组哈希</h4>

<p>$p$ 与字母表的大小是绑定的，选择用一组不同的 $m$ 来独立计算多组哈希。</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">M</span><span class="p">:</span> <span class="p">[</span><span class="nb">u64</span><span class="p">;</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mi">1_000_000_000</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span>
    <span class="mi">1_000_000_000</span> <span class="o">+</span> <span class="mi">7</span>
<span class="p">];</span>


<span class="nd">macro_rules!</span> <span class="n">check_n</span> <span class="p">{</span>
    <span class="p">()</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">N</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">||</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">{</span>
            <span class="nd">unimplemented!</span><span class="p">(</span><span class="s">"N should be in [1, 2], however {N} found"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="一次性计算">一次性计算</h4>

<p>比如用在模式串的计算上</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">macro_rules!</span> <span class="n">check_n</span> <span class="p">{</span>
    <span class="p">()</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">N</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">||</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">{</span>
            <span class="nd">unimplemented!</span><span class="p">(</span><span class="s">"N should be in [1, 2], however {N} found"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">};</span>
<span class="p">}</span>


<span class="k">pub</span> <span class="k">fn</span> <span class="n">rolling_hash</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">N</span><span class="p">:</span> <span class="nb">usize</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="n">s</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">,</span>
    <span class="n">alphabet</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">dyn</span> <span class="n">AlphaBet</span><span class="p">,</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">[</span><span class="nb">u64</span><span class="p">;</span> <span class="n">N</span><span class="p">],</span> <span class="n">ComputeRollingHashError</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nd">check_n!</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">nacc</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">N</span><span class="p">];</span>

    <span class="k">if</span> <span class="n">s</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">nacc</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="n">alphabet</span><span class="nf">.prime</span><span class="p">();</span>

    <span class="k">for</span> <span class="n">c</span> <span class="k">in</span> <span class="n">s</span><span class="nf">.chars</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">alphabet</span>
            <span class="nf">.rank</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
            <span class="nf">.ok_or</span><span class="p">(</span><span class="nn">ComputeRollingHashError</span><span class="p">::</span><span class="nf">CharOutOfScope</span><span class="p">(</span><span class="n">c</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>

        <span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">N</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">nacc</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="n">nacc</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">nacc</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">nacc</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">*</span> <span class="n">p</span> <span class="o">%</span> <span class="n">M</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="o">%</span> <span class="n">M</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nf">Ok</span><span class="p">(</span><span class="n">nacc</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="前缀计算">前缀计算</h4>

<p>比如用在文本串的计算上</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// [msb] polynomial rolling computing</span>
<span class="nd">#[repr(transparent)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">PrefixRollingHash</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">N</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="mi">1</span><span class="o">&gt;</span>
<span class="p">{</span>
    <span class="n">nprefix</span><span class="p">:</span> <span class="p">[</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">u64</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">N</span><span class="p">],</span>
<span class="p">}</span>

<span class="cd">/// String Prefix (MSB) Plynomial Rolling Hash</span>
<span class="k">impl</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">N</span><span class="p">:</span> <span class="nb">usize</span><span class="o">&gt;</span> <span class="n">PrefixRollingHash</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span>
        <span class="n">s</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">,</span>
        <span class="n">alphabet</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">dyn</span> <span class="n">AlphaBet</span><span class="p">,</span>
    <span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">,</span> <span class="n">ComputeRollingHashError</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="nd">check_n!</span><span class="p">();</span>

        <span class="c1">// Create chars</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">chars</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

        <span class="c1">// Init chars</span>
        <span class="k">for</span> <span class="n">c</span> <span class="k">in</span> <span class="n">s</span><span class="nf">.chars</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">chars</span><span class="nf">.push</span><span class="p">(</span>
                <span class="n">alphabet</span>
                    <span class="nf">.rank</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
                    <span class="nf">.ok_or</span><span class="p">(</span><span class="nn">ComputeRollingHashError</span><span class="p">::</span><span class="nf">CharOutOfScope</span><span class="p">(</span><span class="n">c</span><span class="p">))</span><span class="o">?</span><span class="p">,</span>
            <span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// Create nprefix</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">nprefix</span><span class="p">:</span> <span class="p">[</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">u64</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="nf">zeroed</span><span class="p">()</span> <span class="p">};</span>
        <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="n">alphabet</span><span class="nf">.prime</span><span class="p">();</span>

        <span class="c1">// Init nprefix</span>
        <span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">N</span> <span class="p">{</span>
            <span class="k">let</span> <span class="k">mut</span> <span class="n">prefix</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">chars</span><span class="nf">.len</span><span class="p">()];</span>

            <span class="k">if</span> <span class="o">!</span><span class="n">chars</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
                <span class="n">prefix</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">chars</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>

                <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">chars</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
                    <span class="n">prefix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">prefix</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">p</span> <span class="o">%</span> <span class="n">M</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">%</span> <span class="n">M</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="n">nprefix</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">prefix</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="nf">Ok</span><span class="p">(</span><span class="k">Self</span> <span class="p">{</span> <span class="n">nprefix</span> <span class="p">})</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="子串查询">子串查询</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">N</span><span class="p">:</span> <span class="nb">usize</span><span class="o">&gt;</span> <span class="n">PrefixRollingHash</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="n">query</span><span class="o">&lt;</span><span class="n">R</span><span class="p">:</span> <span class="n">RangeBounds</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">range</span><span class="p">:</span> <span class="n">R</span><span class="p">,</span> <span class="n">npows</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[[</span><span class="nb">u64</span><span class="p">;</span> <span class="n">N</span><span class="p">]])</span> <span class="k">-&gt;</span> <span class="p">[</span><span class="nb">u64</span><span class="p">;</span> <span class="n">N</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">let</span> <span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span> <span class="o">=</span> <span class="nd">parse_range!</span><span class="p">(</span><span class="n">range</span><span class="p">,</span> <span class="k">self</span><span class="nf">.len</span><span class="p">());</span>

        <span class="k">let</span> <span class="k">mut</span> <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">N</span><span class="p">];</span>

        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">N</span> <span class="p">{</span>
                <span class="n">res</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nprefix</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">r</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">N</span> <span class="p">{</span>
                <span class="c1">// coefficent</span>
                <span class="k">let</span> <span class="n">coeff</span> <span class="o">=</span> <span class="n">npows</span><span class="p">[</span><span class="n">r</span> <span class="o">-</span> <span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)][</span><span class="n">n</span><span class="p">];</span>

                <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nprefix</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">r</span><span class="p">];</span>
                <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="k">self</span><span class="py">.nprefix</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
                <span class="o">*</span> <span class="n">coeff</span>
                <span class="o">%</span> <span class="n">M</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>

                <span class="n">res</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="p">{</span> <span class="n">M</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">b</span> <span class="o">-</span> <span class="n">a</span><span class="p">)</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="p">};</span>
            <span class="p">}</span>
        <span class="p">};</span>

        <span class="n">res</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="应用">应用</h2>

<h3 id="查询回文串">查询回文串</h3>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>注意区别于同作者的另一个更正式的多项式滚动哈希算法，<a href="https://en.wikipedia.org/wiki/Rabin_fingerprint">Rabin fingerprint</a> ，据说有一些 RK 算法的实现在内部使用了这个算法而不是原始提出的更简单的那一个。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>https://cp-algorithms.com/string/string-hashing.html <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>https://oi-wiki.org/string/hash/ <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>$2^{64} \approx 2^4 \cdot (10^3)^6 = 16 \cdot 10^{18} $ <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>比如前面<a href="/algs/BM.html">Boyer-Moore算法</a>里介绍过的Bloom Filter <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;algs&quot;]" /><summary type="html"><![CDATA[概念基础]]></summary></entry><entry><title type="html">0850 - Rectangle Area II</title><link href="/oth/LeetCode0850.html" rel="alternate" type="text/html" title="0850 - Rectangle Area II" /><published>2023-06-11T00:00:00+08:00</published><updated>2023-06-11T00:00:00+08:00</updated><id>/oth/LeetCode0850</id><content type="html" xml:base="/oth/LeetCode0850.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/rectangle-area-ii/description/">问题描述</a></p>

<h2 id="破题">破题</h2>

<p>要求矩形覆盖的面积，在做了<a href="/oth/LeetCode0218.html">天际线问题</a>和<a href="/oth/LeetCode0391.html">完美矩形问题</a>后，这个问题的思路就看得非常清楚了，只需要沿着某一轴扫描，计算在另一轴上覆盖的长度，计算的时机是遇到每个矩形的入边或者出边的（重复的不算），这样拆分成一个个小矩形，就得到了覆盖的面积和。</p>

<p>于是问题的关键，不妨以 $x$ 轴为扫描方向，就在于如何动态地计算 $y$ 轴上的覆盖长度。</p>

<p>由于本题的限制相当宽松，建筑的数量最多只到 $200$ ，因此可以允许其他非最优解的多种复杂度的方法。</p>

<h2 id="解">解①：</h2>

<p>在 $y$ 轴，对每个矩形竖直的边，$[y_1, y_2]$ ，把边的开始位置 $y_1$，标记 $1$ ，它的结束位置标记 $-1$ ，把这些标记按照 $y$ 轴上的坐标进行排序，对这些标记进行累加，最后的和一定是 $0$ ，它的变化过程一定是从 $0$ 到正值再到 $0$ ，每一次归 $0$ 就意味着一条线段的结束，把这些分离的线段累加起来，这就得到了此时的 $y$ 轴上的线段和。</p>

<p>由于每次扫描都需要排序并重新装填 $y$ 坐标，因此总的时间复杂度为 $O(n\cdot (n\text{log}n + n)) = O(n^2\text{log}n)$ 。</p>

<p>这有可以优化的地方，如果提前把 $y$ 轴离散化，就可以直接做坐标-排名的映射，就不需要每次都排序 $y$ 坐标，于是就只剩下装填所有的 $y$ 坐标的成本，时间复杂度就可以降低为 $O(n^2)$ 。</p>

<h2 id="解-1">解②：</h2>

<p>更直接地，把 $x$ 轴坐标也离散化，与离散化地 $y$ 轴坐标构成二维数组，每个矩形（的 $4$ 个顶点）在这个二维数组上映射，然后扫描这个二维数组计算面积。</p>

<p>时间复杂度是离散化+矩形映射+统计： $O(n\text{log}n + n + n^2)$  = $O(n^2)$</p>

<h2 id="解-2">解③：</h2>

<p>上述地算法之所以不够优，关键在于每扫描到一个位置，就要用至少 $O(n)$ 的时间复杂度装填 $y$ 坐标，而拿到这道题目后，第一眼可以看出，我们应该可以用前面的分段树或者树状数组来在 $O(\text{log}n)$ 的时间内装填 $y$ 坐标。</p>

<p>这看起来非常简单，但是，但是，在开始写的时候，才发现这道题并不如想象中那么简单，它有别于<a href="/oth/LeetCode0218.html">天际线那道题</a>的关键是建筑都是连续的，不存在从半空中开始涨起，而矩形没有这个性质，它在 $y$ 轴上的排列可能是不连续的。</p>

<h3 id="线段的取消">线段的取消</h3>

<p>这样的话似乎只能在 y 轴空间上存储整个线段，但是如何在矩形结束的时候准确撤销它所属的线段呢？ 但是分段树可以按照区间<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> 额外存储该区间边的数量，这样在新的边加入时，更新的时候把它覆盖的区间的边的数量增 $1$ ，取消边的时候就把区间的边的数量减 $1$ ，在二分区间向下更新的时候，如果某个区间的边数不为零，那么这个区间的值就是它代表的整个线段的长度，否则，就要由子区间的值求和得到。</p>

<p>这样分段树全区间的值，就是 $y$ 轴上线段的总长度。</p>

<h3 id="区间的表示">区间的表示</h3>

<p>以为解决了边的添加和取消就完事大吉了吗？，不，还有很大的问题：如果分段树上每个点对应某个坐标，就像习惯得那样，这就面临坐标划分与区间划分二者不一致的问题，对于用坐标表示的边来说，坐标是可重叠的，而分段树的区间划分两端是不可重叠的。举例说，对于 [0, 2] 的边的划分，按照坐标来说就是 $[0, 1]$ 和 $[1, 2]$ ，而按照区间划分则为 $[0,1]$ 和 $[2, 2]$ 。</p>

<p>这实在是不好解决，因为分段树上 $[a, b]$ 的区间不能表示为坐标上 $[a, b]$ 的边，必须寻找一个新的与分段树区间划分一致地表示。于是我们可以考虑坐标可以重叠，但是区间不会重叠，可以定义标号 $i$ 表示坐标从 $[i, i+1]$ 的区间，这样分段树上的 $[a, b]$ 就不再表示坐标 $[a, b]$ 的边，而是标号 $a$~$b$ ，一共 $b-a+1$ 个单位区间的和，这样问题就解决了！</p>

<h3 id="取模与数据类型">取模与数据类型</h3>

<p>最后由于计算结果过大，需要对结果取模，其中模数给得是 $10^9+7$ ，是个质数，这有什么说法吗？</p>

<p>质数取模得可以想到的是中国剩余定理，如果一个一元线性同余<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>方程的模数两两互质，那么这个方程是有解的而且可以构造出来，但它显然和我们这里没什么关系，事实上可以取任何一个大小符合条件的数，至于质不质地也没什么关系。</p>

<p>至于取模运算本身倒是（对我们有用的）运算性质：</p>

\[\begin{array}{l}
&amp;a \cdot b\pmod{N} &amp;\equiv (a\pmod{N} \cdot b\pmod{N})\pmod{N}\\
&amp;(a+b) \pmod{N} &amp;\equiv (a\pmod{N} + b\pmod{N})\pmod{N}
\end{array}{}\]

<p>另外需要吐槽得是本题 LeetCode 习惯性地给出的 <code class="language-plaintext highlighter-rouge">i32</code> 类型就不适当，它在例题上，在对结果取模前就数值溢出了，你必须手动把它提到更大的整数类型上。</p>

<h3 id="统一排序">统一排序</h3>

<p>由于在每个不同坐标的矩形的进入或离开时都要计算面积，因此像之前把入边和出边分开保存排序的做法<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>会让代码显得很冗余吗，于是直接把 $x$ 坐标、入边出边的类型标记和 $y$ 轴两坐标，构成一个 $4$ 元组，统一排序。</p>

<h3 id="rust-实现">Rust 实现<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup></h3>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.3/0850_rectangle_area_2">源代码</a></p>

<h4 id="分段树">分段树</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">SegmentTree</span> <span class="p">{</span>
    <span class="cd">/// (coverd edges number, range_sum)</span>
    <span class="n">data</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="nb">usize</span><span class="p">,</span> <span class="nb">usize</span><span class="p">)</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">y_end</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span>
    <span class="n">y_data</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">,</span>
<span class="p">}</span>


<span class="cd">/// DFS 型</span>
<span class="k">impl</span> <span class="n">SegmentTree</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">y_data</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">y_end</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="n">SegmentTree</span> <span class="p">{</span>
            <span class="c1">// numbers of interval units</span>
            <span class="n">data</span><span class="p">:</span> <span class="nd">vec!</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">(</span><span class="n">y_end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">],</span>
            <span class="n">y_end</span><span class="p">,</span>
            <span class="n">y_data</span><span class="p">,</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">mark</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="nf">.update_</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">self</span><span class="py">.y_end</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">mark</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">update_</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">tl</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">tr</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">mark</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">tl</span> <span class="o">+</span> <span class="n">tr</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">let</span> <span class="n">sub_len</span> <span class="o">=</span> <span class="p">(</span><span class="n">mid</span> <span class="o">-</span> <span class="n">tl</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

        <span class="k">let</span> <span class="n">i_lf</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">let</span> <span class="n">i_rh</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">sub_len</span> <span class="k">as</span> <span class="nb">usize</span><span class="p">;</span>

        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="n">tl</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="n">tr</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">mark</span> <span class="p">{</span>
                <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="na">.0</span> <span class="o">=</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="na">.0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="na">.0</span> <span class="o">=</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="na">.0</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">self</span><span class="nf">.update_</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">r</span><span class="p">),</span> <span class="n">tl</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">i_lf</span><span class="p">,</span> <span class="n">mark</span><span class="p">);</span>
            <span class="k">self</span><span class="nf">.update_</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">l</span><span class="p">),</span> <span class="n">r</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tr</span><span class="p">,</span> <span class="n">i_rh</span><span class="p">,</span> <span class="n">mark</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="na">.0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="na">.1</span> <span class="o">=</span> <span class="p">(</span><span class="k">self</span><span class="py">.y_data</span><span class="p">[</span><span class="n">tr</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="k">self</span><span class="py">.y_data</span><span class="p">[</span><span class="n">tl</span><span class="p">])</span> <span class="k">as</span> <span class="nb">usize</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="n">tl</span> <span class="o">!=</span> <span class="n">tr</span> <span class="p">{</span>
            <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="na">.1</span> <span class="o">=</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i_lf</span><span class="p">]</span><span class="na">.1</span> <span class="o">+</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i_rh</span><span class="p">]</span><span class="na">.1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="na">.1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">sum</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i32</span> <span class="p">{</span>
        <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="na">.1</span> <span class="k">as</span> <span class="nb">i32</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>其中 <code class="language-plaintext highlighter-rouge">y_end</code> 指得是原坐标的排名，加一后的值，表示总共排名的数量或者总的不同 $y$ 坐标的数量。内部构成的区间数应该比总的不同 $y$ 坐标数少一。</p>

<h4 id="完整过程">完整过程</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::{</span>
    <span class="nn">cmp</span><span class="p">::{</span><span class="n">max</span><span class="p">,</span> <span class="n">min</span><span class="p">},</span>
    <span class="nn">collections</span><span class="p">::{</span><span class="n">BTreeSet</span><span class="p">,</span> <span class="n">HashMap</span><span class="p">},</span>
<span class="p">};</span>

<span class="k">const</span> <span class="n">M</span><span class="p">:</span> <span class="nb">u64</span> <span class="o">=</span> <span class="mi">1_000_000_000</span> <span class="o">+</span> <span class="mi">7</span><span class="p">;</span>

<span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">rectangles</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i32</span> <span class="p">{</span>
    <span class="k">let</span> <span class="p">(</span><span class="n">y_data</span><span class="p">,</span> <span class="n">y_map</span><span class="p">)</span> <span class="o">=</span> <span class="nf">build_y_discrezation</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rectangles</span><span class="p">);</span>

    <span class="k">let</span> <span class="n">lines</span> <span class="o">=</span> <span class="nf">build_x_lines</span><span class="p">(</span><span class="n">rectangles</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y_map</span><span class="p">);</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">tree</span> <span class="o">=</span> <span class="nn">SegmentTree</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">y_data</span><span class="p">,</span> <span class="n">y_map</span><span class="nf">.len</span><span class="p">());</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">x0</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="na">.0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">ty</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">y2</span><span class="p">)</span> <span class="k">in</span> <span class="n">lines</span> <span class="p">{</span>

        <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="n">x0</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tree</span><span class="nf">.sum</span><span class="p">();</span>

            <span class="n">acc</span> <span class="o">+=</span> <span class="p">((</span><span class="n">x</span> <span class="o">-</span> <span class="n">x0</span><span class="p">)</span> <span class="k">as</span> <span class="nb">u64</span> <span class="o">*</span> <span class="n">h</span> <span class="k">as</span> <span class="nb">u64</span><span class="p">)</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>

            <span class="n">x0</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">tree</span><span class="nf">.update</span><span class="p">(</span><span class="n">y1</span><span class="p">,</span> <span class="n">y2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ty</span><span class="p">);</span>

    <span class="p">}</span>

    <span class="p">(</span><span class="n">acc</span> <span class="k">as</span> <span class="nb">u64</span> <span class="o">%</span> <span class="n">M</span><span class="p">)</span> <span class="k">as</span> <span class="nb">i32</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">build_y_discrezation</span><span class="p">(</span><span class="n">rectangles</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">set</span> <span class="o">=</span> <span class="nn">BTreeSet</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="k">for</span> <span class="n">rec</span> <span class="k">in</span> <span class="n">rectangles</span> <span class="p">{</span>
        <span class="n">set</span><span class="nf">.insert</span><span class="p">(</span><span class="n">rec</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
        <span class="n">set</span><span class="nf">.insert</span><span class="p">(</span><span class="n">rec</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="p">(</span>
        <span class="n">set</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">()</span><span class="nf">.collect</span><span class="p">(),</span>
        <span class="n">set</span><span class="nf">.into_iter</span><span class="p">()</span>
            <span class="nf">.enumerate</span><span class="p">()</span>
            <span class="nf">.map</span><span class="p">(|(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)|</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">i</span> <span class="k">as</span> <span class="nb">usize</span><span class="p">))</span>
            <span class="nf">.collect</span><span class="p">(),</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">build_x_lines</span><span class="p">(</span>
    <span class="n">rectangles</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span><span class="p">,</span>
    <span class="n">y_map</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">usize</span><span class="o">&gt;</span><span class="p">,</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nb">usize</span><span class="p">,</span> <span class="nb">usize</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">lines</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">rectangles</span><span class="nf">.len</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>

    <span class="k">for</span> <span class="n">rec</span> <span class="k">in</span> <span class="n">rectangles</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">x1</span> <span class="o">=</span> <span class="n">rec</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">let</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">rec</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
        <span class="k">let</span> <span class="n">y1</span> <span class="o">=</span> <span class="o">*</span><span class="n">y_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rec</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="nf">.unwrap</span><span class="p">();</span>
        <span class="k">let</span> <span class="n">y2</span> <span class="o">=</span> <span class="o">*</span><span class="n">y_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rec</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span><span class="nf">.unwrap</span><span class="p">();</span>

        <span class="n">lines</span><span class="nf">.push</span><span class="p">((</span><span class="n">x1</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">y2</span><span class="p">));</span>  <span class="c1">// 0  true for enter</span>
        <span class="n">lines</span><span class="nf">.push</span><span class="p">((</span><span class="n">x2</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">y2</span><span class="p">));</span> <span class="c1">// 1  false for exit</span>
    <span class="p">}</span>

    <span class="n">lines</span><span class="nf">.sort_unstable</span><span class="p">();</span>

    <span class="n">lines</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>用树状数组好像也不好解决这个问题 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>同余就是余数相同的意思 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>为了理论上减少排序的负担 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>就像前面吐槽用 Python 主要是因为它足够慢，足够缺少优化，这个 Rust 实现运行基本在 0-2 ms，内存 2.x MB，很难说有测量比较的意义 <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">1851 - Minimum Level to Include</title><link href="/oth/LeetCode1851.html" rel="alternate" type="text/html" title="1851 - Minimum Level to Include" /><published>2023-06-11T00:00:00+08:00</published><updated>2023-06-11T00:00:00+08:00</updated><id>/oth/LeetCode1851</id><content type="html" xml:base="/oth/LeetCode1851.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/minimum-interval-to-include-each-query/description/">问题描述</a></p>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.4/1851_minimum_interval/rs1851">源代码</a></p>

<h2 id="破题">破题</h2>

<h3 id="一般性思路">一般性思路</h3>

<p>看起来像是区间上的查询问题，而分段树总是可以解决这样的问题。</p>

<p>用区间的长度表示一个区间的值，重叠部分取最小值，离散化区间坐标后建树，这些都是容易的，但问题是，对每次查询的值又要对它使用哪个或哪些离散化的坐标的查询结果进行表示？</p>

<h4 id="不可能的在线查询">不可能的在线查询</h4>

<p>一开始我的考虑是如果对查询的值在区间坐标上做二分查找，如果成功的话就用那个找到的坐标在树上查询，如果失败的话就比较左右两个临近坐标的是区间的结束还是开始，但是这样也无法正确解决问题，因为左右两个坐标是区间取得到的，它的结果可能是多个区间重叠得到的，而在查询值的位置其中决定最小值的区间可能已经结束了，此时查询值就取到了错误的值。</p>

<p>只能把区间值和查询值一并离散化，然后直接查询，详见解①。</p>

<h3 id="离线思路">离线思路</h3>

<p>在实现完分段树版本后就在考虑，有没有树状数组的实现？ 按照一般思路这是难以想象的，但是这个过程中意识到既然所有的查询都是提前已知的，那么完全可以做离线查询，如果把查询值进行排序，按照顺序进行扫描，<strong>这不就完全回到了<a href="/oth/LeetCode0218.html">天际线问题</a> ?！</strong> 而这个思路也就是扫描线的思路。</p>

<p>对应有树状数组的解② 和 优先级队列的解③</p>

<h2 id="解">解①：</h2>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::{</span>
    <span class="nn">cmp</span><span class="p">::{</span><span class="n">max</span><span class="p">,</span> <span class="n">min</span><span class="p">},</span>
    <span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="n">intervals</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="n">queries</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">data</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">intervals</span>
        <span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.cloned</span><span class="p">()</span>
        <span class="nf">.flatten</span><span class="p">()</span>
        <span class="nf">.chain</span><span class="p">(</span><span class="n">queries</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.cloned</span><span class="p">())</span>
        <span class="nf">.collect</span><span class="p">();</span>

    <span class="n">data</span><span class="nf">.sort_unstable</span><span class="p">();</span>
    <span class="n">data</span><span class="nf">.dedup</span><span class="p">();</span>

    <span class="k">let</span> <span class="n">data_map</span><span class="p">:</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">data</span>
        <span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.cloned</span><span class="p">()</span>
        <span class="nf">.enumerate</span><span class="p">()</span>
        <span class="nf">.map</span><span class="p">(|(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)|</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
        <span class="nf">.collect</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">tree</span> <span class="o">=</span> <span class="nn">SegmentTree</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">data_map</span><span class="nf">.len</span><span class="p">());</span>

    <span class="k">for</span> <span class="n">interval</span> <span class="k">in</span> <span class="n">intervals</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">l</span> <span class="o">=</span> <span class="n">interval</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">interval</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

        <span class="k">let</span> <span class="n">val</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">let</span> <span class="n">l</span> <span class="o">=</span> <span class="o">*</span><span class="n">data_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">l</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
        <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="o">*</span><span class="n">data_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>

        <span class="n">tree</span><span class="nf">.update</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">with_capacity</span><span class="p">(</span><span class="n">queries</span><span class="nf">.len</span><span class="p">());</span>

    <span class="k">for</span> <span class="n">q</span> <span class="k">in</span> <span class="n">queries</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="n">data</span><span class="nf">.binary_search</span><span class="p">(</span><span class="o">&amp;</span><span class="n">q</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>

        <span class="k">let</span> <span class="n">res</span> <span class="o">=</span> <span class="n">tree</span><span class="nf">.query</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>

        <span class="k">if</span> <span class="n">res</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">ans</span><span class="nf">.push</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>

<span class="nd">macro_rules!</span> <span class="n">combine</span> <span class="p">{</span>
    <span class="p">(</span><span class="nv">$inplace</span><span class="p">:</span> <span class="n">expr</span><span class="p">,</span> <span class="nv">$val:expr</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nv">$val</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">*</span><span class="nv">$inplace</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">||</span> <span class="nv">$val</span> <span class="o">&lt;</span> <span class="o">*</span><span class="nv">$inplace</span><span class="p">)</span> <span class="p">{</span>
            <span class="o">*</span><span class="nv">$inplace</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="cd">/// DFS 型</span>
<span class="k">struct</span> <span class="n">SegmentTree</span> <span class="p">{</span>
    <span class="cd">/// range update</span>
    <span class="n">data</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">range_end</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">SegmentTree</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">range_end</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span>
            <span class="n">data</span><span class="p">:</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">range_end</span> <span class="o">*</span> <span class="mi">2</span><span class="p">],</span>
            <span class="n">range_end</span><span class="p">,</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">i32</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="nf">.update_</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">self</span><span class="py">.range_end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">update_</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">tl</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">tr</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">i32</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="n">tl</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="n">tr</span> <span class="p">{</span>
            <span class="nd">combine!</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">val</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">tl</span> <span class="o">+</span> <span class="n">tr</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">let</span> <span class="n">sub_len</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">tl</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

            <span class="k">let</span> <span class="n">i_lf</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">let</span> <span class="n">i_rh</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">sub_len</span><span class="p">;</span>

            <span class="nd">combine!</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i_lf</span><span class="p">],</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="nd">combine!</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i_rh</span><span class="p">],</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

            <span class="k">self</span><span class="nf">.update_</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">r</span><span class="p">),</span> <span class="n">tl</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">i_lf</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
            <span class="k">self</span><span class="nf">.update_</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">r</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tr</span><span class="p">,</span> <span class="n">i_rh</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">query</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i32</span> <span class="p">{</span>
        <span class="k">self</span><span class="nf">.query_</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">self</span><span class="py">.range_end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">query_</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">tl</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">tr</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i32</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="n">tl</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="n">tr</span> <span class="p">{</span>
            <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">tl</span> <span class="o">+</span> <span class="n">tr</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">let</span> <span class="n">sub_len</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">tl</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

            <span class="k">let</span> <span class="n">i_lf</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">let</span> <span class="n">i_rh</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">sub_len</span><span class="p">;</span>

            <span class="nd">combine!</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i_lf</span><span class="p">],</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="nd">combine!</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i_rh</span><span class="p">],</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

            <span class="k">let</span> <span class="n">lv</span> <span class="o">=</span> <span class="k">self</span><span class="nf">.query_</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">r</span><span class="p">),</span> <span class="n">tl</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">i_lf</span><span class="p">);</span>
            <span class="k">let</span> <span class="n">rv</span> <span class="o">=</span> <span class="k">self</span><span class="nf">.query_</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">r</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tr</span><span class="p">,</span> <span class="n">i_rh</span><span class="p">);</span>

            <span class="k">if</span> <span class="n">lv</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="n">rv</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">rv</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="n">lv</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nf">min</span><span class="p">(</span><span class="n">lv</span><span class="p">,</span> <span class="n">rv</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>这道题的输入数据和查询数据都有相当的规模，区间数量有 $10^5$ ，查询数量有 $10^7$，这对性能还是有一定要求的，</p>

<p>运行时间： $250$ ms</p>

<h2 id="解-1">解②：</h2>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="k">mut</span> <span class="n">intervals</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="n">queries</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="n">intervals</span><span class="nf">.sort_unstable</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">queries</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">usize</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">queries</span>
        <span class="nf">.into_iter</span><span class="p">()</span>
        <span class="nf">.enumerate</span><span class="p">()</span>
        <span class="nf">.map</span><span class="p">(|(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)|</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
        <span class="nf">.collect</span><span class="p">();</span>

    <span class="n">queries</span><span class="nf">.sort_unstable</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">data</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">queries</span>
        <span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.map</span><span class="p">(|</span><span class="n">x</span><span class="p">|</span> <span class="n">x</span><span class="na">.0</span><span class="p">)</span>
        <span class="nf">.chain</span><span class="p">(</span><span class="n">intervals</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.map</span><span class="p">(|</span><span class="n">v</span><span class="p">|</span> <span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
        <span class="nf">.collect</span><span class="p">();</span>

    <span class="n">data</span><span class="nf">.sort_unstable</span><span class="p">();</span>
    <span class="n">data</span><span class="nf">.dedup</span><span class="p">();</span>

    <span class="k">let</span> <span class="n">data_map</span><span class="p">:</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">usize</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">data</span>
        <span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.cloned</span><span class="p">()</span>
        <span class="nf">.enumerate</span><span class="p">()</span>
        <span class="nf">.map</span><span class="p">(|(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)|</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
        <span class="nf">.collect</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">bit</span> <span class="o">=</span> <span class="nn">FakeBIT</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">data_map</span><span class="nf">.len</span><span class="p">());</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">queries</span><span class="nf">.len</span><span class="p">()];</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">prev_q_raw</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">prev_ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">q_raw</span><span class="p">,</span> <span class="n">q_idx</span><span class="p">)</span> <span class="k">in</span> <span class="n">queries</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">prev_q_raw</span> <span class="o">==</span> <span class="n">q_raw</span> <span class="p">{</span>
            <span class="n">ans</span><span class="p">[</span><span class="n">q_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">prev_ans</span><span class="p">;</span>

            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="n">q</span> <span class="o">=</span> <span class="o">*</span><span class="n">data_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">q_raw</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>

        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">intervals</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">l</span> <span class="o">=</span> <span class="n">intervals</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
            <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">intervals</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>

            <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">q_raw</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">q_raw</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">bit</span><span class="nf">.add</span><span class="p">(</span><span class="o">*</span><span class="n">data_map</span><span class="nf">.get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">(),</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="n">suffix</span> <span class="o">=</span> <span class="n">bit</span><span class="nf">.suffix</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
        <span class="k">let</span> <span class="n">res</span> <span class="o">=</span> <span class="k">if</span> <span class="n">suffix</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span> <span class="n">suffix</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="o">-</span><span class="mi">1</span> <span class="p">};</span>

        <span class="n">ans</span><span class="p">[</span><span class="n">q_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>

        <span class="n">prev_q_raw</span> <span class="o">=</span> <span class="n">q_raw</span><span class="p">;</span>
        <span class="n">prev_ans</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>

<span class="nd">macro_rules!</span> <span class="n">combine</span> <span class="p">{</span>
    <span class="p">(</span><span class="nv">$inplace</span><span class="p">:</span> <span class="n">expr</span><span class="p">,</span> <span class="nv">$val:expr</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nv">$val</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">*</span><span class="nv">$inplace</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">||</span> <span class="nv">$val</span> <span class="o">&lt;</span> <span class="o">*</span><span class="nv">$inplace</span><span class="p">)</span> <span class="p">{</span>
            <span class="o">*</span><span class="nv">$inplace</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="nd">macro_rules!</span> <span class="n">range</span> <span class="p">{</span>
    <span class="p">(</span><span class="nv">$i:ident</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="p">(((</span><span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">as</span> <span class="nb">isize</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="p">((</span><span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">as</span> <span class="nb">isize</span><span class="p">))</span> <span class="k">as</span> <span class="nb">usize</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">FakeBIT</span> <span class="p">{</span>
    <span class="n">data</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">FakeBIT</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">range_end</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span>
            <span class="n">data</span><span class="p">:</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">range_end</span><span class="p">],</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="k">mut</span> <span class="n">i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">end</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span> <span class="n">addend</span><span class="p">:</span> <span class="nb">i32</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">loop</span> <span class="p">{</span>
            <span class="nd">combine!</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">addend</span><span class="p">);</span>

            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nd">range!</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">||</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">i</span> <span class="o">-=</span> <span class="nd">range!</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="cd">/// query i</span>
    <span class="k">fn</span> <span class="nf">suffix</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="k">mut</span> <span class="n">i</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i32</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">self</span><span class="py">.data</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
            <span class="nd">combine!</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">acc</span><span class="p">,</span> <span class="k">self</span><span class="py">.data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

            <span class="n">i</span> <span class="o">+=</span> <span class="nd">range!</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">acc</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>本实现对树状数组的活用的具体解释在<a href="/oth/LeetCode0218.html">天际线问题</a>的相关章节里。</p>

<p>运行时间：$115$ ms</p>

<h2 id="解-2">解③：</h2>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::{</span><span class="nn">collections</span><span class="p">::</span><span class="n">BinaryHeap</span><span class="p">,</span> <span class="nn">cmp</span><span class="p">::</span><span class="n">Reverse</span><span class="p">};</span>


<span class="k">pub</span> <span class="k">fn</span> <span class="nf">solve</span><span class="p">(</span><span class="k">mut</span> <span class="n">intervals</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="n">queries</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="n">intervals</span><span class="nf">.sort_unstable_by_key</span><span class="p">(|</span><span class="n">v</span><span class="p">|</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">queries</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">usize</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">queries</span>
        <span class="nf">.into_iter</span><span class="p">()</span>
        <span class="nf">.enumerate</span><span class="p">()</span>
        <span class="nf">.map</span><span class="p">(|(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)|</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
        <span class="nf">.collect</span><span class="p">();</span>

    <span class="n">queries</span><span class="nf">.sort_unstable</span><span class="p">();</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">ans</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="n">queries</span><span class="nf">.len</span><span class="p">()];</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">prev_q_raw</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">prev_ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">heap</span> <span class="o">=</span> <span class="nn">BinaryHeap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">q_raw</span><span class="p">,</span> <span class="n">q_idx</span><span class="p">)</span> <span class="k">in</span> <span class="n">queries</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">prev_q_raw</span> <span class="o">==</span> <span class="n">q_raw</span> <span class="p">{</span>
            <span class="n">ans</span><span class="p">[</span><span class="n">q_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">prev_ans</span><span class="p">;</span>

            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">intervals</span><span class="nf">.len</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="n">l</span> <span class="o">=</span> <span class="n">intervals</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
            <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">intervals</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>

            <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">q_raw</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>

            <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">q_raw</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">heap</span><span class="nf">.push</span><span class="p">(</span><span class="nf">PQE</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="nf">Reverse</span><span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)));</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="k">mut</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

        <span class="k">while</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="nf">PQE</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">v</span><span class="p">))</span> <span class="o">=</span> <span class="n">heap</span><span class="nf">.peek</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="o">*</span><span class="n">r</span> <span class="o">&gt;=</span> <span class="n">q_raw</span> <span class="p">{</span>
                <span class="n">res</span> <span class="o">=</span> <span class="n">v</span><span class="na">.0</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">heap</span><span class="nf">.pop</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="n">ans</span><span class="p">[</span><span class="n">q_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>

        <span class="n">prev_q_raw</span> <span class="o">=</span> <span class="n">q_raw</span><span class="p">;</span>
        <span class="n">prev_ans</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">ans</span>
<span class="p">}</span>


<span class="nd">#[derive(PartialEq,</span> <span class="nd">Eq,</span> <span class="nd">Ord)]</span>
<span class="k">struct</span> <span class="nf">PQE</span><span class="p">(</span><span class="nb">i32</span><span class="p">,</span> <span class="n">Reverse</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">);</span>

<span class="k">impl</span> <span class="nb">PartialOrd</span> <span class="k">for</span> <span class="n">PQE</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">partial_cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">other</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nn">std</span><span class="p">::</span><span class="nn">cmp</span><span class="p">::</span><span class="n">Ordering</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">self</span><span class="na">.1</span><span class="nf">.partial_cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">other</span><span class="na">.1</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>运行时间：$60$ ms ，beats 100%</p>

<h2 id="注解">注解</h2>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">0391 - Perfect Rectangle</title><link href="/oth/LeetCode0391.html" rel="alternate" type="text/html" title="0391 - Perfect Rectangle" /><published>2023-06-08T00:00:00+08:00</published><updated>2023-06-08T00:00:00+08:00</updated><id>/oth/LeetCode0391</id><content type="html" xml:base="/oth/LeetCode0391.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/perfect-rectangle/description/">问题描述</a></p>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.2/0391_perfect_rectangle">源代码</a></p>

<h2 id="破题">破题</h2>

<p>求一个完美覆盖的矩形，首先想到的就是通过面积比较进行判断，也就是所有矩形的最右、最上、最左、最下4个坐标构成的矩形的面积是否等于各小矩形的面积之和。但是只有面积的比较还不足以证明是“完美覆盖”，因为面积相等还包括空隙和重叠并存的情况，必须要确保小矩形之间没有空隙或者没有覆盖。</p>

<p>在面积相等的情况下，如果小矩形之间有空隙，则必然还存在重叠，反之有重叠必然也有空隙，因此只要能检查任意空隙或者重叠任意一项即可。</p>

<h2 id="解扫描线">解①：扫描线</h2>

<p>说到重叠，就可以回到经典的扫描线+分段树/树状数组的解决方案：可以扫描一个维度然后在另一个维度上建树，利用数据结构做区间更新后的区间查询，以观察是否有重叠的边。</p>

<p>比如可以扫描 $x$ 轴，在 $y$ 轴上建树，每扫描到一个小矩形 $[x, y, a, b]$，就把它在 $y$ 轴上的区间 $[y, b]$ 更新到树上，在这个过程中检查 $[y, b]$ 是否完全未被覆盖，如果未完全未覆盖，意思是当前扫描线位置存在重叠的边，直接返回 <code class="language-plaintext highlighter-rouge">false</code>；当这个小矩形结束时，再把 $[y, b]$ 的更新取消，就这样扫描到最后一个小矩形，如果都没问题，就说明不存在重叠的情况。</p>

<h3 id="区间闭合性">区间闭合性</h3>

<p>前面讲对于小矩形 $[x, y, a, b]$ 更新 $y$ 轴上的区间 $[y, b]$ ，但这是不准确的，因为对于完美矩形，小矩形紧挨着的情况是正确的<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">1</a></sup>而不是错误的，因此不能用两端闭合的区间表示，而需要用半闭半开区间，不妨用底部闭合顶部开放的区间<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">2</a></sup>，这样就是更新区间 $[y, b-1]$ 。</p>

<p>同样对于扫描线的 $x$ 轴来说，也需要半闭半开区间来容纳小矩形的边紧挨的情况。</p>

<h3 id="数据离散化和排序">数据离散化和排序</h3>

<p>照例，建树的那一轴，这里是 $y$ 轴，其上的数据需要离散化处理，但有点儿意外得是，给定的小矩形列表并没有按照任何一个轴来排序，这是什么用意呢，暗示了什么呢？暂且按下不表，我们这次要手动排序了。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sortedcontainers</span> <span class="kn">import</span> <span class="n">SortedList</span><span class="p">,</span> <span class="n">SortedSet</span>


<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isRectangleCover</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">rectangles</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">solve</span><span class="p">(</span><span class="n">rectangles</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">rectangles</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="n">y_data</span> <span class="o">=</span> <span class="n">SortedSet</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">rectangles</span><span class="p">:</span>
        <span class="n">y_data</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
        <span class="n">y_data</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>

    <span class="n">y_map</span> <span class="o">=</span> <span class="p">{</span> <span class="n">y</span><span class="p">:</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">y_data</span><span class="p">)}</span>

    <span class="c1"># ...
</span></code></pre></div></div>

<p>$x$ 轴也要排序，在计算小矩形面积之和的遍历过程中顺便进行在线地对矩形的竖边按照 $x$ 坐标排序，理论上应当比完整列表上的排序快，$x$ 坐标分为了小矩形的入边和出边，分别用 <code class="language-plaintext highlighter-rouge">ent</code> 和 <code class="language-plaintext highlighter-rouge">ex</code> 表示<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">3</a></sup>。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1"># ... def solve
</span>    
    <span class="n">area_sum</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">ent</span> <span class="o">=</span> <span class="n">SortedList</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">ex</span> <span class="o">=</span> <span class="n">SortedList</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">rectangles</span><span class="p">:</span>
        <span class="n">area_sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">b</span><span class="o">-</span><span class="n">y</span><span class="p">)</span>

        <span class="n">y</span> <span class="o">=</span> <span class="n">y_map</span><span class="p">[</span><span class="n">y</span><span class="p">]</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">y_map</span><span class="p">[</span><span class="n">b</span><span class="p">]</span>

        <span class="n">ent</span><span class="p">.</span><span class="n">add</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
        <span class="n">ex</span><span class="p">.</span><span class="n">add</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>

    <span class="k">del</span> <span class="n">y_map</span>
    
    <span class="c1"># ...
</span></code></pre></div></div>

<p>$x$ 轴和 $y$ 轴数据排序后就可以计算大矩形的面积，然后进行面积的比较</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1"># ... def solve
</span>
    <span class="n">min_x</span> <span class="o">=</span> <span class="n">ent</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">max_a</span> <span class="o">=</span> <span class="n">ex</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">min_y</span> <span class="o">=</span> <span class="n">y_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">max_b</span> <span class="o">=</span> <span class="n">y_data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="n">cover_area</span> <span class="o">=</span> <span class="p">(</span><span class="n">max_a</span> <span class="o">-</span> <span class="n">min_x</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">max_b</span> <span class="o">-</span> <span class="n">min_y</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">area_sum</span> <span class="o">!=</span> <span class="n">cover_area</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    
    <span class="c1"># ...
</span></code></pre></div></div>

<h3 id="解分段树">解⒈⒈：分段树</h3>

<p>分段树的如何赋值来表示一个区间的覆盖，这需要考虑。乍一看，好像只需要一个布尔类型的标记，赋值在对应的区间上就可以了，但是这样不能精确表示区间的覆盖程度，比如如果一个父区间下的某个子区间被覆盖了，那么这个父区间是被覆盖了还是没被覆盖？</p>

<p>于是（在更新的时候）我们使用区间的长度来赋值所覆盖区间，这样递归完成后向上更新父区间，到时候只要检查区间的值是否等于区间长度就可以判断该区间是否完全被覆盖，或者是否等于零，表示区间完全未被覆盖。</p>

<p>通过抛出异常传递区间存在重合的情况。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># ... def solve
</span>
    <span class="n">segtree</span> <span class="o">=</span> <span class="n">SegmentTree</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">y_data</span><span class="p">))</span>

    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">j_end</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">ent</span><span class="p">:</span>
        <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">j_end</span> <span class="ow">and</span> <span class="n">ex</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">:</span>
            <span class="n">segtree</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">ex</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">ex</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">segtree</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">return</span> <span class="bp">True</span>


<span class="k">class</span> <span class="nc">SegmentTree</span><span class="p">:</span>
    <span class="s">"""DFS型"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">range_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">marked</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">range_len</span> <span class="o">*</span> <span class="mi">2</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">range_len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">bool</span><span class="p">):</span>
        <span class="s">"""It would raise when try to mark an occupied position"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_update</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">tl</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">tr</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="n">range_len</span> <span class="o">=</span> <span class="n">tr</span> <span class="o">-</span> <span class="n">tl</span> <span class="o">+</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="n">tl</span> <span class="ow">and</span> <span class="n">r</span> <span class="o">==</span> <span class="n">tr</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">val</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">marked</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c1"># can't catch class don't inherrit from BaseException
</span>                <span class="c1"># however so what we could use except to catch
</span>                <span class="k">raise</span> <span class="s">"Occupied"</span>

            <span class="k">if</span> <span class="n">val</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">marked</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">range_len</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">marked</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">tl</span> <span class="o">+</span> <span class="n">tr</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">sub_l</span> <span class="o">=</span> <span class="p">(</span><span class="n">mid</span> <span class="o">-</span> <span class="n">tl</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">val</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">marked</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">range_len</span><span class="p">:</span>
                <span class="k">raise</span> <span class="s">"Occupied"</span>

            <span class="bp">self</span><span class="p">.</span><span class="n">_update</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">mid</span><span class="p">),</span> <span class="n">val</span><span class="p">,</span> <span class="n">tl</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">_update</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">l</span><span class="p">),</span> <span class="n">r</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">tr</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="n">sub_l</span><span class="p">)</span>

            <span class="bp">self</span><span class="p">.</span><span class="n">marked</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">marked</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">marked</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="n">sub_l</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="解树状数组">解⒈⒉：树状数组</h3>

<p>是对树状数组做区间更新后的区间查询，标记区间就是区间里的每个位置的值加一，区间取消标记就是区间里每个位置的值加负一，于是可以通过查询区间和是否为零来测试区间是否有覆盖的情况。</p>

<p>具体算法的公式<a href="/algs/FenwickTree.html">这里</a>的有关章节已有详细介绍，就不再赘述。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># ... def solve
</span>    <span class="n">cobit</span> <span class="o">=</span> <span class="n">CoBIT</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">y_data</span><span class="p">))</span>

    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">j_end</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">ent</span><span class="p">:</span>
        <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">j_end</span> <span class="ow">and</span> <span class="n">ex</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">:</span>
            <span class="n">cobit</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">ex</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">ex</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">cobit</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="n">cobit</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">return</span> <span class="bp">True</span>


<span class="k">class</span> <span class="nc">CoBIT</span><span class="p">:</span>
    <span class="s">"""Range Update &amp; Range Query"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">range_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">b1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">range_len</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">b2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">range_len</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="s">"""range add x for [l, r]"""</span>

        <span class="n">CoBIT</span><span class="p">.</span><span class="n">_add</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">b1</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
        <span class="n">CoBIT</span><span class="p">.</span><span class="n">_add</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">b1</span><span class="p">,</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="n">x</span><span class="p">)</span>

        <span class="n">CoBIT</span><span class="p">.</span><span class="n">_add</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">b2</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="p">(</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span>
        <span class="n">CoBIT</span><span class="p">.</span><span class="n">_add</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">b2</span><span class="p">,</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="n">r</span><span class="o">*</span><span class="n">x</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">prefix</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">prefix</span><span class="p">(</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">prefix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span> <span class="p">:</span><span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">CoBIT</span><span class="p">.</span><span class="n">_prefix</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">b1</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="n">i</span> <span class="o">-</span> <span class="n">CoBIT</span><span class="p">.</span><span class="n">_prefix</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">b2</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">_add</span><span class="p">(</span><span class="n">bit</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">bit</span><span class="p">):</span>
            <span class="n">bit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">x</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">_prefix</span><span class="p">(</span><span class="n">bit</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">acc</span> <span class="o">+=</span> <span class="n">bit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">i</span> <span class="o">-=</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">acc</span>
</code></pre></div></div>

<h2 id="解顶点计数">解②：顶点计数</h2>

<p>扫描线思路是常规做法，但是回到前面埋下的伏笔：给出的小矩形列表没有按照任何一个轴的方向排序，实际上存在着不需要扫描线加区间查询的数据结构的更Tricky的做法。</p>

<p>可以通过统计每个点的出现次数，判断是否存在小矩形重叠的情况。</p>

<p>在面积相等情况下，重叠与否的充分必要条件是：如果点位于大矩形的四角，那么它们只能出现 $1$ 次；如果位于边上，只能出现 $2$ 次；如果位于其他位置，也就是大矩形内部，那么只能出现 $2$ 或 $4$ 次。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>


<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isRectangleCover</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">rectangles</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">solve</span><span class="p">(</span><span class="n">rectangles</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">rectangles</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="n">vertexs</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">()</span>
    <span class="n">min_x</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">"inf"</span><span class="p">)</span>
    <span class="n">min_y</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">"inf"</span><span class="p">)</span>
    <span class="n">max_a</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">max_b</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">area_sum</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">rectangles</span><span class="p">:</span>
        <span class="n">min_x</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">min_x</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
        <span class="n">min_y</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">min_y</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="n">max_a</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_a</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
        <span class="n">max_b</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_b</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>

        <span class="n">vertexs</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">vertexs</span><span class="p">[(</span><span class="n">a</span><span class="p">,</span> <span class="n">y</span><span class="p">)]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">vertexs</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">b</span><span class="p">)]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">vertexs</span><span class="p">[(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)]</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">area_sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">b</span><span class="o">-</span><span class="n">y</span><span class="p">)</span>

    <span class="n">cover_area</span> <span class="o">=</span> <span class="p">(</span><span class="n">max_a</span> <span class="o">-</span> <span class="n">min_x</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">max_b</span> <span class="o">-</span> <span class="n">min_y</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">area_sum</span> <span class="o">!=</span> <span class="n">cover_area</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">x0</span><span class="p">,</span> <span class="n">y0</span><span class="p">),</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">vertexs</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">x0</span> <span class="ow">in</span> <span class="p">(</span><span class="n">min_x</span><span class="p">,</span> <span class="n">max_a</span><span class="p">)</span> <span class="ow">and</span> <span class="n">y0</span> <span class="ow">in</span> <span class="p">(</span><span class="n">min_y</span><span class="p">,</span> <span class="n">max_b</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">elif</span> <span class="n">x0</span> <span class="ow">in</span> <span class="p">(</span><span class="n">min_x</span><span class="p">,</span> <span class="n">max_a</span><span class="p">)</span> <span class="ow">or</span> <span class="n">y0</span> <span class="ow">in</span> <span class="p">(</span><span class="n">min_y</span><span class="p">,</span> <span class="n">max_b</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">c</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>

    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<p>这里面 <code class="language-plaintext highlighter-rouge">Counter</code> 这个类比较甜，它实际上起到了一个提供默认值的默认数组的功能<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">4</a></sup>。</p>

<h2 id="解微积分">解③：微积分</h2>

<p>可以用曲面积分相关知识简化求解过程，事实上所有计算几何相关的问题总有数学上的解决思路，但由于这并不是我们专注的领域，就不介绍了。</p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:2" role="doc-endnote">
      <p>唯一正确的 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>当然也可以选择顶部闭合、底部开放，这没什么区别 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>用 <code class="language-plaintext highlighter-rouge">ex</code> 而不是 <code class="language-plaintext highlighter-rouge">exit</code> 主要是为了避免和 Python 关键字冲突，（这个冲突）会造成代码高亮上的问题 <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>我是真的服了，在习惯了 Rust 风格库的事无巨细，我从来发现 Python 的库提供的 API 如此匮乏，<code class="language-plaintext highlighter-rouge">DefaultDict</code> 居然只提供c传默认值构造方法的参数而没有提供传一个固定默认值的参数 <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry><entry><title type="html">0218 - The Skyline Problem</title><link href="/oth/LeetCode0218.html" rel="alternate" type="text/html" title="0218 - The Skyline Problem" /><published>2023-06-01T00:00:00+08:00</published><updated>2023-06-01T00:00:00+08:00</updated><id>/oth/LeetCode0218</id><content type="html" xml:base="/oth/LeetCode0218.html"><![CDATA[<h2 id="题干">题干</h2>

<p><a href="https://leetcode.com/problems/the-skyline-problem/description/">问题描述</a></p>

<p><a href="https://github.com/minghu6/leet-code/tree/v0.1.1/0218_the_skyline_problem">源代码</a></p>

<h2 id="破题">破题</h2>

<p>这道题的关键是能观察到：关键点是顺着 $x$ 轴的方向，当剪影的高度发生变化时确定的。</p>

<p>这样，如果能确定每个 $x$ 坐标对应的建筑物的最大高度，就能求出关键点。</p>

<h2 id="解分段树">解①：分段树</h2>

<p>最直接的一个思路是把建筑列表里的每栋建筑的高度在它所属区间上标识出，这样就可以查询每个 $x$ 坐标的最大高度。</p>

<p>分段树（Segment Tree）就适用于这种情况：考虑分段树的里的批量更新，既支持批量累加，又支持批量赋值，而批量赋值就适用于当前这种给定区间标记高度的任务。</p>

<p>需要注意：</p>

<ol>
  <li>由于建筑间区间重叠，因此批量赋值和查询时要取（建筑高度）的最大值，作为剪影的代表；</li>
  <li>建筑的右边缘的高度是无效的，也就是对于左右端的坐标分别为 $l$ 和 $r$ 的建筑，它的高度有效范围为 $[l, r)$</li>
</ol>

<h3 id="python-实现">Python 实现<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></h3>

<p><strong>分段树</strong></p>

<p>使用<a href="/algs/SegmentTree.html">DFS 型的分段树</a>来节省一半的内存。</p>

<p>由于实际上我们只使用批量赋值的信息，而不需要原信息，因此直接省略了树本身，只保留更新的结构。</p>

<p>有一点， Python 的函数调用是真的消耗时间，在 Rust 里面你可以随意地使用函数包装，实际上调用的成本几乎都可以被优化掉，因此可以基于 API 的人体工程学考虑，用 Cursor 类别处理“分段”信息，但在 Python 上，这种频繁调用地包装函数会导致运行时间变为 3 倍，于是我们不使用包装，而是把参数就地直接展开。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SegmentTree</span><span class="p">():</span>
    <span class="s">"""DFS Layout,
    left: i+1,
    right: 2+2l
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="c1"># Just ignore self.tree
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">data_len</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">data_len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">assign</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""Override the smaller value"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_assign</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_assign</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">tl</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">tr</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="n">tl</span> <span class="ow">and</span> <span class="n">r</span> <span class="o">==</span> <span class="n">tr</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">val</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">tl</span> <span class="o">+</span> <span class="n">tr</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">subl</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">tl</span> <span class="o">+</span> <span class="mi">1</span>

            <span class="bp">self</span><span class="p">.</span><span class="n">_assign</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">r</span><span class="p">),</span> <span class="n">tl</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">_assign</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">l</span><span class="p">),</span> <span class="n">r</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tr</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">subl</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s">"""query [l, r] -&gt; (x, h)"""</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_query</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">tl</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">tr</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="n">tl</span> <span class="ow">and</span> <span class="n">r</span> <span class="o">==</span> <span class="n">tr</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">tl</span> <span class="o">+</span> <span class="n">tr</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">subl</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">tl</span> <span class="o">+</span> <span class="mi">1</span>

            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span><span class="p">],</span>
                <span class="p">)</span>

                <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">subl</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">subl</span><span class="p">],</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span><span class="p">],</span>
                <span class="p">)</span>

                <span class="bp">self</span><span class="p">.</span><span class="n">assigned</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

            <span class="n">lv</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_query</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">r</span><span class="p">),</span> <span class="n">tl</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">rv</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_query</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">l</span><span class="p">),</span> <span class="n">r</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tr</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">subl</span><span class="p">)</span>

            <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">lv</span><span class="p">,</span> <span class="n">rv</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>数据离散化</strong></p>

<p>在测试里有专门的 $x$ 坐标很大的建筑物，如果直接按照 $x$ 坐标建树，性能将是不可接受的，需要进行离散化处理。</p>

<p>我们可以取建筑两端的 $x$ 坐标，用它们的排名压缩坐标轴。需要注意一点，如果用向量和下标的方式储存坐标与排名的对应关系，需要跳过重复的元素，否会产生同一坐标不同排名的情况，从而妨碍正确结果的求出。</p>

<p><strong>完整过程</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">bisect</span> <span class="kn">import</span> <span class="n">bisect_right</span>


<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">getSkyline</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buildings</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">return</span> <span class="n">solve</span><span class="p">(</span><span class="n">buildings</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">buildings</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
    <span class="c1"># 数据离散化 (Discretization)
</span>
    <span class="n">x_data</span> <span class="o">=</span> <span class="p">[</span><span class="n">buildings</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="ow">in</span> <span class="n">buildings</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="k">if</span> <span class="n">x_data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">l</span><span class="p">:</span>
            <span class="n">x_data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="ow">in</span> <span class="n">buildings</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">bisect_right</span><span class="p">(</span><span class="n">x_data</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
        <span class="c1"># i != 0 for right x-axis
</span>        <span class="k">if</span> <span class="n">x_data</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">r</span><span class="p">:</span>
            <span class="n">x_data</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>

    <span class="n">x_map</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x_data</span><span class="p">)}</span>

    <span class="c1"># Build Segment Tree by Batch Update
</span>
    <span class="n">segtree</span> <span class="o">=</span> <span class="n">SegmentTree</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x_data</span><span class="p">))</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span> <span class="ow">in</span> <span class="n">buildings</span><span class="p">:</span>
        <span class="n">l</span> <span class="o">=</span> <span class="n">x_map</span><span class="p">[</span><span class="n">l</span><span class="p">]</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">x_map</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
		<span class="c1"># [l, r)
</span>        <span class="n">segtree</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Sweep Line
</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x_data</span><span class="p">):</span>
        <span class="n">h</span> <span class="o">=</span> <span class="n">segtree</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span> <span class="ow">or</span> <span class="n">res</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">h</span><span class="p">:</span>
            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">h</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">res</span>

<span class="c1"># 分段树定义如上
</span></code></pre></div></div>

<h2 id="解树状数组">解②：树状数组</h2>

<p>如果说前面对分段树的改动还比较小<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>，那么<a href="/algs/FenwickTree.html">树状数组</a>的思路里面对树状数组的改动就比较tricky了，因为普通的树状数组，以下简称 BIT（Binary Indexed Tree）， 用某个点的前缀和表示该点的高度，那么任何 $x$ 轴靠前坐标上的高度更新都会影响后面位置的高度的计算。</p>

<p>因此我们对树状数组的改动是让它前面位置的更新不影响后面位置前缀和的计算，假如，考虑一种情况，所有建筑的右边缘都是 $\infty$ ，而更新和查询就像前面分段树一样，都是取所有相关位置值的最大：也就是更新的时候扫描所有祖先节点，取其位置既有值和当前更新值的最大，查询的时候扫描所有前缀位置，取最大值，那么此时就可以用树状数组正确地更新高度和单点查询。</p>

<p>因为此时的更新要么不影响后面位置的高度，要么影响得都是建筑区间重叠的部分：</p>

<p>假设两栋建筑的区间分别为 $[l_0, \infty)$ 和 $[l_1, \infty)$ 高度分别为 $h_0$ 和 $h_1$ ，如果 $l_0 \neq l_1$ ，不妨令 $l_0 \lt l_1$ ，那么在 $[l_0, l_1)$ 的区间上，两者互不影响，因为这个区域只有 $l_0$ 的更新，而在 $[l_1, \infty)$ 的区域，两者本来就是区间重叠，用两个值中的最大值覆盖即可。这样在查询高度的时候，对于位置 $x$ ，如果 $x\in [l_0, l_1)$ ，那它的高度是 $h_0$ ，如果 $x\in [l_1, \infty)$ ，那它的高度是 $\max (h_0, h_1)$ 。</p>

<p>当然 $\infty$ 的情况既不可能，也无法计算，但是如果说所有建筑的右边缘都是重合的，都是 $r$ ，而所有超过 $r$ 的 $x$ 轴上的位置都不不需要查询，那么问题也是等价的。</p>

<p>那么回到当前问题，如果建筑能够按照右边缘的 $x$ 轴位置从右到左的顺序排列，然后我们从右向左扫描，只在扫描到建筑的右边缘时才把该建筑（所代表的一个区间的高度）更新到树状数组里，然后对扫描线位置进行高度查询，这样我们就可以确保所有建筑的右边缘都是重合的，并且不需要查询超过重合点之后的位置。</p>

<p>但是，但是，且不说我们的建筑是按照左边缘的从左到右的顺序排列的，关键问题是题目要求地关键点是按照从左到右扫描的顺序得到的，根本不能从右向左扫描，这要怎么解决呢？</p>

<p>于是有了这里比较Tricky地树状数组地构造<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>：</p>

<p>既然一定要从左向右扫描，我™ 😡直接从数组的尾部开始建立这个树状数组！</p>

<p>这样某个位置的高度就是它的后缀最大值，而它的祖先节点就在它的左边，从左向右扫描时就完美符合了前面假设得树状数组的适应情况！</p>

<p><strong>反向树状数组</strong></p>

<p>对于 base 1 的数组，$x$ 所辖区间长度是 <code class="language-plaintext highlighter-rouge">x &amp; (-x)</code> ，而对于 base 0 的数组则是 <code class="language-plaintext highlighter-rouge">(x+1) &amp; -(x+1)</code> ，对于从尾部建立起来的树状数组，$x’ = n - x - 1$ ，其中 $n$ 为数组长度。</p>

<p>树状数组更新的时候实际上只需要更新到扫描线的位置（也就是代码里的 <code class="language-plaintext highlighter-rouge">until</code> ）</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RevBIT</span><span class="p">():</span>
    <span class="s">"""Reversed Binary Indexed Tree"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="c1"># base 0
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">data_len</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">until</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">until</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">val</span><span class="p">)</span>

            <span class="n">i</span> <span class="o">-=</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">suffix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">acc</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">acc</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

            <span class="n">l</span> <span class="o">=</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="n">l</span>

        <span class="k">return</span> <span class="n">acc</span>
</code></pre></div></div>

<p><strong>总体过程</strong></p>

<p>总体过程首先是 $x$ 轴坐标的排序和离散化，和前面分段树的处理一样，后面在扫描过程中更新建筑到树状数组上和即时地查询，显然对于每栋建筑，我们只需要更新建筑的右边缘的坐标<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>和高度。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">bisect</span> <span class="kn">import</span> <span class="n">bisect_right</span>


<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">getSkyline</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buildings</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">return</span> <span class="n">solve</span><span class="p">(</span><span class="n">buildings</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">buildings</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
    <span class="n">x_data</span> <span class="o">=</span> <span class="p">[</span><span class="n">buildings</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="ow">in</span> <span class="n">buildings</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="k">if</span> <span class="n">x_data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">l</span><span class="p">:</span>
            <span class="n">x_data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="ow">in</span> <span class="n">buildings</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">bisect_right</span><span class="p">(</span><span class="n">x_data</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">x_data</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">r</span><span class="p">:</span>
            <span class="n">x_data</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>

    <span class="n">x_map</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x_data</span><span class="p">)}</span>

    <span class="n">bit</span> <span class="o">=</span> <span class="n">RevBIT</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x_data</span><span class="p">))</span>

    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x_data</span><span class="p">):</span>
        <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">buildings</span><span class="p">)</span> <span class="ow">and</span> <span class="n">x</span> <span class="o">==</span> <span class="n">buildings</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]:</span>
            <span class="n">r</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">buildings</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>

            <span class="n">bit</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">x_map</span><span class="p">[</span><span class="n">r</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">until</span><span class="o">=</span><span class="n">i</span><span class="p">)</span>

            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">h</span> <span class="o">=</span> <span class="n">bit</span><span class="p">.</span><span class="n">suffix</span><span class="p">(</span><span class="n">x_map</span><span class="p">[</span><span class="n">x</span><span class="p">])</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span> <span class="ow">or</span> <span class="n">res</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">h</span><span class="p">:</span>
            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">h</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<p>但是，在仔细考虑下我们对反向建构的树状数组的使用🤔，发现虽然我们扫描后缀，但只要一个位置来保存高度，而不需要真地计算前缀和，那么我们完全可以用一个普通的树状数组的结构，但是用父节点保存高度，更新的时候向前更新节点（查询扫描的逆过程，比如 $7 \rightarrow 6 \rightarrow 4 \rightarrow 2 \rightarrow 1$）<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>，查询的时候向后扫描所有父节点。</p>

<p><strong>徒有其表地树状数组</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">FakeBIT</span><span class="p">():</span>
    <span class="s">"""Fake Binary Indexed Tree whose prefix for update and suffix for query"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="c1"># base 0
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">data_len</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">until</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">until</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">val</span><span class="p">)</span>

            <span class="n">i</span> <span class="o">-=</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">suffix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">acc</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">):</span>
            <span class="n">acc</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">acc</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

            <span class="n">i</span> <span class="o">+=</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">-</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">acc</span>
</code></pre></div></div>

<p>总体过程和反向树状数组一样，只需要把 <code class="language-plaintext highlighter-rouge">bit = RevBIT(len(x_data))</code> 替换为 `    bit = FakeBIT(len(x_data))`</p>

<h2 id="解优先级队列">解③：优先级队列</h2>

<p>借着上文，我们从反向树状数组推到假树状数组，于是可以想到，为什么不干脆用优先级队列取代上面树状数组的作用？每次扫描的时候把把建筑更新到优先级队列里，保存一个右边缘坐标和高度，查询的时候就从对队首弹出所有右边缘不符合条件的元素，然后新的队首的元素的高度就是我们需要的该位置的最大高度，当然如果队列为空，就是高度为 $0$ 。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">bisect</span> <span class="kn">import</span> <span class="n">insort</span>
<span class="kn">from</span> <span class="nn">sortedcontainers</span> <span class="kn">import</span> <span class="n">SortedList</span>


<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">getSkyline</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buildings</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="k">return</span> <span class="n">solve</span><span class="p">(</span><span class="n">buildings</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">buildings</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
    <span class="n">x_data</span> <span class="o">=</span> <span class="p">[</span><span class="n">l</span> <span class="k">for</span> <span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="ow">in</span> <span class="n">buildings</span><span class="p">]</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="ow">in</span> <span class="n">buildings</span><span class="p">:</span>
        <span class="n">insort</span><span class="p">(</span><span class="n">x_data</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>

    <span class="n">queue</span> <span class="o">=</span> <span class="n">SortedList</span><span class="p">([],</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">n_buildings</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">buildings</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">x_data</span><span class="p">:</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n_buildings</span> <span class="ow">and</span> <span class="n">buildings</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span><span class="p">:</span>
            <span class="n">queue</span><span class="p">.</span><span class="n">add</span><span class="p">((</span><span class="n">buildings</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">buildings</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]))</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="c1"># pop outdated from priority queue
</span>
        <span class="k">while</span> <span class="n">queue</span> <span class="ow">and</span> <span class="n">queue</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">:</span>
            <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">queue</span><span class="p">:</span>
            <span class="n">h</span> <span class="o">=</span> <span class="n">queue</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">h</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span> <span class="ow">or</span> <span class="n">res</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">h</span><span class="p">:</span>
            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">h</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sortedcontainers</code> 是 LeetCode 承诺地自动包含进 Python 环境里的第三方库，它是一个纯 Python 但是足够高效地有序集合的库，只包含三个有序集合：<code class="language-plaintext highlighter-rouge">SortedList</code>，<code class="language-plaintext highlighter-rouge">SortedSet</code>，<code class="language-plaintext highlighter-rouge">SortedDict</code> ，用来补充标准库缺乏地功能。<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup><sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup><sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup></p>

<h2 id="注解">注解</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>python 3.10 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>只是在批量赋值和查询的时候有一个额外的求取最大值的操作，这是为了确保重叠区间的高度是上面所有建筑高度的最大值 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>我很欣赏这种设计，它就是非常清楚这个数据结构地构造和实质，然后就可以保留实质，根据需要随意地解构然后重构，这种使用可以说已入化境 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>当然准确说是 $r-1$ <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>计算节点的关键是把握子区间的长度 <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>但是我不得不吐槽得是，Python 作为曾经地号称“自带电池”地方便语言，但现在很多方面已经非常老迈（虽然正在尝试追赶），特别是相对于Rust而言，基本上如果不是为了比较不同实现的性能，出于方便考虑我宁可用 Rust ，Rust的问题就是优化太好、运行太快了，测试结果几乎总是 0 ms ，而 Python在这里的优势居然是足够慢，便于测试中能发现性能上的问题😅。 <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p>我真的为了寻找一个提供优先级队列功能地容器，花费了不少时间，Python 标准库里面有几个看起来很像地，但都不很合适，一个是 <code class="language-plaintext highlighter-rouge">queue.PriorityQueue</code> 名字就叫做优先级队列，但是是用来做进线程调度地😅； 另一个是它的底层实现 <code class="language-plaintext highlighter-rouge">heapq.[heapify, heappush, heappop]</code> ，简直就和 C 语言的函数一样，可以传一个列表，然后构建基于堆地优先级队列，但是连个自定义 <code class="language-plaintext highlighter-rouge">key</code> 的功能都没有，还需要专门用一个数据包装，来自定义比较函数，实在绷不住；还有一个是 <code class="language-plaintext highlighter-rouge">collections.OrderedDict</code> 但它保持地是插入顺序。 <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>但是第三方地 <code class="language-plaintext highlighter-rouge">sortedcontainers.SortedList</code> 也令人不太满意，首先方法非常简单，只供最基本地使用，另外实在不知道它加一些 <code class="language-plaintext highlighter-rouge">not implemented，use xxx replace</code> 的方法到实现里有什么好处，调用不存在的方法本来就会报错，又不需要它来做警戒哨，这只是在混淆代码的静态分析程序，让智能提示里出现错误地选项，让每个第一次使用它的人浪费几十秒的时间，去发现正确的方法😡。 <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="[&quot;oth&quot;]" /><summary type="html"><![CDATA[题干]]></summary></entry></feed>